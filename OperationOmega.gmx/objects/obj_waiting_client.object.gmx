<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop_all();
if(global.musictoggle = 0)
{
        audio_stop_sound(music_lunation);
        audio_play_sound(music_lunation, 1, 1);
}
//Initialize chat
chatline[0] = "";
chatcolor[0] = c_black;
chatline[1] = "";
chatcolor[1] = c_black;
chatline[2] = "";
chatcolor[2] = c_black;
chatline[3] = "";
chatcolor[3] = c_black;
chatline[4] = "";
chatcolor[4] = c_black;
chatline[5] = "";
chatcolor[5] = c_black;
chatline[6] = "";
chatcolor[6] = c_black;
chatline[7] = "";
chatcolor[7] = c_black;
chatline[8] = "";
chatcolor[8] = c_black;
found = 0;
text = "";
alarm[0] = 12;
flashing = '|';
//Initialize match rule variable to avoid error
global.matchtype = "";
global.matchvariable = 0;
disconnectcheck = 0;


if(room = rm_waiting)
for(i = 0; i &lt; 8; i += 1)
{
    global.playerslot[i] = instance_create(562, 27+(i*42), obj_playerslot);
    global.playerslot[i].mid = i;
    global.readied[i] = 1;
    global.playerslot[i].alarm[1] = 20+i*5;
}
(instance_create(global.playerslot[0].x, global.playerslot[0].y, obj_playerslot_readied)).mid = 0;
option = instance_create(494, 42+(global.mymid*42), obj_playerslot_option);
option.image_index = 3;
option.mid = global.mymid;
option.owner = global.playerslot[global.mymid];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change the flashing text
if(flashing = '')
 flashing = '|';
else
 flashing = '';
//Set time until next flash
alarm[0] = 18;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(true)
{
    var packet, size;
    size = 0;
    size = receivemessage(global.host, 0, 0);
    if(size == 0 || disconnectcheck &gt;= 3000)
    {
        if(global.musictoggle = 0)
        {
            audio_stop_sound(music_lunation);
            audio_play_sound(music_quasar, 1, 1);
        }
        //If you are a client, send the disconnection message 
        //to the host, close the port, and return to the connecting
        //room
        clearbuffer(0);
        writebyte(CLIENT_DROP, 0);
        writebyte(global.mymid, 0);
        writestring(global.name, 0);
        sendmessage(global.host, 0, 0, 0);
        show_message("The host has disconnected.");
        closesocket(global.udpsock);
        dllfree();
        if(global.gameslist = 1)
            room_goto(rm_gamelist);
        else
            room_goto(rm_connect);
        exit;
    }
    if(size &lt; 0) 
    {
        disconnectcheck += 1;
        break;
    }
    disconnectcheck = 0;
    packet = readbyte(0);
    switch(packet)
    {
    
        //Check for new chat messages
        case 11:
            //Update your own chat
            chatline[0] = chatline[1];
            chatcolor[0] = chatcolor[1];
            chatline[1] = chatline[2];
            chatcolor[1] = chatcolor[2];
            chatline[2] = chatline[3];
            chatcolor[2] = chatcolor[3];
            chatline[3] = chatline[4];
            chatcolor[3] = chatcolor[4];
            chatline[4] = chatline[5];
            chatcolor[4] = chatcolor[5];
            chatline[5] = chatline[6];
            chatcolor[5] = chatcolor[6];
            chatline[6] = chatline[7];
            chatcolor[6] = chatcolor[7];
            chatline[7] = chatline[8];
            chatcolor[7] = chatcolor[8];
            audio_play_sound(snd_chatmessage, 1, 0);
            hold = readbyte(0);
            chatcolor[8] = readdouble(0);
            if(chatcolor[8] != c_maroon)
             chatcolor[8] = c_white;
            chatline[8] = readstring(0);
            //Animate player box if a player has joined
            if(string_copy(chatline[8], string_length(chatline[8])-19, 20) = "has joined the game." &amp;&amp; chatcolor[8] = c_maroon) 
            {
                global.newmid = readbyte(0);    
                with(obj_playerslot)
                {
                    if(mid = global.newmid)
                    {   
                        showthisimage = 0;                    
                        (instance_create(x, y, obj_playerslot_addplayer)).owner = id;
                    }
                }             
            }
            //Animate player box if a player has left The host has kicked
            if((string_copy(chatline[8], string_length(chatline[8])-17, 18) = "has left the game." || string_copy(chatline[8], 0, 19) = "The host has kicked") &amp;&amp; chatcolor[8] = c_maroon) 
            {
                global.newmid = readbyte(0);    
                with(obj_playerslot)
                {
                    if(mid = global.newmid)
                    {
                        playerleave = instance_create(x, y, obj_playerslot_playerleave);
                        playerleave.owner = id;
                        playerleave.lastimage = global.lolship[mid]+((global.team[mid]-1)*3)-1;
                        visible = 0;
                    }
                }
            }
            //Un-ready if host has just finished changing settings
            if(chatline[8] = "The host finished changing match settings.")
            {
                obj_readygo.image_index = 1;
                with(obj_playerslot_readied)
                    if(mid != 0)
                        instance_destroy();
            }
            //Receive kick
            if(string_copy(chatline[8], 0, 19) = "The host has kicked")
            if(global.mymid = readbyte(0))
            {
                show_message('You have been kicked from the game.');
                closesocket(global.udpsock);
                dllfree();
                if(global.gameslist = 1)
                    room_goto(rm_gamelist);
                else
                    room_goto(rm_connect);
                exit;
            }
        break;
     
        //The host starts the game
        case 15:
             global.randommap = readbyte(0); 
             for(i = 0; i &lt; 8; i += 1)
             {
                global.lolship[i] = readbyte(0);
                global.playerprimary[i] = readbyte(0);
             }
             obj_menumod.alarm[3] = 25;
             obj_waiting_boxes.animation = 3;
             obj_playerslot_option.scale_out = 1;
             prnt_menubutton.animation = 2;
             obj_menumod.animation = 1;
        break;
    
    //The host wants to start, but all players aren't ready
    case 16:
         //If you are not ready, send a message to your chat
         if(obj_readygo.image_index = 1)
         {
            //Update your own chat
            chatline[0] = chatline[1];
            chatcolor[0] = chatcolor[1];
            chatline[1] = chatline[2];
            chatcolor[1] = chatcolor[2];
            chatline[2] = chatline[3];
            chatcolor[2] = chatcolor[3];
            chatline[3] = chatline[4];
            chatcolor[3] = chatcolor[4];
            chatline[4] = chatline[5];
            chatcolor[4] = chatcolor[5];
            chatline[5] = chatline[6];
            chatcolor[5] = chatcolor[6];
            chatline[6] = chatline[7];
            chatcolor[6] = chatcolor[7];
            chatline[7] = chatline[8];
            chatcolor[7] = chatcolor[8];
            chatcolor[8] = c_maroon;
            chatline[8] = "The host wants to start. Click ready.";
         }
    break;
           
     //Post-match stat send
     case 18:
         mid = readbyte(0);
         for(i = 0; i &lt; 8; i += 1)
         {
             global.assists[i] += readbyte(0);
             global.damagedealt[i] += readshort(0);
         }
         global.damagetaken[mid] = readshort(0);
         global.walldeaths += readbyte(0);
         global.walldamage += readshort(0);
     break;
    
     //perform the constant updates
    case CLIENT_CHECK:
        global.playercount = readbyte(0);
        global.maxplayers = readbyte(0);
        global.matchtype = readstring(0);
        global.matchvariable = readbyte(0);
        anewlevel = readstring(0);
        if(anewlevel != global.matchlevel)
        {
            global.matchlevel = anewlevel;
            obj_viewmap.growing = 1;
            obj_viewmap.alarm[0] = 60;
        }
        for(i = 0; i &lt;= 7; i += 1)
        {
            old_activated = global.activated[i]
            global.activated[i] = readbyte(0);
            if(global.activated[i] = 1)
            {          
                if(i != global.mymid)
                    global.othername[i] = readstring(0);
                else
                    useless = readstring(0);
                    
                old_team = global.team[i];
                global.team[i] = readbyte(0);
                if(old_team != global.team[i])
                    if(global.playerslot[i].hspeed = 0)
                        (instance_create(global.playerslot[i].x, global.playerslot[i].y, obj_playerslot_teamchange)).image_index = global.lolship[i]+((old_team-1)*3)-1;  
                                      
                global.lolship[i] = readbyte(0);
                
                old_readied = global.readied[i];
                global.readied[i] = readbyte(0);
                if(old_readied != global.readied[i] &amp;&amp; global.playerslot[i].hspeed = 0)
                {
                    if(old_readied = 1)
                        (instance_create(global.playerslot[i].x, global.playerslot[i].y, obj_playerslot_readied)).mid = i;
                    else
                    {
                        global.newmid = i;
                        with(obj_playerslot_readied)
                            if(mid = global.newmid)
                                instance_destroy();
                    }
                }
                    
                                      
            }
            else
                if(old_activated != global.activated[i] &amp;&amp; old_activated != 1)
                    global.playerslot[i].slideover = 0;            
        } 
         global.redteam = readbyte(0);
         global.blueteam = readbyte(0);
        
    break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_chat);
draw_set_alpha(obj_customizer.backbox.display_alpha);
//Stop more input if max is reached
if(string_length(keyboard_string) &gt; 90)
 keyboard_string = string_copy(keyboard_string, 0, 90);
      
//Undo same-letter spams
lastletter = string_copy(keyboard_string, string_length(keyboard_string), 1);
keyboard_string = string_replace(keyboard_string, lastletter+lastletter+lastletter+lastletter, lastletter+lastletter+lastletter);
      
//Undo '#'
keyboard_string = string_replace(keyboard_string, '#', '');
      
//Find the correct text to fit into the bar
for(i = string_length(keyboard_string); i &gt;= 0; i -= 1)
 if(string_width(string_copy(keyboard_string, i, string_length(keyboard_string)-i)) &gt; 350 || i = 0)
 {
  startchat = i;
  stopchat = string_length(keyboard_string)+1-i;
  break;  
 }
//Draw the text in the chat bar
draw_text_transformed(6, 460, string_copy(keyboard_string, startchat, stopchat)+flashing, 1, 1, 0);
//draw chat
q = 0;
for(i = 0; i &lt;= 7-max(q, 0); i += 1)
{
 if(string_width(chatline[8-i]) &gt; 360)
  q += 1;
 draw_set_color(chatcolor[8-i]);
 draw_text_ext(2, 420-(i*18+q*14), chatline[8-i], 14, 360);
}
draw_set_color(c_black);

draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Send the message to the host
if(keyboard_string = '') exit;
audio_play_sound(snd_chatmessage, 1, 0);
//create the new chat line and take note of its middle
sendline = global.name+": "+ keyboard_string;
middle = floor(string_length(sendline)/2);
//Break up text if there is no space near the middle
if(string_replace(string_copy(sendline, middle-4, 8), ' ', '-') = string_copy(sendline, middle-4, 8) &amp;&amp; string_length(sendline) &gt; 30)
 sendline = string_insert(' ', sendline, middle);

//If a rule change is not typed, send what you typed to clients
chatline[0] = chatline[1];
chatcolor[0] = chatcolor[1];
chatline[1] = chatline[2];
chatcolor[1] = chatcolor[2];
chatline[2] = chatline[3];
chatcolor[2] = chatcolor[3];
chatline[3] = chatline[4];
chatcolor[3] = chatcolor[4];
chatline[4] = chatline[5];
chatcolor[4] = chatcolor[5];
chatline[5] = chatline[6];
chatcolor[5] = chatcolor[6];
chatline[6] = chatline[7];
chatcolor[6] = chatcolor[7];
chatline[7] = chatline[8];
chatcolor[7] = chatcolor[8];
chatline[8] = sendline;
chatcolor[8] = c_white;
clearbuffer(0);
writebyte(11, 0);
writebyte(global.mymid, 0);
writedouble(c_black, 0);
writestring(sendline, 0);
sendmessage(global.host, "", 0, 0);

keyboard_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
