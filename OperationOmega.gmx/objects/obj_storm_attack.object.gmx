<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_storm</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize variables
target_x = 0;                   //x value to aim the attack at
target_y = 0;                   //y value to aim the attack at
target_direction = 0;           //directional value to aim at
target_object = -1;             //Object to fire at(if applicable)
mid = 0;                        //mid of this ship to shoot from
amplified = false;              //Whether or not the amplified version is used

alarm[1] = 1;   //Set time until attack creation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Assign the correct object depending on if it's coming from an ally or an enemy
if(global.team[mid] = global.team[global.mymid])
{
    var created_object = obj_storm;
    var wall_object = obj_storm_wall;
}
else
{
    var created_object = obj_storm_enemy;
    var wall_object = obj_storm_enemy_wall;
}

//Hold the value of the origin object locally for faster reference    
var origin_object = global.playership[mid];
//Hold the value of the target direction and distance
var target_direction = point_direction(origin_object.x, origin_object.y, target_x, target_y);
var target_distance = point_distance(origin_object.x, origin_object.y, target_x, target_y);

var mid_check = mid;
//Compare the mid of existing storm objects 
with(created_object)
{
    if(mid = mid_check)
        age += 1;               //Add to the storm bullet's age if it matches
    if(age = 4)
        instance_destroy();     //Destroy the bullet if it is 4 waves old
}

//Compare the mid of existing storm wall objects 
with(wall_object)
{
    if(mid = mid_check)
        age += 1;               //Add to the storm wall's age if it matches
    if(age = 4)
        instance_destroy();     //Destroy the wall if it is 4 waves old
}

//Play a sound effect
sfx_play(snd_storm, x, y);

//Create and send shots at the cursor
if(amplified = 0)
{
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction-30;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction+30;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction-15;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction+15;
    storm.mid = mid;
    storm = instance_create(mouse_x, mouse_y, wall_object);
    storm.direction = target_direction-180;
    storm.x += lengthdir_x(target_distance, storm.direction-180);
    storm.y += lengthdir_y(target_distance, storm.direction-180);       
    storm.image_angle = storm.direction;
    storm.mid = mid;
}
else
{
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction+5;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction-5;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction-15;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction+15;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction-25;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction+25;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction-35;
    storm.mid = mid;
    storm = instance_create(origin_object.x, origin_object.y, created_object);
    storm.direction = target_direction+35;
    storm.mid = mid;
    storm = instance_create(target_x, target_y, wall_object);
    storm.direction = target_direction-180;
    storm.x += lengthdir_x(target_distance, storm.direction-180);
    storm.y += lengthdir_y(target_distance, storm.direction-180);       
    storm.image_angle = storm.direction;
    storm.mid = mid;
}

//This object is no longer needed
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
