<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_box</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0;
image_xscale = 0;
image_yscale = 0;
animation = -1;
alarm[0] = 15;
over_alpha = 0;
display_alpha = 0;
menu_expand = 0;
expand_alpha = 0;
create_selections = 0;
waiting_for_new_room = 0;
close_menu = 0;
dont_create = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(close_menu = 0)
    game_end();
else
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animation = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animation = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Animation states:
//0- window appearing and increasing in size
//1= window downsizing to correct size
//2- info in window appears if needed. Stay here until window closes.
switch(animation)
{
    case 0:
        if(image_xscale &lt; 1.2)
            image_xscale += 0.1;
        image_yscale += 0.1;
        image_alpha += 0.053;
        if(image_yscale &gt;= 1.2)
            animation = 1;
    break;
    case 1:
        image_xscale -= 0.04;
        image_yscale -= 0.04;
        image_alpha += 0.072;
        display_alpha += 0.1;
        if(image_xscale = 1)
        {
            animation = 2;
            image_alpha = 1;
        }
    break; 
    case 2:
        if(display_alpha &lt; 1)
        {
            display_alpha += 0.1;
            alarm[1] = 3;
        }
    break;   
    case 3:
        image_xscale += 0.04;
        image_yscale += 0.04;
        image_alpha -= 0.072;
        display_alpha -= 0.1;
        if(image_xscale = 1.2)
        {
            animation = 4;
        }
    break; 
    case 4:
        display_alpha -= 0.1;
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        image_alpha -= 0.053;
        if(image_xscale &lt;= 1.1)
            over_alpha -= 0.1;
        if(image_xscale &lt;= 0.6)
        {
            image_alpha = 0;
            alarm[3] = 10;
            animation = -1;
        }
    break;
    case 5:
    //7 pixels on top and bottom
    //each menu selection needs 40 height
    //Main menu: 120-14 = 106 pixels needed to expand
        switch(room)
        {
            case rm_mainmenu:
                if(menu_expand &lt; 78)
                {
                    menu_expand += 6;
                    if(expand_alpha &lt; 1)
                        expand_alpha += 0.1;
                }
                else
                {
                    menu_expand = 80;
                    if(expand_alpha &gt; 0)
                        expand_alpha -= 0.1;
                }
                if(menu_expand &gt; 33 &amp;&amp; create_selections = 0)
                {
                    menu_privategame = instance_create(x, y-22, obj_menu_selection);
                    menu_privategame.text_sprite = spr_private;
                    menu_privategame.goto_room = rm_connect;
                    menu_options = instance_create(x, y+22, obj_menu_selection);
                    menu_options.image_angle = 180;
                    menu_options.text_sprite = spr_options;
                    menu_options.goto_room = rm_options;
                    create_selections = 1;
                }
                if(menu_expand &gt; 73 &amp;&amp; create_selections = 1)
                {
                    menu_publicgame = instance_create(x, y-63, obj_menu_selection);
                    menu_publicgame.text_sprite = spr_server;
                    menu_publicgame.goto_room = rm_gamelist;
                    menu_quitgame = instance_create(x, y+63, obj_menu_selection);
                    menu_quitgame.text_sprite = spr_quit;
                    menu_quitgame.image_angle = 180;
                    menu_quitgame.quit_option = 1;
                    create_selections = 2;
                }
            break;
            case rm_gamelist:
                if(menu_expand &lt; 78)
                {
                    menu_expand += 6;
                    if(expand_alpha &lt; 1)
                        expand_alpha += 0.1;
                }
                else
                {
                    menu_expand = 80;
                    if(expand_alpha &gt; 0)
                        expand_alpha -= 0.1;
                }
                if(instance_exists(obj_menu_selection))
                    with(obj_menu_selection)
                        if(animation_step &gt;= 6)
                        {
                            obj_menu_box.dont_create = animation_step-5;
                        } 
                if(menu_expand &gt; 33 &amp;&amp; create_selections = 0)
                {
                    if(dont_create != 2)
                    {
                        menu_searchgame = instance_create(x, y-22, obj_menu_selection);
                        menu_searchgame.text_sprite = spr_searchforgame;
                        menu_searchgame.goto_room = rm_connect;
                    }
                    else
                        dont_create = 0;   
                    if(global.in_group = 0)            
                    {                     
                        menu_groupsettings = instance_create(x, y+22, obj_menu_selection);
                        menu_groupsettings.image_angle = 180;
                        menu_groupsettings.text_sprite = spr_groupsettings;
                        menu_groupsettings.goto_room = rm_groupsettings;
                    }
                    else
                    {
                        menu_groupsettings = instance_create(x, y+22, obj_menu_selection);
                        menu_groupsettings.image_angle = 180;
                        menu_groupsettings.text_sprite = spr_leave_group;
                        menu_groupsettings.goto_room = rm_gamelist;
                    }
                    create_selections = 1;
                }
                if(menu_expand &gt; 73 &amp;&amp; create_selections = 1)
                {
                    if(dont_create != 1)
                    {
                        menu_quickplay = instance_create(x, y-63, obj_menu_selection);
                        menu_quickplay.text_sprite = spr_quickplay;
                        menu_quickplay.goto_room = rm_gamelist;
                    }
                    else
                        dont_create = 0;
                    menu_quitgame = instance_create(x, y+63, obj_menu_selection);
                    menu_quitgame.text_sprite = spr_back;
                    menu_quitgame.image_angle = 180;
                    menu_quitgame.goto_room = rm_mainmenu;
                    create_selections = 2;
                }
            break;
            case rm_options:
                if(menu_expand &lt; 78)
                {
                    menu_expand += 6;
                    if(expand_alpha &lt; 1)
                        expand_alpha += 0.1;
                }
                else
                {
                    menu_expand = 80;
                    if(expand_alpha &gt; 0)
                        expand_alpha -= 0.1;
                }
                if(instance_exists(obj_menu_selection))
                    with(obj_menu_selection)
                        if(animation_step &gt;= 6)
                        {
                            obj_menu_box.dont_create = animation_step-5;
                        } 
                if(menu_expand &gt; 33 &amp;&amp; create_selections = 0)
                {
                    menu_privategame = instance_create(x, y-22, obj_menu_selection);
                    if(global.sfxtoggle = 1)
                        menu_privategame.text_sprite = spr_sfxoff;
                    else
                        menu_privategame.text_sprite = spr_sfxon;
                    menu_options = instance_create(x, y+22, obj_menu_selection);
                    menu_options.image_angle = 180;
                    if(global.firingmode = 1)
                        menu_options.text_sprite = spr_firing2;
                    else
                        menu_options.text_sprite = spr_firing;                    
                    create_selections = 1;
                }
                if(menu_expand &gt; 73 &amp;&amp; create_selections = 1)
                {
                    menu_publicgame = instance_create(x, y-63, obj_menu_selection);
                    if(global.musictoggle = 1)
                        menu_publicgame.text_sprite = spr_musicoff;
                    else
                        menu_publicgame.text_sprite = spr_musicon;
                    menu_quitgame = instance_create(x, y+63, obj_menu_selection);
                    menu_quitgame.text_sprite = spr_back;
                    menu_quitgame.image_angle = 180;
                    menu_quitgame.goto_room = rm_mainmenu;
                    create_selections = 2;
                }
            break;
            case rm_connect:
                if(menu_expand &lt; 58)
                {
                    menu_expand += 6;
                    if(expand_alpha &lt; 1)
                        expand_alpha += 0.1;
                }
                else
                {
                    menu_expand = 60;

                    if(expand_alpha &gt; 0)
                        expand_alpha -= 0.1;
                }
                if(instance_exists(obj_menu_selection))
                    with(obj_menu_selection)
                        if(animation_step &gt;= 6)
                        {
                            obj_menu_box.dont_create = animation_step-5;
                        }                
                if(menu_expand &gt; 13 &amp;&amp; create_selections = 0)
                {
                    if(dont_create != 2)
                    {
                        menu_options = instance_create(x, y, obj_menu_selection);
                        menu_options.image_angle = 180;
                        menu_options.text_sprite = spr_connect;
                        menu_options.goto_room = rm_options;
                    }
                    else
                    {
                        dont_create = 0;
                        menu_options.animation_step = 1;
                    }
                    create_selections = 1;
                }
                if(menu_expand &gt; 43 &amp;&amp; create_selections = 1)
                {
                    if(dont_create != 1)
                    {
                        menu_publicgame = instance_create(x, y-43, obj_menu_selection);
                        menu_publicgame.text_sprite = spr_host;
                        menu_publicgame.goto_room = rm_gamelist;
                    }
                    else
                    {
                        dont_create = 0;
                    }

                    menu_quitgame = instance_create(x, y+43, obj_menu_selection);
                    menu_quitgame.text_sprite = spr_back;
                    menu_quitgame.image_angle = 180;
                    menu_quitgame.goto_room = rm_mainmenu;
                    create_selections = 2;
                }
            break;
            case rm_groupsettings:
                if(menu_expand &lt; 58)
                {
                    menu_expand += 6;
                    if(expand_alpha &lt; 1)
                        expand_alpha += 0.1;
                }
                else
                {
                    menu_expand = 60;

                    if(expand_alpha &gt; 0)
                        expand_alpha -= 0.1;
                }
                if(instance_exists(obj_menu_selection))
                    with(obj_menu_selection)
                        if(animation_step &gt;= 6)
                        {
                            obj_menu_box.dont_create = animation_step-5;
                        }                
                if(menu_expand &gt; 13 &amp;&amp; create_selections = 0)
                {
                    if(dont_create != 1)
                    {
                        menu_options = instance_create(x, y, obj_menu_selection);
                        menu_options.image_angle = 180;
                        menu_options.text_sprite = spr_joingroup;
                        menu_options.goto_room = rm_options;
                    }
                    else
                    {
                        dont_create = 0;
                        menu_options.animation_step = 1;
                    }
                    create_selections = 1;
                }
                if(menu_expand &gt; 43 &amp;&amp; create_selections = 1)
                {

                    menu_publicgame = instance_create(x, y-43, obj_menu_selection);
                    menu_publicgame.text_sprite = spr_create_group;
                    menu_publicgame.goto_room = rm_gamelist;
                    menu_quitgame = instance_create(x, y+43, obj_menu_selection);
                    menu_quitgame.text_sprite = spr_back;
                    menu_quitgame.image_angle = 180;
                    menu_quitgame.goto_room = rm_gamelist;
                    create_selections = 2;
                }
            break;
        }
    break;
    case 6:
        if(menu_expand &gt; 24)
        {
            menu_expand -= 6;
            if(expand_alpha &lt; 1)
                expand_alpha += 0.1;
        }
        else
        {
            menu_expand = 18;
            if(expand_alpha &gt; 0)
                expand_alpha -= 0.1;
        }
    break;
    case 7:
        if(menu_expand &gt; 0)
        {
            menu_expand -= 3;
            if(expand_alpha &lt; 1)
                expand_alpha += 0.1;
        }
        else
        {
            menu_expand = 0;
            if(expand_alpha &gt; 0)
            {
                expand_alpha -= 0.1;
            }
            else
                waiting_for_new_room = 1;
        }
    break;

}
if(over_alpha &lt; 1 &amp;&amp; animation != 4)
    over_alpha += 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(waiting_for_new_room = 1)
{
    waiting_for_new_room = 0;
    animation = 5;
    create_selections = 0;
    dont_create = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(animation &lt; 0)
    exit;
//Set the font and color
draw_set_font(fnt_chat);
draw_set_color(c_aqua);


//Draw the profile box
if(animation &lt; 5)
{
    draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale, 0, c_white, image_alpha*over_alpha);
    if(image_alpha != 1)
        draw_sprite_ext(sprite_index, 1, x, y, image_xscale, image_yscale, 0, c_white, (1-image_alpha)*over_alpha);
}
else
{
    draw_sprite_ext(sprite_index, 2, x, y-menu_expand, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprite_index, 4, x, y-menu_expand, 1, 1, 0, c_white, expand_alpha);
    draw_sprite_ext(sprite_index, 3, x, y+menu_expand, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprite_index, 5, x, y+menu_expand, 1, 1, 0, c_white, expand_alpha);
    draw_sprite_ext(spr_menu_box_background, 0, x, y-menu_expand, 1, menu_expand*2, 0, c_white, 1);
}
draw_set_alpha(display_alpha);


draw_set_color(c_black);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,11</point>
    <point>161,161</point>
  </PhysicsShapePoints>
</object>
