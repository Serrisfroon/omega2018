<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop_all();
if(global.musictoggle = 0)
{
    audio_stop_music();
    audio_play_music(music_lunation, 1);
}
//Initilize chat
chatline[0] = "";
chatcolor[0] = c_black;
chatline[1] = "";
chatcolor[1] = c_black;
chatline[2] = "";
chatcolor[2] = c_black;
chatline[3] = "";
chatcolor[3] = c_black;
chatline[4] = "";
chatcolor[4] = c_black;
chatline[5] = "";
chatcolor[5] = c_black;
chatline[6] = "";
chatcolor[6] = c_black;
chatline[7] = "";
chatcolor[7] = c_black;
chatline[8] = "";
chatcolor[8] = c_black;
found = 0;
text = "";
flashing = '|';
alarm[0] = 5;

switch(global.resolution)
{
case 3:
     add = 214;
break;
case 4:
     add = 128;
break;
default:
        add = 0;
break;
}
if(room = rm_waiting)
{
for(i = 0; i &lt; 8; i += 1)
{
 global.playerprimary[i] = 0;
 global.playerslot[i] = instance_create(424+add, 24+(i*32), obj_playerslot);
 global.playerslot[i].mid = i;
 global.playerslot[i].active = 0;
 global.readied[i] = 1;
}
}
global.readied[0] = 3;

global.playerslot[0].active = 1;
global.playerslot[0].team = global.team[global.mymid];
global.playerslot[0].ship = global.shipselect;
global.playerslot[0].ready = 1;
global.playerslot[0].name = global.name;
global.activated[0] = 1;

//Create a socket to listen for connections if the game has just been made
if(global.newgame = 0)
{
 global.listen = tcplisten(14800, 2, true, 0);
 if(global.listen &lt;= 0)
 {
  show_message("Failed to listen on port 14800.");
  global.master = false;
  dllfree();
  if(global.gameslist = 0)
   room_goto(rm_connect);
  else
   room_goto(rm_gamelist);
 }
 setnagle(global.listen, true);
 global.newgame = 1;
}

//Set stock match elimination values
global.redteamout = 0;
global.blueteamout = 0;


          if(global.playercount = global.maxplayers)
            roomstatus = "Full";
          else
            roomstatus = "Waiting";
          global.createtime = get_servertime();
          sql_modify(global.myipaddress, global.createtime, global.maxplayers, global.playercount, global.matchtype, global.shortlevel, roomstatus);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change the flashing text
if(flashing = '')
 flashing = '|';
else
 flashing = '';
//Set time until next flash
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lolship[0] = global.shipselect;
global.playerprimary[0] = global.primary;
//Calculate max players
global.maxplayers = 0;
for(i = 0; i &lt; 8; i += 1)
{
 if(global.activated[i] != -1)
  global.maxplayers += 1;
}

if(ds_list_size(global.clients) &gt; 0)
while(true)
 {
  var packet, size;
  size = 0;
  for(i = 0; i &lt; ds_list_size(global.clients); i += 1)
  {
   size = receivemessage(client_port(i), 0, 0);
   //If a message was received, break the loop
   if(size &gt; 0) break;
  }
  if(size &lt; 0) break;
  if(size = 0) break;///////////////////////
  packet = readbyte(0);
   switch(packet)
   {
   
    //Check for new chat messages
    case 11:
         mid = readbyte(0);
         if(mid = global.mymid)
            break;
         //Update your own chat
         chatline[0] = chatline[1];
         chatcolor[0] = chatcolor[1];
         chatline[1] = chatline[2];
         chatcolor[1] = chatcolor[2];
         chatline[2] = chatline[3];
         chatcolor[2] = chatcolor[3];
         chatline[3] = chatline[4];
         chatcolor[3] = chatcolor[4];
         chatline[4] = chatline[5];
         chatcolor[4] = chatcolor[5];
         chatline[5] = chatline[6];
         chatcolor[5] = chatcolor[6];
         chatline[6] = chatline[7];
         chatcolor[6] = chatcolor[7];
         chatline[7] = chatline[8];
         chatcolor[7] = chatcolor[8];
         audio_play_sound(snd_chatmessage, 1, 0);
         chatcolor[8] = readshort(0);
         if(chatcolor[8] != c_red)
          chatcolor[8] = c_white;
         chatline[8] = readstring(0);
         //Relay the new message to everyone else
         client_sendall(0, mid);
    break;
    
    //A new player joins
    case 12:
         //Send a notice to your own chat
         chatline[0] = chatline[1];
         chatcolor[0] = chatcolor[1];
         chatline[1] = chatline[2];
         chatcolor[1] = chatcolor[2];
         chatline[2] = chatline[3];
         chatcolor[2] = chatcolor[3];
         chatline[3] = chatline[4];
         chatcolor[3] = chatcolor[4];
         chatline[4] = chatline[5];
         chatcolor[4] = chatcolor[5];
         chatline[5] = chatline[6];
         chatcolor[5] = chatcolor[6];
         chatline[6] = chatline[7];
         chatcolor[6] = chatcolor[7];
         chatline[7] = chatline[8];
         chatcolor[7] = chatcolor[8];
         chatcolor[8] = c_red;
         audio_play_sound(snd_playerjoin, 1, 0);
         mid = readbyte(0);
         newteam = readbyte(0);
         global.othername[mid] = readstring(0);
         global.lolship[mid] = readbyte(0);
         chatline[8] = global.othername[mid]+" has joined the game.";
         //Update the info on the games list
         if(global.gameslist = 1)
         {
          if(ds_list_size(global.clients)+1 = global.maxplayers)
            roomstatus = "Full";
          else
            roomstatus = "Waiting";
          global.createtime = get_servertime();
          sql_modify(global.myipaddress, global.createtime, global.maxplayers, ds_list_size(global.clients)+1, global.matchtype, global.shortlevel, roomstatus);
         }
         //Send a notice to clients' chats
         clearbuffer(0);
         writebyte(11, 0);
         writebyte(0, 0);
         writeshort(chatcolor[8], 0);
         writestring(global.othername[mid]+" has joined the game.", 0);
         client_sendall(0, 0);
    break;

    
    //A player clicks ready
    case 13:
         //Send a notice to your chat
         chatline[0] = chatline[1];
         chatcolor[0] = chatcolor[1];
         chatline[1] = chatline[2];
         chatcolor[1] = chatcolor[2];
         chatline[2] = chatline[3];
         chatcolor[2] = chatcolor[3];
         chatline[3] = chatline[4];
         chatcolor[3] = chatcolor[4];
         chatline[4] = chatline[5];
         chatcolor[4] = chatcolor[5];
         chatline[5] = chatline[6];
         chatcolor[5] = chatcolor[6];
         chatline[6] = chatline[7];
         chatcolor[6] = chatcolor[7];
         chatline[7] = chatline[8];
         chatcolor[7] = chatcolor[8];
         chatcolor[8] = c_red;
         chatline[8] = readstring(0);
         //Update the players' ready status
         thisplayer = readbyte(0);
         global.lolship[thisplayer] = readbyte(0);
         global.playerprimary[thisplayer] = readbyte(0);
         readystat = readbyte(0);
         global.readied[thisplayer] = readystat;
         audio_play_sound(snd_readyup, 1, 0);
         //Send a notice to everyone else
         clearbuffer(0);
         writebyte(11, 0);
         writebyte(0, 0);
         writeshort(chatcolor[8], 0);
         writestring(chatline[8], 0);
         client_sendall(0, 0);
    break;
    
    //A player changes teams
    case 14:
          global.redteam = readbyte(0);
          global.blueteam = readbyte(0);
          lolplayer = readbyte(0);
          global.team[lolplayer] = readbyte(0);
    break;
   
    //A player changes ships
    case 17:
         mid = readbyte(0);
         global.lolship[mid] = readbyte(0);
    break;
    
    //Post-match stat send
    case 18:
        mid = readbyte(0);
        for(i = 0; i &lt; 8; i += 1)
        {
            global.assists[i] += readbyte(0);
            global.damagedealt[i] += readshort(0);
        }
        global.damagetaken[mid] = readshort(0);
        global.walldeaths += readbyte(0);
        global.walldamage += readshort(0);
        client_sendall(0, mid);
    break;

        //A client has quit
    case CLIENT_DROP:
         audio_play_sound(snd_playerleave, 1, 0);
         //Get info from leaving player
         mid = readbyte(0);
         droppedname = readstring(0);
         //Drop the player and add the drop to the count
         client_drop(mid);
         //Update the info on the games list
         if(global.gameslist = 1)
         {
            global.createtime = get_servertime();
            sql_modify(global.myipaddress, global.createtime, global.maxplayers, ds_list_size(global.clients)+1, global.matchtype, global.shortlevel, "Waiting");
         }
         //Send a notice to your chat
         chatline[0] = chatline[1];
         chatcolor[0] = chatcolor[1];
         chatline[1] = chatline[2];
         chatcolor[1] = chatcolor[2];
         chatline[2] = chatline[3];
         chatcolor[2] = chatcolor[3];
         chatline[3] = chatline[4];
         chatcolor[3] = chatcolor[4];
         chatline[4] = chatline[5];
         chatcolor[4] = chatcolor[5];
         chatline[5] = chatline[6];
         chatcolor[5] = chatcolor[6];
         chatline[6] = chatline[7];
         chatcolor[6] = chatcolor[7];
         chatline[7] = chatline[8];
         chatcolor[7] = chatcolor[8];
         chatcolor[8] = c_red;
         chatline[8] = droppedname+" has left the game.";
         //Send a notice to all clients' chats
         clearbuffer(0);
         writebyte(11, 0);
         writebyte(0, 0);
         writeshort(c_red, 0);
         writestring(droppedname+" has left the game.", 0);
         client_sendall(0, 0);
    break;
   }
  }

//Send the constant update
clearbuffer(0);
writebyte(CLIENT_CHECK, 0);
writebyte(ds_list_size(global.clients)+1, 0);
global.playercount = ds_list_size(global.clients)+1;
writebyte(global.maxplayers, 0);
writestring(global.matchtype, 0);
writebyte(global.matchvariable, 0);
writestring(global.matchlevel, 0);
for(i = 0; i &lt;= 7; i += 1)
{
 writebyte(global.activated[i], 0);
 if(global.activated[i] = 1)
 {
  writestring(global.othername[i], 0);
  writebyte(global.team[i], 0);
  writebyte(global.lolship[i], 0);
  writebyte(global.readied[i], 0);
 }
}
writebyte(global.redteam, 0);
writebyte(global.blueteam, 0);
client_sendall(0, 0);

if(room = rm_aftergame) exit;
if(obj_readygo.go = 7) exit;
//Listen for a new player
newclient = tcpaccept(global.listen, true);
//Accept new players if there is room
if(global.maxplayers &gt; ds_list_size(global.clients)+1)
{
 //Abort if no new player
 if(newclient &lt;= 0) exit;
 //Initialize UDP Connection on a new port
 udpsock = udpconnect(14801+client_checkfree(), true);
 //Get the new player's IP for UDP communication
 playerip = lastinIP();
 //Decide a target port for the new player
 playerport = 14811+client_checkfree();
 mid = client_add(newclient, udpsock, playerip, playerport);
 global.activated[mid] = 1;
 global.readied[mid] = 1;
 //Tell them they were accepted, give them their mid and other important info
 clearbuffer(0);
 writebyte(CLIENT_ACCEPT, 0);
 writebyte(mid, 0);
 writebyte(ds_list_size(global.clients)+1, 0);
 writebyte(global.maxplayers, 0);
 //Give them a team
 if(global.redteam &gt; global.blueteam) 
 {
  writebyte(2, 0);
  global.blueteam += 1;
  global.team[mid] = 2;
 }
 else 
 {
  writebyte(1, 0);
  global.redteam += 1;
  global.team[mid] = 1;
 }
 //send it all
 sendmessage(newclient, 0, 0, 0);
}
else
{
 //Reject the new player if there is no room
 clearbuffer(0);
 writebyte(CLIENT_REJECT, 0);
 sendmessage(newclient, 0, 0, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_chat);
draw_set_alpha(background_alpha[1]);
//Stop more input if max is reached
if(string_length(keyboard_string) &gt; 90)
 keyboard_string = string_copy(keyboard_string, 0, 90);
      
//Undo same-letter spams
lastletter = string_copy(keyboard_string, string_length(keyboard_string), 1);
keyboard_string = string_replace(keyboard_string, lastletter+lastletter+lastletter+lastletter, lastletter+lastletter+lastletter);
      
//Undo '#'
keyboard_string = string_replace(keyboard_string, '#', '');
      
//Find the correct text to fit into the bar
for(i = string_length(keyboard_string); i &gt;= 0; i -= 1)
 if(string_width(string_copy(keyboard_string, i, string_length(keyboard_string)-i)) &gt; 350 || i = 0)
 {
  startchat = i;
  stopchat = string_length(keyboard_string)+1-i;
  break;  
 }
//Draw the text in the chat bar
draw_text_transformed(10, 460, string_copy(keyboard_string, startchat, stopchat)+flashing, 1, 1, 0);

//draw chat
q = 0;
for(i = 0; i &lt;= 7-max(q-1, 0); i += 1)
{
 if(string_width(chatline[8-i]) &gt; 370)
  q += 1;
 draw_set_color(chatcolor[8-i]);
 draw_text_ext(2, 440-(i*15+q*10), chatline[8-i], 10, 370);
}
draw_set_color(c_black);
draw_set_font(fnt_digital);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text = keyboard_string;
if(ds_list_size(global.clients) &gt; 0)
{
  if(keyboard_string = '') exit;
  audio_play_sound(snd_chatmessage, 1, 0);
  //create the new chat line and take note of its middle
  sendline = global.name+": "+ keyboard_string;
  middle = floor(string_length(sendline)/2);
  //Break up text if there is no space near the middle
  if(string_replace(string_copy(sendline, middle-4, 8), ' ', '-') = string_copy(sendline, middle-4, 8) &amp;&amp; string_length(sendline) &gt; 30)
   sendline = string_insert(' ', sendline, middle);
    
  //If a rule change is not typed, send what you typed to clients
  chatline[0] = chatline[1];
  chatcolor[0] = chatcolor[1];
  chatline[1] = chatline[2];
  chatcolor[1] = chatcolor[2];
  chatline[2] = chatline[3];
  chatcolor[2] = chatcolor[3];
  chatline[3] = chatline[4];
  chatcolor[3] = chatcolor[4];
  chatline[4] = chatline[5];
  chatcolor[4] = chatcolor[5];
  chatline[5] = chatline[6];
  chatcolor[5] = chatcolor[6];
  chatline[6] = chatline[7];
  chatcolor[6] = chatcolor[7];
  chatline[7] = chatline[8];
  chatcolor[7] = chatcolor[8];
  chatline[8] = sendline;
  chatcolor[8] = c_white;
}

 //Send the message to clients
 clearbuffer(0);
 writebyte(11, 0);
 writebyte(global.mymid, 0);
 writeshort(c_black, 0);
 writestring(chatline[8], 0);
 client_sendall(0, 0);

keyboard_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
