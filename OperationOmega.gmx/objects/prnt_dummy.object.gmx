<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alphastar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prnt_ship</parentName>
  <maskName>spr_shipmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize the first acceleration step check variable
first_acceleration = 0;

//Initialize the player name variable
turning = 0;
speeding = 0;
if(instance_exists(obj_gamestart))
{
    thisname = "";
    mid = obj_gamestart.pass_mid;
    current_primary = obj_gamestart.pass_current_primary;
    current_ship = obj_gamestart.pass_current_ship ;
}
//Perform the parent event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Skip the step event if the player is defeated
if(global.activated[mid] != 1) 
    exit;
armor = 100;
//Perform action based on if the primary is being fired
if(primary_cooldown &lt;= 0)
    //Reduce the overheat multiplier since the primary isn't being fired
    primary_overheat = max(1, primary_overheat-0.003);
else
    //Reduce the cooldown until the next primary shot is possible
    primary_cooldown -= 1;

//Change the angle of the ship
image_angle = facedir;

//Update the movement direction of the ship
var prespeed = speed;                           //Save the speed of the ship
var controlturn = prespeed/7;                   //Set the rate to update the direction of the ship
//Add the direction update rate to the hspeed and vspeed proportionately
hspeed += lengthdir_x(controlturn, facedir);
vspeed += lengthdir_y(controlturn, facedir);
//Reset the speed to scale the hspeed and vspeed changes back down
speed = prespeed;

//Handle hornet warping
if(hornet_warp &gt; -1)
{
    //Perform the warp at the 15th frame
    if(hornet_warp = 30)
    {
        x = warpx;
        y = warpy;
        view_object = id;
    }
    //Return to the normal sprite at the last frame
    if(hornet_warp = 0)
    {
        sprite_index = spr_swiftwing;
        if(global.team[global.mymid] = 2)
            sprite_index = spr_swiftwing_enemy;
    }
    //Count toward the next frame
    hornet_warp -= 1;
} 

//Update burn trail effect positions
for(i = 0; i &lt; flame_smoke_trails; i += 1)
    part_emitter_region(flame_smoke_system, emit[i], x+lengthdir_x(8, direction+effectdir[i]), x+lengthdir_x(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), ps_shape_ellipse, ps_distr_linear);

//Disable movement if hacked
if(ship_status_hacked = true)
{
    turning = 0;        //Set the turning prediction to no turning
    speeding = 2;       //Set the speed prediction to braking
}

//Predict the ship's turning movement
switch(turning)
{
    case 1:    //Turn Clockwise
        facedir -= ship_turning_rate;
        //Stop facedir from going below 0
        if(facedir &lt; 0)
            facedir += 360;    
    break;
    case 2:    //Turn Counter-clockwise
        facedir += ship_turning_rate;
        //Stop facedir from going over 360
        if(facedir &gt; 360)
            facedir -= 360; 
    break;
}

//Predict the speed change of the ship's movement
//Set the lowest speed to the base velocity of the ship
var lowest_speed = velocity_minimum;
//Perform action depending on the received prediction for speed
switch(speeding)
{
    case 0:     //The ship is coasting
        //Reset the first acceleration step check
        first_acceleration = 0;
    break;
    case 1:     //The ship is accelerating
        if(speed &gt; 0)
        {
              //Check to see if this is the first step of the ship accelerating
              if(first_acceleration != 1)
              {
                  //Create a boosting effect
                  boosteffect = instance_create(x+lengthdir_x(8, image_angle-180), y+lengthdir_y(8, image_angle-180), obj_boosteffect)
                  boosteffect.image_angle = image_angle;
                  part_type_scale(obj_partsystem.ship_flame[1],1+speed/20,0.6);
                  part_type_direction(obj_partsystem.ship_flame[1],direction-180,direction-180,0,0);
                  part_particles_create(obj_partsystem.system, x+lengthdir_x(8, facedir-180), y+lengthdir_y(8, facedir-180), obj_partsystem.ship_flame[1], 2);
              }
              speed += 0.2;   //Gradually accelerate
        }
        //Disable the first acceleration step check 
        first_acceleration = 1;
        //Limit the speed to the max velocity of the ship
        if(speed &gt; velocity_maximum)
            speed = velocity_maximum;
    break;
    case 2:     //The ship is braking
        //Gradually reduce the speed to 0
        if(speed &gt; 0)
        {
            speed -= 0.2;
        }      
        //Reset the first acceleration step check
        first_acceleration = 0;
        //Set the lowest speed to 0
        lowest_speed = 0;
    break;
}

//Reduce the ship speed gradually to the lowest speed
if(speed &gt; lowest_speed) 
    speed -= 0.04;      
else 
    speed = lowest_speed;    
    
    
//If this ship's primary firing flag is set to true, fire the primary
if(multiplayer_primary_fire_flag = true)
    event_perform(ev_other, ev_user1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the player's name
draw_set_alpha(0.7);
draw_set_font(fnt_chat);
if(global.team[mid] = 1)
    draw_set_color(c_red);
else
    draw_set_color(c_navy);
draw_text((x-view_xview[0])/obj_mod.screen_scaling_ratio, (y-48-view_yview[0])/obj_mod.screen_scaling_ratio, thisname);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,11</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
