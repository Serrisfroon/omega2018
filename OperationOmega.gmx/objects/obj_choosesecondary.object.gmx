<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fusion_icon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prnt_selection</parentName>
  <maskName>spr_needle_icon</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This slot is not selected
growth = 0;
growing = 0;
selected = 0;
weapontype = 0;
secondnumber = 0;

empty = -1;

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(empty != -1)
    with(empty)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check to see if the energy icon was selected for the hotkey slot
if(changeselect = 51)
{
    with(obj_choosesecondary)
    {
            alarm[1] = 60;
            x = -3000;
            if(empty != -1)
                with(empty)
                    instance_destroy();
    }
    global.secondary_type[4] = 0;
    switch(global.shipselect)
    {
        case 1:
            global.secondary_type[2] = 1;        
        break;
        case 2:
            global.secondary_type[3] = 1;        
        
        break;
        case 3:
            global.secondary_type[1] = 1;                
        break;
    }
    for(i = 1; i &lt;= 4; i++)
    {
        if(global.secondary[i] &gt; 15 &amp;&amp; global.secondary_type[i] = 0)
            global.secondary[i] = 0;
        if(global.secondary[i] &lt;= 15 &amp;&amp; global.secondary_type[i] = 1)
            global.secondary[i] = 0;
    }
    
    create_weaponslots();
    with(obj_customizer.weaponslot[4])
    {
        create_icon(spr_fusion_icon, 4);    
        create_icon(spr_stardust_icon, 4);    
        create_icon(spr_barrier_icon, 4);    
        create_icon(spr_formation_icon, 4);    
        create_icon(spr_beam_icon, 4);                    
        create_icon(spr_sparkline_icon, 4);    
        create_icon(spr_burst_icon, 4);    
        create_icon(spr_slash_icon, 4);    
        create_icon(spr_horizon_icon, 4);    
        create_icon(spr_spiral_icon, 4);                        
        create_icon(spr_laser_icon, 4);    
        create_icon(spr_trail_icon, 4);    
        create_icon(spr_reflection_icon, 4);    
        create_icon(spr_storm_icon, 4);    
        create_icon(spr_trigger_icon, 4);       
        selected = 1; 
    }             
    exit;
}
if(changeselect = 52)
{
    with(obj_choosesecondary)
    {
            alarm[1] = 60;
            x = -3000;
            if(empty != -1)
                with(empty)
                    instance_destroy();
    }
    global.secondary_type[4] = 1;
    switch(global.shipselect)
    {
        case 1:
            global.secondary_type[2] = 0;        
        break;
        case 2:
            global.secondary_type[3] = 0;        
        
        break;
        case 3:
            global.secondary_type[1] = 0;                
        break;
    }
    for(i = 1; i &lt;= 4; i++)
    {
        if(global.secondary[i] &gt; 15 &amp;&amp; global.secondary_type[i] = 0)
            global.secondary[i] = 0;
        if(global.secondary[i] &lt;= 15 &amp;&amp; global.secondary_type[i] = 1)
            global.secondary[i] = 0;
    }
    create_weaponslots();    
    with(obj_customizer.weaponslot[4])
    {
        create_icon(spr_dualmissile_icon, 4);    
        create_icon(spr_solgrenade_icon, 4);    
        create_icon(spr_locustmissile_icon, 4);    
        create_icon(spr_tridentmissile_icon, 4);    
        create_icon(spr_shockmissile_icon, 4);                 
        create_icon(spr_hermitmissile_icon, 4);    
        create_icon(spr_splitmissile_icon, 4);    
        create_icon(spr_strikemissile_icon, 4);    
        create_icon(spr_huntermine_icon, 4);    
        create_icon(spr_phantommine_icon, 4);                        
        create_icon(spr_hackermine_icon, 4);    
        create_icon(spr_clustermine_icon, 4);    
        create_icon(spr_strikemine_icon, 4);    
        create_icon(spr_solus_icon, 4);    
        create_icon(spr_turret_icon, 4);          
        selected = 1;       
    }
    exit;
}

global.secondary[secondnumber] = changeselect;
global.secondary_type[secondnumber] = new_selection_type;
global.secondary_cost[secondnumber] = new_selection_cost;
global.secondary_stock[secondnumber] = new_selection_stock;
global.secondary_object[secondnumber] = new_selection_object;
global.secondary_name[secondnumber] = new_selection_name;
global.secondary_lockon_required[secondnumber] = new_selection_lockon_required;
global.secondary_icon_image[secondnumber] = new_selection_icon_image;


if(empty != -1)
    with(empty)
        instance_destroy();

obj_customizer.checkid = id;
obj_customizer.checkselect = changeselect;
obj_customizer.checktype = weapontype;

with(obj_choosesecondary)
{
    if(id != obj_customizer.checkid &amp;&amp; global.secondary[secondnumber] = obj_customizer.checkselect
    &amp;&amp; weapontype = obj_customizer.checktype)
    {
        newslot = instance_create(x, y, obj_choosesecondary);
        global.secondary[secondnumber] = 0;
        newslot.weapontype = weapontype;
        newslot.secondnumber = secondnumber;
        newslot = obj_customizer.weaponslot[secondnumber];
        alarm[1] = 60;
        x = -3000;
        exit;
    }        
}
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>growing = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> selected = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.secondary[secondnumber] = 0)
    empty = instance_create(x, y, obj_emptyslot);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Handle map display growing
if(growing = 1 &amp;&amp; growth &lt; 1)
 growth += 0.1;
if(growing = 0 &amp;&amp; growth &gt; 0)
 growth -= 0.1;
 
//Make the tranparency follow taht of the background for transition effect
if(instance_exists(obj_customizer))
    image_alpha = obj_customizer.backbox.display_alpha*obj_customizer.weaponslots_alpha;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>growing = 0;
alarm[3] = -1;
image_xscale = 1;
image_yscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed != 0)
    exit;
if(global.sfxtoggle = 0)
    audio_play_sound(snd_overcustom, 1, 0);
alarm[3] = 20;
growing = 2;
prnt_selection.image_xscale = 1;
prnt_selection.image_yscale = 1;
prnt_selection.depth = -1;
depth = -2;
image_xscale = 1.35;
image_yscale = 1.35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//disable function if currently moving on a path
with(prnt_selection)
    if(speed != 0)
        exit;
if(selected = 1 || global.popup_active = true)
    exit;

if(global.sfxtoggle = 0)
    audio_play_sound(snd_clickcustom, 1, 0);
//return icons accordingly
with(obj_icon_option)
{
    action = 1;
    alarm[1] = 1;
}
//Disselect all other slots
with(prnt_selection) selected = 0;
//Select this slot
if(obj_readygo.readied = 0)
{
    if(secondnumber != 4)
    {
        if(weapontype == 0)
        {
            create_icon(spr_fusion_icon, secondnumber);    
            create_icon(spr_stardust_icon, secondnumber);    
            create_icon(spr_barrier_icon, secondnumber);    
            create_icon(spr_formation_icon, secondnumber);    
            create_icon(spr_beam_icon, secondnumber);    
            create_icon(spr_sparkline_icon, secondnumber);    
            create_icon(spr_burst_icon, secondnumber);    
            create_icon(spr_slash_icon, secondnumber);    
            create_icon(spr_horizon_icon, secondnumber);    
            create_icon(spr_spiral_icon, secondnumber);        
            create_icon(spr_laser_icon, secondnumber);    
            create_icon(spr_trail_icon, secondnumber);    
            create_icon(spr_reflection_icon, secondnumber);    
            create_icon(spr_storm_icon, secondnumber);    
            create_icon(spr_trigger_icon, secondnumber);                    
        }
        else
        {
            create_icon(spr_dualmissile_icon, secondnumber);    
            create_icon(spr_solgrenade_icon, secondnumber);    
            create_icon(spr_locustmissile_icon, secondnumber);    
            create_icon(spr_tridentmissile_icon, secondnumber);    
            create_icon(spr_shockmissile_icon, secondnumber);    
            create_icon(spr_hermitmissile_icon, secondnumber);    
            create_icon(spr_splitmissile_icon, secondnumber);    
            create_icon(spr_strikemissile_icon, secondnumber);    
            create_icon(spr_huntermine_icon, secondnumber);    
            create_icon(spr_phantommine_icon, secondnumber);        
            create_icon(spr_hackermine_icon, secondnumber);    
            create_icon(spr_clustermine_icon, secondnumber);    
            create_icon(spr_strikemine_icon, secondnumber);    
            create_icon(spr_solus_icon, secondnumber);    
            create_icon(spr_turret_icon, secondnumber);                                
        }
    }
    else
    {
        create_icon(spr_chooseenergy_icon, 1);    
        create_icon(spr_choosedeploy_icon, 1);        
    }
            
    alarm[2] = 1;
}
else
{
    if(global.mymid = 0)
        send = obj_waiting;
    else
        send = obj_waiting_client;
    with(send)
    {
        //Send a message to your chat
        chat_addline("You cannot configure your ship when ready.", 1, 0, 0);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If this slot is selected, highlight it
if(selected = 1)
 draw_sprite_ext(spr_numbers_selected, 1+weapontype, x, y, 1, 1, 0, c_white, image_alpha);
//Display the correct icon in this slot
var teamcolorimg = global.team[global.mymid]-1;
switch(global.secondary[secondnumber])
{
    case 0:
        if(weapontype = 0)
            draw_sprite_ext(spr_numbers_icon, 1, x, y, 1, 1, 0, c_white, image_alpha);
        else
            draw_sprite_ext(spr_numbers_icon, 2, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 1:
         draw_sprite_ext(spr_fusion_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 2:
         draw_sprite_ext(spr_stardust_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 3:
         draw_sprite_ext(spr_barrier_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 4:
         draw_sprite_ext(spr_formation_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 5:
         draw_sprite_ext(spr_beam_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 6:
         draw_sprite_ext(spr_sparkline_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 7:
         draw_sprite_ext(spr_burst_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 8:
         draw_sprite_ext(spr_slash_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 9:
         draw_sprite_ext(spr_horizon_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 10:
         draw_sprite_ext(spr_spiral_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 11:
         draw_sprite_ext(spr_laser_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 12:
         draw_sprite_ext(spr_trail_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 13:
         draw_sprite_ext(spr_reflection_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 14:
         draw_sprite_ext(spr_storm_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 15:
         draw_sprite_ext(spr_trigger_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 16:
         draw_sprite_ext(spr_dualmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 17:
         draw_sprite_ext(spr_layermissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 18:
         draw_sprite_ext(spr_locustmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 19:
         draw_sprite_ext(spr_tridentmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 20:
         draw_sprite_ext(spr_shockmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 21:
         draw_sprite_ext(spr_hermitmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 22:
         draw_sprite_ext(spr_splitmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 23:
         draw_sprite_ext(spr_strikemissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 24:
         draw_sprite_ext(spr_huntermine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 25:
         draw_sprite_ext(spr_phantommine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 26:
         draw_sprite_ext(spr_hackermine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 27:
         draw_sprite_ext(spr_clustermine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 28:
         draw_sprite_ext(spr_strikemine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 29:
         draw_sprite_ext(spr_solus_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 30:
         draw_sprite_ext(spr_turret_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
    case 31:
         draw_sprite_ext(spr_solgrenade_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
    break;
}

draw_sprite_ext(spr_numbers_icon, 3+weapontype, x, y, 1, 1, 0, c_white, image_alpha);
draw_sprite_ext(spr_numbers_icon, 4+secondnumber, x, y, 1, 1, 0, c_white, image_alpha);
if(growing != 0)
    draw_sprite_ext(spr_icon_select, 1, x, y, 1, 1, 0, c_white, image_alpha);
draw_sprite_ext(spr_weapons_infos, 1+weapontype, x+16, y+16, growth, growth, 0, c_white, 0.6*growth+0.2);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
