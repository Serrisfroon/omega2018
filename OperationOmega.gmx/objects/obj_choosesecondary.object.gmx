<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fusion_icon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prnt_selection</parentName>
  <maskName>spr_needle_icon</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This slot is not selected
growth = 0;
growing = 0;
selected = 0;
weapontype = 0;
weaponnumber = 1;
secondnumber = 0;

empty = -1;

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(empty != -1)
    with(empty)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(changeselect = 31)
{
    global.spacetype = 0;
    with(obj_choosesecondary)
    {
            alarm[1] = 60;
            x = -3000;
            if(empty != -1)
                with(empty)
                    instance_destroy();
    }
    create_weaponslots();
    with(obj_customizer.weaponslot[4])
    {
        create_icon(spr_fusion_icon, 4, -4, 40, 128, 1);    
        create_icon(spr_stardust_icon, 4, -4, 40, 96, 2);    
        create_icon(spr_barrier_icon, 4, -4, 40, 64, 3);    
        create_icon(spr_formation_icon, 4, -4, 40, 32, 5);    
        create_icon(spr_beam_icon, 4, 0, 40, 0, 4);                    
        create_icon(spr_sparkline_icon, 4, -4, 72, 128, 6);    
        create_icon(spr_burst_icon, 4, -4, 72, 96, 7);    
        create_icon(spr_slash_icon, 4, -4, 72, 64, 8);    
        create_icon(spr_horizon_icon, 4, -4, 72, 32, 9);    
        create_icon(spr_spiral_icon, 4, 0, 72, 0, 10);                        
        create_icon(spr_laser_icon, 4, -4, 104, 128, 11);    
        create_icon(spr_trail_icon, 4, -4, 104, 96, 12);    
        create_icon(spr_reflection_icon, 4, -4, 104, 64, 13);    
        create_icon(spr_storm_icon, 4, -4, 104, 32, 14);    
        create_icon(spr_trigger_icon, 4, 0, 104, 0, 15);       
        selected = 1; 
    }             
    exit;
}
if(changeselect = 32)
{
    global.spacetype = 1;
    with(obj_choosesecondary)
    {
            alarm[1] = 60;
            x = -3000;
            if(empty != -1)
                with(empty)
                    instance_destroy();
    }
    create_weaponslots();    
    with(obj_customizer.weaponslot[4])
    {
        create_icon(spr_dualmissile_icon, 4, -4, 40, 128, 1);    
        create_icon(spr_layermissile_icon, 4, -4, 40, 96, 2);    
        create_icon(spr_locustmissile_icon, 4, -4, 40, 64, 4);    
        create_icon(spr_tridentmissile_icon, 4, -4, 40, 32, 7);    
        create_icon(spr_shockmissile_icon, 4, 0, 40, 0, 8);                 
        create_icon(spr_hermitmissile_icon, 4, -4, 72, 128, 10);    
        create_icon(spr_splitmissile_icon, 4, -4, 72, 96, 14);    
        create_icon(spr_strikemissile_icon, 4, -4, 72, 64, 11);    
        create_icon(spr_huntermine_icon, 4, -4, 72, 32, 3);    
        create_icon(spr_phantommine_icon, 4, 0, 72, 0, 5);                        
        create_icon(spr_hackermine_icon, 4, -4, 104, 128, 9);    
        create_icon(spr_clustermine_icon, 4, -4, 104, 96, 15);    
        create_icon(spr_strikemine_icon, 4, -4, 104, 64, 12);    
        create_icon(spr_solus_icon, 4, -4, 104, 32, 6);    
        create_icon(spr_turret_icon, 4, 0, 104, 0, 13);          
        selected = 1;       
    }
    exit;
}
if(weapontype = 0)
    global.esecond[weaponnumber] = changeselect;
else
    global.deploy[weaponnumber] = changeselect;

if(empty != -1)
    with(empty)
        instance_destroy();

obj_customizer.checkid = id;
obj_customizer.checkselect = changeselect;
obj_customizer.checktype = weapontype;

with(obj_choosesecondary)
{
    if(id != obj_customizer.checkid &amp;&amp; 
    ((global.esecond[weaponnumber] = obj_customizer.checkselect &amp;&amp; weapontype = 0) || (global.deploy[weaponnumber] = obj_customizer.checkselect &amp;&amp; weapontype = 1))
    &amp;&amp; weapontype = obj_customizer.checktype)
    {
        newslot = instance_create(x, y, obj_choosesecondary);
        if(weapontype = 0)
            global.esecond[weaponnumber] = 0;
        else
            global.deploy[weaponnumber] = 0;
        newslot.weaponnumber = weaponnumber;
        newslot.weapontype = weapontype;
        newslot.secondnumber = secondnumber;
        newslot = obj_customizer.weaponslot[secondnumber];
        alarm[1] = 60;
        x = -3000;
        exit;
    }        
}
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>growing = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> selected = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(weapontype = 0)
{
    if(global.esecond[weaponnumber] = 0)
        empty = instance_create(x, y, obj_emptyslot);
}
else
{
    if(global.deploy[weaponnumber] = 0)
        empty = instance_create(x, y, obj_emptyslot);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Handle map display growing
if(growing = 1 &amp;&amp; growth &lt; 1)
 growth += 0.1;
if(growing = 0 &amp;&amp; growth &gt; 0)
 growth -= 0.1;
 
//Make the tranparency follow taht of the background for transition effect
if(instance_exists(obj_customizer))
    image_alpha = obj_customizer.backbox.display_alpha*obj_customizer.weaponslots_alpha;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>growing = 0;
alarm[3] = -1;
image_xscale = 1;
image_yscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed != 0)
    exit;
if(global.sfxtoggle = 0)
    audio_play_sound(snd_overcustom, 1, 0);
alarm[3] = 20;
growing = 2;
prnt_selection.image_xscale = 1;
prnt_selection.image_yscale = 1;
prnt_selection.depth = -1;
depth = -2;
image_xscale = 1.35;
image_yscale = 1.35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//disable function if currently moving on a path
with(prnt_selection)
    if(speed != 0)
        exit;
if(selected = 1 || global.creatinggame = 1)
    exit;

if(global.sfxtoggle = 0)
    audio_play_sound(snd_clickcustom, 1, 0);
//return icons accordingly
with(obj_icon_option)
{
    action = 1;
    alarm[1] = 1;
}
//Disselect all other slots
with(prnt_selection) selected = 0;
//Select this slot
if(obj_readygo.readied = 0)
{
    if(secondnumber != 4)
    {
        if(weapontype == 0)
        {
            switch(secondnumber)
            {
                case 1:
                    create_icon(spr_fusion_icon, 4, 0, 40, 0, 1);    
                    create_icon(spr_stardust_icon, 4, 4, 40, 32, 2);    
                    create_icon(spr_barrier_icon, 4, 4, 40, 64, 3);    
                    create_icon(spr_formation_icon, 4, 4, 40, 96, 5);    
                    create_icon(spr_beam_icon, 4, 4, 40, 128, 4);    
                    create_icon(spr_sparkline_icon, 4, 0, 72, 0, 6);    
                    create_icon(spr_burst_icon, 4, 4, 72, 32, 7);    
                    create_icon(spr_slash_icon, 4, 4, 72, 64, 8);    
                    create_icon(spr_horizon_icon, 4, 4, 72, 96, 9);    
                    create_icon(spr_spiral_icon, 4, 4, 72, 128, 10);        
                    create_icon(spr_laser_icon, 4, 0, 104, 0, 11);    
                    create_icon(spr_trail_icon, 4, 4, 104, 32, 12);    
                    create_icon(spr_reflection_icon, 4, 4, 104, 64, 13);    
                    create_icon(spr_storm_icon, 4, 4, 104, 96, 14);    
                    create_icon(spr_trigger_icon, 4, 4, 104, 128, 15);                    
                break;
                case 2:
                    create_icon(spr_fusion_icon, 4, -4, 40, 32, 1);    
                    create_icon(spr_stardust_icon, 4, 0, 40, 0, 2);    
                    create_icon(spr_barrier_icon, 4, 4, 40, 32, 3);    
                    create_icon(spr_formation_icon, 4, 4, 40, 64, 5);    
                    create_icon(spr_beam_icon, 4, 4, 40, 96, 4);    
                    create_icon(spr_sparkline_icon, 4, -4, 72, 32, 6);    
                    create_icon(spr_burst_icon, 4, 0, 72, 0, 7);    
                    create_icon(spr_slash_icon, 4, 4, 72, 32, 8);    
                    create_icon(spr_horizon_icon, 4, 4, 72, 64, 9);    
                    create_icon(spr_spiral_icon, 4, 4, 72, 96, 10);        
                    create_icon(spr_laser_icon, 4, -4, 104, 32, 11);    
                    create_icon(spr_trail_icon, 4, 0, 104, 0, 12);    
                    create_icon(spr_reflection_icon, 4, 4, 104, 32, 13);    
                    create_icon(spr_storm_icon, 4, 4, 104, 64, 14);    
                    create_icon(spr_trigger_icon, 4, 4, 104, 96, 15);                    
                break;
                case 3:
                    create_icon(spr_fusion_icon, 4, -4, 40, 64, 1);    
                    create_icon(spr_stardust_icon, 4, -4, 40, 32, 2);    
                    create_icon(spr_barrier_icon, 4, 0, 40, 0, 3);    
                    create_icon(spr_formation_icon, 4, 4, 40, 32, 5);    
                    create_icon(spr_beam_icon, 4, 4, 40, 64, 4);    
                    create_icon(spr_sparkline_icon, 4, -4, 72, 64, 6);    
                    create_icon(spr_burst_icon, 4, -4, 72, 32, 7);    
                    create_icon(spr_slash_icon, 4, 0, 72, 0, 8);    
                    create_icon(spr_horizon_icon, 4, 4, 72, 32, 9);    
                    create_icon(spr_spiral_icon, 4, 4, 72, 64, 10);        
                    create_icon(spr_laser_icon, 4, -4, 104, 64, 11);    
                    create_icon(spr_trail_icon, 4, -4, 104, 32, 12);    
                    create_icon(spr_reflection_icon, 4, 0, 104, 0, 13);    
                    create_icon(spr_storm_icon, 4, 4, 104, 32, 14);    
                    create_icon(spr_trigger_icon, 4, 4, 104, 64, 15);                    
                break;
                case 4:
                    create_icon(spr_fusion_icon, 4, -4, 40, 128, 1);    
                    create_icon(spr_stardust_icon, 4, -4, 40, 96, 2);    
                    create_icon(spr_barrier_icon, 4, -4, 40, 64, 4);    
                    create_icon(spr_formation_icon, 4, -4, 40, 32, 7);    
                    create_icon(spr_beam_icon, 4, 0, 40, 0, 8);                    
                    create_icon(spr_sparkline_icon, 4, -4, 72, 128, 10);    
                    create_icon(spr_burst_icon, 4, -4, 72, 96, 14);    
                    create_icon(spr_slash_icon, 4, -4, 72, 64, 11);    
                    create_icon(spr_horizon_icon, 4, -4, 72, 32, 3);    
                    create_icon(spr_spiral_icon, 4, 0, 72, 0, 5);                        
                    create_icon(spr_laser_icon, 4, -4, 104, 128, 9);    
                    create_icon(spr_trail_icon, 4, -4, 104, 96, 15);    
                    create_icon(spr_reflection_icon, 4, -4, 104, 64, 12);    
                    create_icon(spr_storm_icon, 4, -4, 104, 32, 6);    
                    create_icon(spr_trigger_icon, 4, 0, 104, 0, 13);                 
                break;
            }
        }
        else
        {
            switch(secondnumber)
            {
                case 1:
                    create_icon(spr_dualmissile_icon, 4, 0, 40, 0, 1);    
                    create_icon(spr_layermissile_icon, 4, 4, 40, 32, 2);    
                    create_icon(spr_locustmissile_icon, 4, 4, 40, 64, 3);    
                    create_icon(spr_tridentmissile_icon, 4, 4, 40, 96, 5);    
                    create_icon(spr_shockmissile_icon, 4, 4, 40, 128, 4);    
                    create_icon(spr_hermitmissile_icon, 4, 0, 72, 0, 6);    
                    create_icon(spr_splitmissile_icon, 4, 4, 72, 32, 7);    
                    create_icon(spr_strikemissile_icon, 4, 4, 72, 64, 8);    
                    create_icon(spr_huntermine_icon, 4, 4, 72, 96, 9);    
                    create_icon(spr_phantommine_icon, 4, 4, 72, 128, 10);        
                    create_icon(spr_hackermine_icon, 4, 0, 104, 0, 11);    
                    create_icon(spr_clustermine_icon, 4, 4, 104, 32, 12);    
                    create_icon(spr_strikemine_icon, 4, 4, 104, 64, 13);    
                    create_icon(spr_solus_icon, 4, 4, 104, 96, 14);    
                    create_icon(spr_turret_icon, 4, 4, 104, 128, 15);                                
                break;
                case 2:
                    create_icon(spr_dualmissile_icon, 4, -4, 40, 64, 1);    
                    create_icon(spr_layermissile_icon, 4, -4, 40, 32, 2);    
                    create_icon(spr_locustmissile_icon, 4, 0, 40, 0, 4);    
                    create_icon(spr_tridentmissile_icon, 4, 4, 40, 32, 7);    
                    create_icon(spr_shockmissile_icon, 4, 4, 40, 64, 8);                
                    create_icon(spr_hermitmissile_icon, 4, -4, 72, 64, 10);    
                    create_icon(spr_splitmissile_icon, 4, -4, 72, 32, 14);    
                    create_icon(spr_strikemissile_icon, 4, 0, 72, 0, 11);    
                    create_icon(spr_huntermine_icon, 4, 4, 72, 32, 3);    
                    create_icon(spr_phantommine_icon, 4, 4, 72, 64, 5);                    
                    create_icon(spr_hackermine_icon, 4, -4, 104, 64, 9);    
                    create_icon(spr_clustermine_icon, 4, -4, 104, 32, 15);    
                    create_icon(spr_strikemine_icon, 4, 0, 104, 0, 12);    
                    create_icon(spr_solus_icon, 4, 4, 104, 32, 6);    
                    create_icon(spr_turret_icon, 4, 4, 104, 64, 13);                 
                break;
                case 3:
                    create_icon(spr_dualmissile_icon, 4, -4, 40, 96, 1);    
                    create_icon(spr_layermissile_icon, 4, -4, 40, 64, 2);    
                    create_icon(spr_locustmissile_icon, 4, -4, 40, 32, 4);    
                    create_icon(spr_tridentmissile_icon, 4, 0, 40, 0, 7);    
                    create_icon(spr_shockmissile_icon, 4, 4, 40, 32, 8);                    
                    create_icon(spr_hermitmissile_icon, 4, -4, 72, 96, 10);    
                    create_icon(spr_splitmissile_icon, 4, -4, 72, 64, 14);    
                    create_icon(spr_strikemissile_icon, 4, -4, 72, 32, 11);    
                    create_icon(spr_huntermine_icon, 4, 0, 72, 0, 3);    
                    create_icon(spr_phantommine_icon, 4, 4, 72, 32, 5);                        
                    create_icon(spr_hackermine_icon, 4, -4, 104, 96, 9);    
                    create_icon(spr_clustermine_icon, 4, -4, 104, 64, 15);    
                    create_icon(spr_strikemine_icon, 4, -4, 104, 32, 12);    
                    create_icon(spr_solus_icon, 4, 0, 104, 0, 6);    
                    create_icon(spr_turret_icon, 4, 4, 104, 32, 13);                 
                break;
                case 4:
                    create_icon(spr_dualmissile_icon, 4, -4, 40, 128, 1);    
                    create_icon(spr_layermissile_icon, 4, -4, 40, 96, 2);    
                    create_icon(spr_locustmissile_icon, 4, -4, 40, 64, 4);    
                    create_icon(spr_tridentmissile_icon, 4, -4, 40, 32, 7);    
                    create_icon(spr_shockmissile_icon, 4, 0, 40, 0, 8);                 
                    create_icon(spr_hermitmissile_icon, 4, -4, 72, 128, 10);    
                    create_icon(spr_splitmissile_icon, 4, -4, 72, 96, 14);    
                    create_icon(spr_strikemissile_icon, 4, -4, 72, 64, 11);    
                    create_icon(spr_huntermine_icon, 4, -4, 72, 32, 3);    
                    create_icon(spr_phantommine_icon, 4, 0, 72, 0, 5);                        
                    create_icon(spr_hackermine_icon, 4, -4, 104, 128, 9);    
                    create_icon(spr_clustermine_icon, 4, -4, 104, 96, 15);    
                    create_icon(spr_strikemine_icon, 4, -4, 104, 64, 12);    
                    create_icon(spr_solus_icon, 4, -4, 104, 32, 6);    
                    create_icon(spr_turret_icon, 4, 0, 104, 0, 13);                 
                break;
            }
        }
    }
    else
    {
        create_icon(spr_chooseenergy_icon, 4, 0, 40, 0, 31);    
        create_icon(spr_choosedeploy_icon, 4, 0, 72, 0, 32);        
    }
            
    alarm[2] = 1;
}
else
{
    if(global.mymid = 0)
        send = obj_waiting;
    else
        send = obj_waiting_client;
    with(send)
    {
        //Send a message to your chat
        chatline[0] = chatline[1];
        chatcolor[0] = chatcolor[1];
        chatline[1] = chatline[2];
        chatcolor[1] = chatcolor[2];
        chatline[2] = chatline[3];
        chatcolor[2] = chatcolor[3];
        chatline[3] = chatline[4];
        chatcolor[3] = chatcolor[4];
        chatline[4] = chatline[5];
        chatcolor[4] = chatcolor[5];
        chatline[5] = chatline[6];
        chatcolor[5] = chatcolor[6];
        chatline[6] = chatline[7];
        chatcolor[6] = chatcolor[7];
        chatline[7] = chatline[8];
        chatcolor[7] = chatcolor[8];
        chatcolor[8] = c_red;
        chatline[8] = "You cannot configure your ship when ready.";
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If this slot is selected, highlight it
if(selected = 1)
 draw_sprite_ext(spr_numbers_selected, 1+weapontype, x, y, 1, 1, 0, c_white, image_alpha);
//Display the correct icon in this slot
var teamcolorimg = global.team[global.mymid]-1;
if(weapontype = 0)
{
    switch(global.esecond[weaponnumber])
    {
        case 0:
             draw_sprite_ext(spr_numbers_icon, 1, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 1:
             draw_sprite_ext(spr_fusion_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 2:
             draw_sprite_ext(spr_stardust_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 3:
             draw_sprite_ext(spr_barrier_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 4:
             draw_sprite_ext(spr_beam_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 5:
             draw_sprite_ext(spr_formation_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 6:
             draw_sprite_ext(spr_sparkline_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 7:
             draw_sprite_ext(spr_burst_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 8:
             draw_sprite_ext(spr_slash_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 9:
             draw_sprite_ext(spr_horizon_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 10:
             draw_sprite_ext(spr_spiral_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 11:
             draw_sprite_ext(spr_laser_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 12:
             draw_sprite_ext(spr_trail_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 13:
             draw_sprite_ext(spr_reflection_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 14:
             draw_sprite_ext(spr_storm_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 15:
             draw_sprite_ext(spr_trigger_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
    }
}
else
{
    switch(global.deploy[weaponnumber])
    {
        case 0:
             draw_sprite_ext(spr_numbers_icon, 2, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 1:
             draw_sprite_ext(spr_dualmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 2:
             draw_sprite_ext(spr_layermissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 3:
             draw_sprite_ext(spr_huntermine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 4:
             draw_sprite_ext(spr_locustmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 5:
             draw_sprite_ext(spr_phantommine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 6:
             draw_sprite_ext(spr_solus_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 7:
             draw_sprite_ext(spr_tridentmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 8:
             draw_sprite_ext(spr_shockmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 9:
             draw_sprite_ext(spr_hackermine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 10:
             draw_sprite_ext(spr_hermitmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 11:
             draw_sprite_ext(spr_strikemissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 12:
             draw_sprite_ext(spr_strikemine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 13:
             draw_sprite_ext(spr_turret_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 14:
             draw_sprite_ext(spr_splitmissile_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
        case 15:
             draw_sprite_ext(spr_clustermine_icon, teamcolorimg, x, y, 1, 1, 0, c_white, image_alpha);
        break;
    }
}
draw_sprite_ext(spr_numbers_icon, 3+weapontype, x, y, 1, 1, 0, c_white, image_alpha);
draw_sprite_ext(spr_numbers_icon, 4+secondnumber, x, y, 1, 1, 0, c_white, image_alpha);
if(growing != 0)
    draw_sprite_ext(spr_icon_select, 1, x, y, 1, 1, 0, c_white, image_alpha);
draw_sprite_ext(spr_weapons_infos, 1+weapontype, x+16, y+16, growth, growth, 0, c_white, 0.6*growth+0.2);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
