<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_seeker_charge</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prnt_enemyenergy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the auto-destroy time
alarm[0] = 240;
alarm[2] = 9;
speed = 10;

create_particles = false;
is_leading = false;
enable_tracking = true;
leader = -1;
        
//Set attack variable values
attack_damage = 15;          //Set the damage for the attack
attack_burst = 0;           //Set the bonus damage of the attack that ignores shield
attack_threshold = 0;       //Set the threshold reduction per hit
attack_shake = 2;           //Set the screen shake intensity of the attack
attack_name = "Seeker";     //Set the name of the attack
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(is_leading = false)
    leader.follower[order] = -1;
else
{
    for(i = 1; i &lt;= 2; i++)
        if(follower[i] != -1)
        {
            follower[i].is_leading = true;
            follower[i].leader = follower[i];
            follower[i].follower[1] = -1;
            follower[i].follower[2] = -1;
                for(ii = 1; ii+i &lt;= 2; ii++)
                {
                    follower[i].follower[i+ii] = follower[i+ii];
                    follower[i+ii].leader = follower[i];
                }
            break;
        }    
}

var expand_distance = (image_index-team_index)*13;
var particle = obj_partsystem.needle_charge_burst[global.team[mid]-1];
part_type_direction(particle,0,359,0,0);
part_type_speed(particle,1,4,0,0);
var part_x = x+lengthdir_x(expand_distance, image_angle);
var part_y = y+lengthdir_y(expand_distance, image_angle);
part_particles_create(obj_partsystem.system, part_x, part_y, obj_partsystem.circle_light, 2);
part_particles_create(obj_partsystem.system, part_x, part_y, particle, 5);

part_type_direction(obj_partsystem.seeker_flare[global.team[mid]-1],image_angle+80,image_angle+100,0,0);
var emit = part_emitter_create(obj_partsystem.system);
var add_x = lengthdir_x(48, image_angle);
var add_y = lengthdir_y(48, image_angle);

part_emitter_region(obj_partsystem.system, emit, part_x+add_x, part_x-add_x, part_y+add_y, part_y-add_y, ps_shape_line, ps_distr_linear);
part_emitter_burst(obj_partsystem.system, emit, obj_partsystem.seeker_flare[global.team[mid]-1], 25);
part_emitter_destroy(obj_partsystem.system, emit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Rotate the bullet around the center point
image_angle += 5;

//Perform action for the leading bullet
if(is_leading = true)
{
    //Only perform the action if tracking is enabled
    if(enable_tracking = true)
    {
        //Calculate the nearest enemy and the distance to it
        var target = instance_nearest(x, y, obj_dummy_ally);
        if(target = noone)
          target = global.playership[global.mymid];      
        else
            if(point_distance(x, y, target.x, target.y) &gt; point_distance(x, y, global.playership[global.mymid].x, global.playership[global.mymid].y))
                target = global.playership[global.mymid];
        var target_distance = point_distance(x, y, target.x, target.y);
        //Check if the nearest enemy is closeby
        if(target_distance &lt; 350)
        {
            //Calculate the direction to the nearest enemy is rotate the bullet's direction toward it
            var target_direction = point_direction(x, y, target.x, target.y);
            step_towards_direction(target_direction, 4);
        }
        //Check if the enemy is inside the bullet wheel
        if(target_distance &lt; 30)
        {
            //Disable tracking for the leader and followers
            enable_tracking = false;
            for(i = 1; i &lt;= 2; i++)
                if(follower[i] != -1)
                {
                    follower[i].enable_tracking = false;
                }
        }
    }
}
//Perform action for the following bullets
else
{
    //Mirror the leader's x, y, and direction values
    x = leader.x;
    y = leader.y;
    direction = leader.direction;
}

//Destroy the bullet if it leaves the room
if(x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height)
{
    if(is_leading = true)
        for(i = 1; i &lt; 3; i++)
            with(follower[i])
                instance_destroy();
    instance_destroy();
    exit;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,8</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
