<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tridentmissile</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prnt_enemydeploy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set time until homing
alarm[0] = 20;
//Initialize stage variable
go = 0;
image_blend = global.enemycolor;
alarm[4] = 1;
emitter1 = part_emitter_create(obj_partsystem.system);
amplified = 0;

//Set attack variable values
attack_damage = 4;                      //Set the damage for the attack
attack_burst = 4;                       //Set the bonus damage of the attack that ignores shield
attack_threshold = 0;                   //Set the threshold reduction per hit
attack_shake = 4;                       //Set the screen shake intensity of the attack
attack_name = "Trident Missile";        //Set the name of the attack
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_explode2, x, y);
create_explosion(1);
if(trio &gt; 1)
{
    part_emitter_destroy(obj_partsystem.system, emitter1);
    part_type_destroy(particle1);
}
else
{
 second.visible = 1;
 third.visible = 1;
}
obj_mod.createcheck = id;
with(obj_homingeffect)
    if(create = obj_mod.createcheck)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = startdir;
visible = 1;
if(trio != 1)
    attack_burst = 4;
else
    attack_burst = 14;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Move to the next stage to move only in our current direction
go = 2;
visible = 1;
obj_mod.createcheck = id;
with(obj_homingeffect)
    if(create = obj_mod.createcheck)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = 0;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Move to the next stage to home in on the target
go = 1;
//Give the missile its correct startin direction and speed
direction = startdir;
speed = 14;
//Set time until homing wears off
alarm[2] = 80;
//Set time until auto destruct
alarm[1] = 120;
cursor = instance_create(0, 0, obj_homingeffect);
cursor.target = target;    
cursor.create = id;
switch(trio)
{
 case 1:
    sfx_play(snd_missile, x, y);
 break;
 case 2:
      visible = 0;
      particle1 = part_type_create();
      part_type_sprite(particle1,spr_smoke_part, 0, 0, 0);
      part_type_size(particle1,0.20,0.25,0.00,0);
      part_type_scale(particle1,1,1);
      part_type_color1(particle1,8421504);
      part_type_alpha2(particle1,1,0);
      part_type_speed(particle1,0,0,1,0);
      part_type_direction(particle1,direction+90,direction+90,0,0);
      part_type_gravity(particle1,0,270);
      part_type_orientation(particle1,0,0,0,0,1);
      part_type_blend(particle1,0);
      part_type_life(particle1,10,10);
      part_emitter_region(obj_partsystem.system,emitter1,x-8,x+8,y-8,y+8,1,1);
      part_emitter_stream(obj_partsystem.system,emitter1,particle1,5);
 break;
 case 3:
      visible = 0;
      particle1 = part_type_create();
      part_type_sprite(particle1,spr_smoke_part, 0, 0, 0);
      part_type_size(particle1,0.20,0.25,0.00,0);
      part_type_scale(particle1,1,1);
      part_type_color1(particle1,8421504);
      part_type_alpha2(particle1,1,0);
      part_type_speed(particle1,0,0,1,0);
      part_type_direction(particle1,direction-90,direction-90,0,0);
      part_type_gravity(particle1,0,270);
      part_type_orientation(particle1,0,0,0,0,1);
      part_type_blend(particle1,0);
      part_type_life(particle1,10,10);
      part_emitter_region(obj_partsystem.system,emitter1,x-8,x+8,y-8,y+8,1,1);
      part_emitter_stream(obj_partsystem.system,emitter1,particle1,5);
 break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Perform action according to stage
switch(go)
{
 case 0:
     //Slow the missile down to a stop if it hasnt started homing yet
     if(speed &gt; 0)
       speed -= 0.2;
 break;
 case 1:
      //If the target still exists, take note of the direction to it
      if(instance_exists(target))
      {
       point = point_direction(x, y, target.x, target.y);
       //Move the missile's current direction towards the target
       switch(trio)
       {
        case 1:
             if(instance_exists(second) &amp;&amp; instance_exists(third))
              step_towards_direction(point, 3.5);
             else
              if(amplified = 1)
               step_towards_direction(point, 10);                           
        break;
        case 2:
             if(instance_exists(middle))
             {
              direction = middle.direction;
              x = middle.x+lengthdir_x(42, middle.direction-90)+lengthdir_x(42, middle.direction-180);
              y = middle.y+lengthdir_y(42, middle.direction-90)+lengthdir_y(42, middle.direction-180);
             }
             else
             {
              step_towards_direction(point, 10);             
             }
        break;
        case 3:
             if(instance_exists(middle))
             {
              direction = middle.direction;
              x = middle.x+lengthdir_x(42, middle.direction+90)+lengthdir_x(42, middle.direction-180);
              y = middle.y+lengthdir_y(42, middle.direction+90)+lengthdir_y(42, middle.direction-180);
             }
             else
             {
              step_towards_direction(point, 10);             
             }
        break;
      }
     }
 case 2:
      switch(trio)
      {
       case 1:
            effect_create_below(ef_smoke, x, y, 0, c_gray);
       break;
       case 2:
            part_type_direction(particle1,direction+90,direction+90,0,0);
            part_emitter_region(obj_partsystem.system,emitter1,x-8,x+8,y-8,y+8,1,1);
       break;
       case 3:
            part_type_direction(particle1,direction-90,direction-90,0,0);
            part_emitter_region(obj_partsystem.system,emitter1,x-8,x+8,y-8,y+8,1,1);
       break;
      }
      image_angle = direction;
 break;
}
if(x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height)
{
 instance_destroy();
 exit;
}
if(obj_bulletcontrol.wallposition[floor(x/32), floor(y/32)] = true)
 instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(trio &gt; 1)
 part_emitter_destroy(obj_partsystem.system, emitter1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, 0, x, y, 1, 1, image_angle, c_white, 1);
draw_sprite_ext(sprite_index, 1, x, y, 1, 1, image_angle, global.enemycolor, 1);

if(go != 1 || trio != 1)
 exit;
if(instance_exists(second))
{
 var addxdist1, addydist1;
 addxdist1 = lengthdir_x(42, direction-90)+lengthdir_x(42, direction-180);
 addydist1 = lengthdir_y(42, direction-90)+lengthdir_y(42, direction-180);
 draw_sprite_ext(sprite_index, 0, x+addxdist1, y+addydist1, 1, 1, image_angle, c_white, 1);
 draw_sprite_ext(sprite_index, 1, x+addxdist1, y+addydist1, 1, 1, image_angle, global.enemycolor, 1);
}
if(instance_exists(third))
{
 var addxdist2, addydist2;
 addxdist2 = lengthdir_x(42, direction+90)+lengthdir_x(42, direction-180);
 addydist2 = lengthdir_y(42, direction+90)+lengthdir_y(42, direction-180);
 draw_sprite_ext(sprite_index, 0, x+addydist2, y+addydist2, 1, 1, image_angle, c_white, 1);
 draw_sprite_ext(sprite_index, 1, x+addydist2, y+addydist2, 1, 1, image_angle, global.enemycolor, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,3</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
