<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_profileslot;
//If the profile box was not in the last room, make it start in 
//this room invisible
if(global.remainprofile = 0)
 image_alpha = 0;
//Calculate the player's rating
rating = global.playerkills*10+global.playermatchwin*25-global.playerdeaths*3-global.playermatchloss*10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If the profile box was not in the last room, make it follow the background's
//alpha. This will also fade out the profile when selecting an option
if(global.remainprofile = 0)
 image_alpha = background_alpha[1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the font and color
draw_set_font(fnt_digital);
draw_set_color(c_black);

draw_set_alpha(image_alpha);

//Draw the profile box
if(global.remainprofile = 0)
 draw_sprite_ext(sprite_index, 0, x, y, 1, 1, 0, c_white, background_alpha[1]);
else
 draw_sprite_ext(sprite_index, 0, x, y, 1, 1, 0, c_white, 1);

//Check if there is a profile
if(global.createprofile = 0)
{
 draw_text(x+16, y+16, 'You must create a profile#before playing online.');
 exit;
}


//Draw your name
draw_text(x+16, y+4, global.myname);
draw_text(x+16, y+22, "Rating: "+string(rating));
draw_text(x+16, y+74, "Wins: "+string(global.playermatchwin)+"     Losses: "+string(global.playermatchloss));
draw_text(x+16, y+92, "Kills: "+string(global.playerkills)+"     Deaths: "+string(global.playerdeaths));

//Draw the selected ship and find the starting x for drawing deploys
switch(global.shipselect)
{
 //Alphastar
 case 1:
      draw_sprite_ext(spr_alphastar, 0, x+272, y+24, 1, 1, 90, c_white, image_alpha);
      deployx = 112;
      deployno = 1;
 break;
 //Swiftwing
 case 2:
      draw_sprite_ext(spr_swiftwing, 0, x+272, y+24, 1, 1, 90, c_white, image_alpha);
      deployx = 134;
      deployno = 2;
 break;
 //Goliath
 case 3:
      draw_sprite_ext(spr_goliath, 0, x+272, y+24, 1, 1, 90, c_white, image_alpha);
      deployx = 80;
      deployno = 0;
 break;
}

//Draw selected Primary
switch(global.primary)
{
 case 0:
      draw_sprite_ext(spr_numbers_icon, 4, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 1:
      draw_sprite_ext(spr_needle_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 2:
      draw_sprite_ext(spr_sonic_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 3:
      draw_sprite_ext(spr_wave_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 4:
      draw_sprite_ext(spr_flank_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 5:
      draw_sprite_ext(spr_stasis_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 6:
      draw_sprite_ext(spr_crossfire_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 7:
      draw_sprite_ext(spr_siphon_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 8:
      draw_sprite_ext(spr_double_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 9:
      draw_sprite_ext(spr_pierce_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
 case 10:
      draw_sprite_ext(spr_spread_icon, 0, x+16, y+48, 1, 1, 0, c_white, image_alpha);
 break;
}

//Loop to draw energy secondary icons
for(i = 1; i &lt;= 3; i += 1)
{
 //Do not draw a third energy icon for Alphastar
 if(global.shipselect = 1 &amp;&amp; i = 3) break;
 //Do not draw a second or third energy icon for Goliath
 if(global.shipselect = 3 &amp;&amp; i &gt; 1) break;
 switch(global.esecond[i])
 {
  case 1:
       draw_sprite_ext(spr_fusion_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 2:
       draw_sprite_ext(spr_stardust_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 3:
       draw_sprite_ext(spr_barrier_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 4:
       draw_sprite_ext(spr_beam_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 5:
       draw_sprite_ext(spr_formation_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 6:
       draw_sprite_ext(spr_sparkline_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 7:
       draw_sprite_ext(spr_burst_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 8:
       draw_sprite_ext(spr_slash_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 9:
       draw_sprite_ext(spr_horizon_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 10:
       draw_sprite_ext(spr_spiral_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 11:
       draw_sprite_ext(spr_laser_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 12:
       draw_sprite_ext(spr_trail_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 13:
       draw_sprite_ext(spr_reflection_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 14:
       draw_sprite_ext(spr_storm_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 15:
       draw_sprite_ext(spr_trigger_icon, 0, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
 }
 draw_sprite_ext(spr_numbers_icon, i-1, x+32+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
}

//Loop to draw deploy icons
for(i = 1; i &lt;= 3; i += 1)
{
 //Do not draw a third deploy icon for Alphastar
 if(global.shipselect = 1 &amp;&amp; i = 3) break;
 //Do not draw a second or third deploy icon for Swiftwing
 if(global.shipselect = 2 &amp;&amp; i &gt; 1) break;
 
 switch(global.deploy[i])
 {
  case 1:
       draw_sprite_ext(spr_dualmissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 2:
       draw_sprite_ext(spr_layermissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 3:
       draw_sprite_ext(spr_huntermine_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 4:
       draw_sprite_ext(spr_locustmissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 5:
       draw_sprite_ext(spr_phantommine_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 6:
       draw_sprite_ext(spr_solus_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 7:
       draw_sprite_ext(spr_tridentmissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 8:
       draw_sprite_ext(spr_shockmissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 9:
       draw_sprite_ext(spr_hackermine_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 10:
       draw_sprite_ext(spr_hermitmissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 11:
       draw_sprite_ext(spr_strikemissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 12:
       draw_sprite_ext(spr_strikemine_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 13:
       draw_sprite_ext(spr_turret_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 14:
       draw_sprite_ext(spr_splitmissile_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
  case 15:
       draw_sprite_ext(spr_clustermine_icon, 0, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
  break;
 }
 draw_sprite_ext(spr_numbers_icon, deployno+i, x+deployx+(i*32), y+48, 1, 1, 0, c_white, image_alpha);
}
 if(global.spacehot != 0)
       switch(global.spacehot)
       {
        case 1:
             draw_sprite_ext(spr_numbers_icon, 5, x+64, y+48, 1, 1, 0, c_white, image_alpha);
        break;
        case 2:
             draw_sprite_ext(spr_numbers_icon, 5, x+96, y+48, 1, 1, 0, c_white, image_alpha);
        break;
        case 3:
             draw_sprite_ext(spr_numbers_icon, 5, x+128, y+48, 1, 1, 0, c_white, image_alpha);
        break;      
        case 4:
             draw_sprite_ext(spr_numbers_icon, 5, x+deployx+32, y+48, 1, 1, 0, c_white, image_alpha);
        break;      
        case 5:
             draw_sprite_ext(spr_numbers_icon, 5, x+deployx+64, y+48, 1, 1, 0, c_white, image_alpha);
        break;
        case 6:
             draw_sprite_ext(spr_numbers_icon, 5, x+176, y+48, 1, 1, 0, c_white, image_alpha);
        break;
       }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
