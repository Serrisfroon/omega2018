<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alphastar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prnt_ally</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Start following this object
view_object = id;

//Initialize primary variables
aiming_direction = 0;       //Holds the angle to fire at
primary_cooldown = 0;       //Hold the time(in frames) until the next primary shot
primary_overheat = 1;       //Holds the cooldown multiplier to modify the cooldown to a lower value

//Initialize unique primary variables
//primary_name                  Holds the name of the primary to be passed to the bullet_create() function
//primary_overheat_scaling      Holds the value to scale the overheat multiplier by each shot
//primary_cooldown_base         Holds the base cooldown time(in frames) between shots
switch(global.primary)
{
    case 1:
        primary_name = "Needle";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 7;
    break;
    case 2:
        primary_name = "Sonic";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 4;
    break;
    case 3:
        primary_name = "Wave";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 15;
    break;
    case 4:
        primary_name = "Seeker";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 10;
    break;
    case 5:
        primary_name = "Statis";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 25;
    break;
    case 6:
        primary_name = "Helix";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 9;
    break;
    case 7:
        primary_name = "Siphon";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 12;
    break;
    case 8:
        primary_name = "Double";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 10;
    break;
    case 9:
        primary_name = "Pierce";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 7;
    break;
    case 10:
        primary_name = "Spread";
        primary_overheat_scaling = 0.05;
        primary_cooldown_base = 20;
    break;
}

//Initialize Energy related variables
energy = 100;                                   //Set the energy to its maximum
energy_regeneration_base = 0.20833;             //Base regen of 12.5 energy per second, 100 energy over 8 seconds
energy_regeneration = energy_regeneration_base; //Set the regeneration rate to the base rate
energy_regeneration_scaling = 0.00167;          //Scaling to add to the regen rate to regen faster over time; 


//Set spawn invincibility and its timer
invincible = 0.5;
alarm[10] = 120;

//Initialize ability variables
ship_ability_active_flag = false;   //Ship active ability flag
hornet_warp = -1;                   //Hornet's warp variable

//This is your player's ship
global.playership[global.mymid] = id;


//Initialize flame trail particles
flame_smoke_trails = 0;                     //Holds the value of the number of trails currently shown
flame_smoke_system = part_system_create();  //Initialize the particle system that will display the trails

//Intialize weapon-specific variables
fusion_spawner_existing = false;            //Holds whether or not fusion is currently being used. Stops multiple simultaneous uses.
stardust_spawner_existing = false;          //Holds whether or not stardust is currently being used. Stops multiple simultaneous uses.
whip_spawner_existing = false;              //Holds whether or not stardust is currently being used. Stops multiple simultaneous uses.
stasis_slow_timer = 0;                      //Holds the time(in frames) that a Stasis hit will continue to slow for
ship_status_hacked = false;                 //Holds whether or not the ship is under the hacked status, aka stunned.
ship_status_shocked = false;                //Holds whether or not the ship is under the shocked status, which causes the shield to be 50% effective.

//Initialize the secondary selection variable
secondary_selected = 1;

//Initialize sparkline node tracking
sparkline_node[1] = -1;
sparkline_node[2] = -1;
sparkline_node[3] = -1;

//Initialize the Direct node reference variable
direct_node = -1;

//Initialize shield regen
alarm[4] = 1;

//Set ship-dependant values: max shield, max armor, turn speed, speed values, and ability cooldown
switch(global.shipselect)
{
    case 1: //Alphastar
        shield_maximum = 30;    //The max value of the ship's shield
        armor_maximum = 100;    //The max value of the ship's armor
        ship_turning_rate = 5;  //The rate(per frame) that the ship turns
        velocity_maximum = 7;   //The max speed of the ship
        velocity_minimum = 2;   //The minimum speed of the ship(without braking)
        ability_cooldown = 60;  //The cooldown time(in frames) of the ships' active ability
    break;
    case 2: //Swiftwing
        shield_maximum = 30;
        armor_maximum = 55;
        ship_turning_rate = 8;
        velocity_maximum = 10;
        velocity_minimum = 4;
        ability_cooldown = 120;
    break;
    case 3: //Goliath
        shield_maximum = 50;
        armor_maximum = 130;
        ship_turning_rate = 3;
        velocity_maximum = 5;
        velocity_minimum = 1;
        ability_cooldown = 120;
    break;
}

//Set the shield and armor to their maximums
shield = shield_maximum;
armor = armor_maximum;

//Initialize the ability cooldown timer
ability_cooldown_timer = 0;

//Initialize damage threshold
threshold = 1;

//Set damage smoke and initialize smoke alarm(lol)
smoke = 6;
alarm[2] = 1;

//Change to correct ship image
switch(global.shipselect)
{
     case 1:
          sprite_index = spr_alphastar;
     break;
     case 2:
          sprite_index = spr_swiftwing;
     break;
     case 3:
          sprite_index = spr_goliath;
     break;
}
//Change color if on blue team
if(global.team[global.mymid] = 2)
{
     switch(global.shipselect)
     {
          case 1:
               sprite_index = spr_alphastar_enemy;
          break;
          case 2:
               sprite_index = spr_swiftwing_enemy;
          break;
          case 3:
               sprite_index = spr_goliath_enemy;
          break;
     }
}

//Set a new spawn point at random
nextspawn = irandom(7);
global.myspawnx = global.spawnx[nextspawn];
global.myspawny = global.spawny[nextspawn];

//Face the center
direction = point_direction(x, y, room_width/2, room_height/2);
//Initialize facedir. This is your target direction
facedir = direction;

//Initialize refresh packet rate
refreshing = 0;

//Ragequit variable
ismine = 0;

//Initialize prediction variables
predictturn = 0;
predictspeed = 0;
thisturn = 0;
lastturn = 0;

//Set the assist damage variables
for(i = 0; i &lt; 8; i += 1)
{
    if(i = global.mymid) continue;
    assistdamage = global.damagedealt[i];
}

//Set the ship's mid
mid = global.mymid;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize multiplayer aspects of the object
multiplayer_primary_fire_flag = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stop looping sounds
audio_stop_sound(snd_stardust);
audio_stop_sound(snd_whip);

//Disable collisions
mask_index = spr_empty;
        
//Destroy your turrets
with(obj_turret)
    if(mid = global.mymid)
        instance_destroy();
                
with(obj_trigger)
    if(mid = global.mymid)
        instance_destroy();


//Destroy all flame trails
for(i = 0; i &lt; flame_smoke_trails; i += 1)
 part_emitter_destroy(flame_smoke_system, emit[i]);
 
//Update score
if(defeatmid != 20)
    global.kills[defeatmid] += 1;
global.deaths[global.mymid] += 1;
for(i = 0; i &lt; 8; i += 1)
{
    if(i = global.mymid || i = defeatmid) continue;
    if(global.damagedealt[i] &gt; assistdamage+50)
        global.assists[i] += 1;
}

switch(global.matchtype)
{
     case "stock":
          //Take a ship from your lives
          global.ships -= 1;
          //Reduce your team's score by 1
          switch(global.team[global.mymid])
          {
               case 1:
                    global.redscore -= 1;
               break;
               case 2:
                    global.bluescore -= 1;
               break;
          }
     break;
     case "death":
          //Increase other team's score by 1
          switch(global.team[global.mymid])
          {
               case 1:
                    global.bluescore += 1;
               break;
               case 2:
                    global.redscore += 1;
               break;
          }
     break;
}

//Reset targetting
with(obj_mod)
{ 
    foundtarget = -1;
    targetdist = point_distance(obj_ship.x, obj_ship.y, -10000, -10000);
}

//Create a defeated ship in your place and give it your movement
defeat = instance_create(x, y, obj_deadship);
defeat.direction = direction;
defeat.speed = speed+1;
defeat.sprite_index = sprite_index;

//Change the view's focus
view_object[0] = defeat;
defeat.alarm[1] = 1;

with(obj_mod)
{
     //Send it to your chat
     chatline_add(obj_ship.message, c_maroon);
     if(global.team[global.mymid] = 1)
     {
          chatcolor[4] = c_navy;
          lolcolor[4] = 2;
     }
     else
     {
          chatcolor[4] = c_maroon;
          lolcolor[4] = 1;
     }
}

//Create an announcement
if(obj_mod.announcing = 0 &amp;&amp; defeatmid != 20)
{
     obj_mod.announcing  = 1;
     obj_mod.announcement = global.othername[defeatmid]+" defeated "+global.name;
     obj_mod.announcement_color = obj_mod.chatcolor[4];
}

//Send the defeat to everyone
clearbuffer(0);
packet_label_write(3, global.mymid);
writebyte(defeatmid, 0);
writebyte(nextspawn, 0);
writebyte(obj_mod.lolcolor[4], 0);
writestring(obj_mod.chatline[4], 0);
//Send to everyone if host
if(global.master = true)
    client_sendall(0, 0);
else
    //Send to host if client
    sendmessage(global.host, 0, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(beserkeffect)
    instance_destroy();
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//End invincibility
invincible = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset stardust hit limiter
threshold = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destroy all burn trail effects ad reset effect counter
for(i = 0; i &lt; flame_smoke_trails; i += 1)
    part_emitter_destroy(flame_smoke_system, emit[i]);
flame_smoke_trails = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset shock variable
ship_status_shocked = false;
basegain *= 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset hack variable
ship_status_hacked = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ship_status_shocked = true)
{
    alarm[4] = 120;
    exit;
}
if(shield &lt; shield_maximum)
{
    if(armor/armor_maximum &gt; shield/shield_maximum)
        shield += regenrate;
    else
        shield += regenrate/2;
}
alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//End the Goliath active ability Hyper Rush
ship_ability_active_flag = false;
velocity_maximum = 5;
ship_turning_rate = 3;
if(speed &gt; 5)
    speed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if smoking should be occuring
if(smoke &lt; 6)
{
    //Select a color
    if(smoke &gt; 3) 
        effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_gray);
    else
        switch(irandom(5))
        {
            case 1:
                effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_gray);
            break;
            case 2:
                effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_dkgray);
            break;
            default:
                //Make a random color somewhere between pure red and pure yellow
                create_burning(x-6+random(12), y-6+random(12));
            break;
        }
}
//Set the time until the next smoke effect, dependant on how bad smoking is
alarm[2]=(6*smoke+10);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Perform action based on if the primary is being fired
if(primary_cooldown &lt;= 0)
    //Reduce the overheat multiplier since the primary isn't being fired
    primary_overheat = max(1, primary_overheat-0.003);
else
    //Reduce the cooldown until the next primary shot is possible
    primary_cooldown -= 1;

//Change the angle of the ship
image_angle = facedir;

//Update the movement direction of the ship
var prespeed = speed;                           //Save the speed of the ship
var controlturn = prespeed/7;                   //Set the rate to update the direction of the ship
//Add the direction update rate to the hspeed and vspeed proportionately
hspeed += lengthdir_x(controlturn, facedir);
vspeed += lengthdir_y(controlturn, facedir);
//Reset the speed to scale the hspeed and vspeed changes back down
speed = prespeed;

//Handle hornet warping
if(hornet_warp &gt; -1)
{
    //Perform the warp at the 15th frame
    if(hornet_warp = 30)
    {
        x = warpx;
        y = warpy;
        view_object = id;
    }
    //Return to the normal sprite at the last frame
    if(hornet_warp = 0)
    {
        sprite_index = spr_swiftwing;
        if(global.team[global.mymid] = 2)
            sprite_index = spr_swiftwing_enemy;
    }
    //Count toward the next frame
    hornet_warp -= 1;
} 

//Update burn trail effect positions
for(i = 0; i &lt; flame_smoke_trails; i += 1)
    part_emitter_region(flame_smoke_system, emit[i], x+lengthdir_x(8, direction+effectdir[i]), x+lengthdir_x(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), ps_shape_ellipse, ps_distr_linear);

//Set the minimum speed. If braking, change
//the minimum to 0.
//Brake if S is pressed, if you are chatting, or if you were hacked
speedmin = velocity_minimum;
if(keyboard_check(ord('S')) || global.chatting = true || ship_status_hacked = true) 
{
    speedmin = 0;
    speed -= 0.2;
}

//Lower speed
speed = max(speedmin, speed - 0.04);
 
//Constantly recover energy if not at full energy
if(energy &lt; 100) 
    energy += energy_regeneration;
energy_regeneration += energy_regeneration_scaling; //Scale the regen rate over time

ability_cooldown_timer -= 1;
//Bounce back into the map if you move out of it
while(x &lt; 16 || x &gt; room_width-16 || y &lt; 16 || y &gt; room_height-16)
{
    obj_mod.refreshing = 0;
    if(x &lt; 16)
    {
        x += 10;
        hspeed = -hspeed;
        facedir = direction;
        exit;
    }
    if(x &gt; room_width-16)
    {
        x -= 10;
        hspeed = -hspeed;
        facedir = direction;
        exit;
    }
    if(y &lt; 16)
    {
        vspeed = -vspeed;
        y += 10;
        facedir = direction;
        exit;
    }
    if(y &gt; room_height-16)
    {
        vspeed = -vspeed;
        y -= 10;
        facedir = direction;
        exit;
    }
}

wall_collision();

//Autoturn
//Check if autoturn is enabled or if you are chatting
if(speed &gt; 0.1 || global.chatting = true || ship_status_hacked = true)
 exit;

//Set the direction to the cursor
point = point_direction(x, y, mouse_x, mouse_y);

//Check which direction you will turn in, and see if it is different from before
//Turn towards mouse cursor
thisturn = step_towards_direction(point, 3);
facedir = direction;

if(thisturn != lastturn)
//Send turning prediction packet if it is different
{
    //Take note of the last direction sent
    lastturn = thisturn;
    clearbuffer(0);
    packet_label_write(6, global.mymid);
    writebyte(prediction_compress(thisturn, predictturn, predictspeed, 0), 0);
    //Send to everyone if host
    if(global.master = true)
        client_sendall(0, 0);
    else
        //Send to host if client
        sendmessage(global.host, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_clustermine_small_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(11, 11, 0, 8, "Cluster Mine");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_splitmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.damage &gt; 4)
{
 other.split = instance_create(other.x, other.y, obj_splitmissile_enemy);
 other.split.mid = other.mid;
 other.split.direction = other.direction-30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
 other.split = instance_create(other.x, other.y, obj_splitmissile_enemy);
 other.split.mid = other.mid;
 other.split.direction = other.direction+30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
}
attack_collision(other.damage, other.damage, 0, 8, "Split Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var regdmg, penedmg;

regdmg = 12;
penedmg = 15;

if(other.amplified = 1)
{
    regdmg = 0;
    penedmg = 27;
}
attack_collision(regdmg, penedmg, 0, 8, "Strike Mine");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.mid != global.mymid || other.recollect = 0)
 exit;
//Take the mine away from your mine count
//Take from the correct deploy count
for(i = 1; i &lt;= 3; i += 1)
{
 if(global.deploy[i] = 12)
    if(deploystock[i] != maxdstock[i])
    {
        deploystock[i] += 1;
    }

}

with(other)
{
 collected = 1;
 sfx_play(snd_pickup, x, y);
 instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(12, 12, 0, 4, "Strike Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hermitmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(12+(other.absorb*3), 12+(other.absorb*3), 0, 8, "Counter Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hackermine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(attack_collision(6, 11, 0, 8, "Hacker Mine") = 1)
{
    ship_status_hacked = true;
    alarm[5] = 90;
    //Send the information
    clearbuffer(0);
    packet_label_write(15, global.mymid);
    //Send to everyone if host
    if(global.master = true)
        client_sendall(0, 0);
    else
        //Send to host if client
        sendmessage(global.host, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shockmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(attack_collision(10, 10, 0, 8, "Shock Missile") = 1)
{
    if(ship_status_shocked = false)
    {
        ship_status_shocked = true;
        basegain /= 3;
        if(energygain &gt; basegain)
            energygain = basegain;
    }
    if(other.amplified = 0)
        alarm[6] = 600;
    else
        alarm[6] = 900;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tridentmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(4, other.dmg, 0, 4, "Trident Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_phantommine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(22, 16, 0, 8, "Phantom Mine");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_locustmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(invincible = 0.7)
    exit;



//Check if there's a nearby paladin turret
var shielded;
shielded = 1;
if(instance_exists(obj_turret))
    if(distance_to_object(instance_nearest(x, y, obj_turret)) &lt; 400)
        shielded = 2;
//Take damage
if(invincible = 1)
{
    //Check if under shock effect
   if(ship_status_shocked = false)
        shield -= 3/shielded;
    else
    {
        shield -= 1;
        armor -= 2;
    }

    //If there is no more shield, transfer damage to armor
    if(shield &lt; 0) 
    {
        //Do double damage to armor
        armor += shield*1.167;
        shield = 0;
    }
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}


//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (armor_maximum*100)/60)
 smoke = floor(armor/(armor_maximum/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
    //Take note of the player that defeated you
    defeatmid = other.mid;
    //Make a defeat message
    if(global.ships &gt; 1)
        random_message(global.othername[other.mid], global.name, "Locust Missile");
    else
        message = global.othername[other.mid]+" ELIMINATED "+global.name+".(Locust Missile)";

    //Destroy this object
    instance_destroy();

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_huntermine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(18, 26, 0, 8, "Hunter Mine");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_layermissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var directdir, regdmg, penedmg;
//Find out ideal direction for a "direct hit"
directdir = point_direction(other.x, other.y, x, y);
//Base connection damage and explosion
penedmg = 15;
regdmg = 10+other.bonusdamage;
other.hits = 1;

//If the missile's direction is near the ideal direction, add more damage and explosion
if(directdir &gt;= other.direction-4 &amp;&amp; directdir &lt;= other.direction+4)
{
    penedmg += 20;
    regdmg += 10;
    other.hits = 2;
}
//If the missile's direction is VERY close to the ideal direction, add even more damage and explosion
if(directdir &gt;= other.direction-1 &amp;&amp; directdir &lt;= other.direction+1)
{
    penedmg += 25;
    regdmg += 10;
    other.hits = 3;
}

attack_collision(regdmg, penedmg, 0, 8, "Layer Missile");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dualmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(10, 10, 0, 8, "Dual Missile");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_storm_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(4, 0, 0, 0, "Storm");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_serpent_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(6, 0, 0, 0, "Serpent");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_trail_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(5, 0, 0, 0, "Trail");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spiral_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(8, 0, 0, 0, "Spiral");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sparkline_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(10, 0, 0, 6, "Sparkline");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_formationa_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(7, 0, 0, 0, "Formation");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stardust_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(5, 0, 0.07, 0, "Stardust");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fusion_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(6, 0, 0, 2, "Fusion");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemystasis_field">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed &gt; 3)
    speed = 3;
stasis_slow_timer = 20; 
chained = 1;
other.slowing = 1;
other.alarm[2] = 3;


if(other.damaged[global.mymid] = 1)
    exit;
other.damaged[global.mymid] = 1;
sfx_play(snd_hit, x, y);

//Take damage
if(ship_status_shocked = false)
 shield -= 1;
else
{
 armor -= 1;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Update smoking
if(armor &lt;= (armor_maximum*100)/60)
 smoke = floor(armor/(armor_maximum/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Take note of the player that defeated you
 defeatmid = other.mid;
 //Make a defeat message
 if(global.ships &gt; 1)
  random_message(global.othername[other.mid], global.name, "Stasis");
 else
  message = global.othername[other.mid]+" ELIMINATED "+global.name+".(Stasis)"
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crossfire_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(other.damage, 0, 0, 0, "Helix");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flank_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(6, 0, 0, 0, "Seeker");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true) exit;
//Accelerate- increse speed until a max speed is reached
bonusspeed = 0;
if(shield &gt; shield_maximum-0.2)
    bonusspeed = 3;
if(speed &lt; velocity_maximum+bonusspeed)
    speed += 0.2;

if(speed &gt; velocity_maximum+0.2 &amp;&amp; predictspeed = 1)
{
    predictspeed = 3;
    obj_mod.refreshing = 0;
}
//Disable acceleration if under stasis effect
if(stasis_slow_timer &gt; 0)
{
    stasis_slow_timer -= 1;
    if(speed &gt; 3)
        speed = 3;    
    exit;
}
chained = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true) exit;
//Turn clockwise at the right speed
facedir -= ship_turning_rate;
if(facedir &lt; 0) facedir += 360;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true) exit;

facedir += ship_turning_rate;
if(facedir &gt; 360) facedir -= 360;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do the same as ctrl
event_perform(ev_keyboard, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exit if the ability isn't active
if(ship_ability_active_flag = false || global.shipselect != 1)
    exit;
    
//Drain energy to use drift ability
energy -= 0.45;
if(energy &lt;= 0)
{
    energy = 0;
    ship_ability_active_flag = false;
}      
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do the same as ctrl
event_perform(ev_keyboard, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>multiplayer_primary_fire_flag = false;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_secondary = global.secondary[secondary_selected];
current_secondary_type = global.secondary_type[secondary_selected];
current_secondary_cost = global.secondary_cost[secondary_selected];
current_secondary_stock = global.secondary_stock[secondary_selected];
current_secondary_object = global.secondary_object[secondary_selected];
current_secondary_lockon_required = global.secondary_lockon_required[secondary_selected];
current_secondary_selected = secondary_selected;
current_target_x = mouse_x;
current_target_y = mouse_y;

current_target_object = -1;                                                    //Set a default for the target object
//Loop through all of the player ships to see which ship is targeted
for(i = 1; i &lt;= 8; i++)
    if(global.playership[i] = obj_mod.foundtarget)
    {
         current_target_object = global.playership[i];                         //Object to fire at(if applicable)
         break;
    }
    
amplified = 0;

event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>multiplayer_primary_fire_flag = true;
obj_mod.refreshing = 0;

clearbuffer(0);
packet_label_write(14, global.mymid);
writeushort(global.primaryRNG[global.mymid], 0);
//Send to everyone if host
if(global.master = true)
    client_sendall(0, 0);
else
    //Send to host if client
    sendmessage(global.host, 0, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Disable chatting if currently in chat mode
global.chatting = false;

//Disbale shooting if hacked or overheated
if(ship_disabled = true) 
    exit;

    
if(primary_cooldown &lt;= 0)
{
    primary_overheat += primary_overheat_scaling;
    primary_cooldown = primary_cooldown_base * primary_overheat;
    var mouse_direction = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;  
    //Create an effect
    part_type_speed(obj_partsystem.primarypart[global.team[mid]-1], speed+1.68, speed+2.80, -0.04,0);
    part_type_direction(obj_partsystem.primarypart[global.team[mid]-1], mouse_direction-50, mouse_direction+50, 0, 0);
    part_particles_create(obj_partsystem.system, x+lengthdir_x(9, mouse_direction), y+lengthdir_y(9, mouse_direction), obj_partsystem.primarypart[global.team[mid]-1], 10);
    aiming_direction = (mouse_direction-direction)/5;
    bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), primary_name, mouse_direction, global.mymid, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Secondary Attack</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true) exit;

//Make checks to ensure the weapon can be fired
//Perform the checks only if this is your ship
if(mid = global.mymid)
{
    if(current_secondary_type = 0)  //Energy Weapons
    {
        //Beam checks
        if(current_secondary = 5)
        {
            //Make sure the ship is stopped if using beam
            if(speed &gt; 0)
            {
                    //Play an audio cue and exit the script
                    audio_play_sound(snd_unable, 1, 0);
                    exit;
            }    
            //Reduce the energy cost if amplified
            if(amplified = 1)
                current_secondary_cost -= 15;
        }
        //Make sure there is enough energy to fire the energy weapon
        if(energy &lt; current_secondary_cost)                     
        {
                //Play an audio cue and exit the script
                audio_play_sound(snd_unable, 1, 0);
                exit;
        }
        energy -= current_secondary_cost;   //Reduce energy by the necessary amount
    }
    else                    //Heavy Weapons
    {
        //Make sure there is a use left to the weapon
        if(current_secondary_stock &lt; 1)
        {
                //Play an audio cue and exit the script
                audio_play_sound(snd_unable, 1, 0);
                exit;
        }
        global.secondary_stock[current_secondary_selected] -= 1 //Take away a use from this secondary
    }
    
//Make sure there is a target if this weapon requires lockon
if(current_secondary_lockon_required = true)
    if(obj_mod.foundtarget = -1)
        exit;                   //Exit the script if there is no target
}

//Create the attack handling object    
var secondary_attack = instance_create(0, 0, current_secondary_object);
secondary_attack.target_x = current_target_x;                                           //x value to aim the attack at
secondary_attack.target_y = current_target_y;                                           //y value to aim the attack at
secondary_attack.target_object = current_target_object;                                 //Set the target object
secondary_attack.mid = mid;                                                             //mid of this ship to shoot from
secondary_attack.amplified = amplified;                                                 //Whether or not the amplified version is used

//Do not perform any network communication if you are not controlling this object
if(mid != global.mymid)
    exit;
    
//Send the information
clearbuffer(0);                                             //Clear the buffer to send a new packet
packet_label_write(2, mid);                                 //This is a secondary attack
writebyte(global.secondary[current_secondary_selected], 0); //Send the secondary index of this attack
writeshort(mouse_x, 0);                                     //Send the mouse x coordinate
writeshort(mouse_y, 0);                                     //Send the mouse y coordinate
writebyte(current_target_object, 0);                        //Send the mid of the targeted object. 9 means no target.
writebyte(amplified, 0);                                    //Send the amplified flag value

//Send to everyone if host
if(global.master = true)
    client_sendall(0, 0);
else
    //Send to host if client
    sendmessage(global.host, 0, 0, 0);


    
    
    
    
    
    
    
/*
switch(global.secondary_selected)
{
    
    //Dual Missile
    case 0:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_dualmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_dualmissile);
        missile.startdir = facedir;
        missile.direction = facedir-90;
        missile.speed = 4;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
      
        //Create the second missile
        missile = instance_create(x, y, obj_dualmissile);
        missile.startdir = facedir;
        missile.direction = facedir+90;
        missile.speed = 4;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        
        deploystock[obj_mod.dstock] -= 1;

        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(1, 0)//dual missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Fusion
    case 1:
        //Check to see if you have enough energy to use it
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce energy
        energy -= 25;
        
        //Create a fusion spawner for the attack
        var fusion_spawner = instance_create(0, 0, obj_fusion_attack);
        fusion_spawner.target_x = mouse_x;        //Set the x value of the target location
        fusion_spawner.target_y = mouse_y;        //Set the y value of the target location
        fusion_spawner.mid = global.mymid;        //Set the mid to your mid
        fusion_spawner.amplified = amplified;     //Set the amplified correctly
        fusion_spawner_existing = true;           //Set the spawner flag to true

        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(2, 0)//Fusion secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Stardust
    case 2:
        //Check to see if you have enough energy to use it
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        
        //Check if still shooting out stardust
        if(stardust_spawner_existing = true)
            exit;
            
        //Play a sound if SFX are enabled
        sfx_play(snd_swifttele, x, y);

        //Create a stardust spawner for the attack
        var stardust_spawner = instance_create(0, 0, obj_stardust_attack);
        stardust_spawner.target_x = mouse_x;        //Set the x value of the target location
        stardust_spawner.target_y = mouse_y;        //Set the y value of the target location
        stardust_spawner.mid = global.mymid;        //Set the mid to your mid
        stardust_spawner.amplified = amplified;     //Set the amplified correctly
        stardust_spawner_existing = true;           //Set the spawner flag to true
        
        //Reduce energy
        energy -= 25;
        
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(3, 0)//Stardust secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
         
    //Hunter Mine
    case 3:
        //Check if an existing hunter mine belongs to you
        with(obj_huntermine)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        if(deploystock[obj_mod.dstock] &lt; 1)
         {
           audio_play_sound(snd_unable, 1, 0);
           exit;
         }

        hmine=instance_create(x, y, obj_huntermine)
        hmine.mid = global.mymid;
        hmine.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;           
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(4, 0)//Hunter Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Layer Missile
    case 4:
        //Check if an existing dual missile belongs to you
        with(obj_layermissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
           audio_play_sound(snd_unable, 1, 0);
           exit;
        }
        //Check if you have missiles left
        sfx_play(snd_missile, x, y);
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_layermissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 12;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(6, 0)//layer missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Barrier
    case 5:
        //Check if you have energy for the barrier
        if(energy &lt; 40)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }        
        //Reduce Energy
        energy -= 40;
        //Create a barrier where the cursor is, and give it the appropriate direction
        with(obj_barrier)
            if(mid = global.mymid)
                instance_destroy();
        barrier = instance_create(mouse_x, mouse_y, obj_barrier);
        barrier.direction = point_direction(x, y, barrier.x, barrier.y);
        barrier.amplified = amplified;
        barrier.mid = global.mymid;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(7, 0)//Barrier secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(point_direction(x, y, barrier.x, barrier.y)/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Locust Missile
    case 6:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_locustmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Check if you have missiles left
        if(amplified = 0)
            for(i = 0; i &lt; 6; i += 1)
            {
                //Create the missile and give it its properties
                missile = instance_create(x, y, obj_locustmissile);
                missile.direction = facedir-90+(i*60);
                missile.target = obj_mod.foundtarget;
                missile.mid = global.mymid;
            }
        else
            for(i = 0; i &lt; 8; i += 1)
            {
                //Create the missile and give it its properties
                missile = instance_create(x, y, obj_locustmissile);
                missile.direction = facedir-22.5+(i*45);
                missile.target = obj_mod.foundtarget;
                missile.mid = global.mymid;
            }
          
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;      
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(8, 0)//locust missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Phantom Mine
    case 7:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_phantommine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(9, 0)//Phantom Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Solus
    case 8:
        //Check if you have soluses left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing solus belongs to you
        with(obj_solus)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Reduce soluses
        deploystock[obj_mod.dstock] -= 1;
        //Create the solus where the cursor is
        solus = instance_create(x, y, obj_solus);
        solus.mid = global.mymid;
        solus.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(10, 0)//Solus secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Formation
    case 9:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if you have energy for the barrier
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
       //Reduce Energy
        energy -= 30;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_formationa);
        form.target = obj_mod.foundtarget;
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
           testtarget+=1;
           if(testtarget != global.mymid)
               if(global.playership[testtarget] = obj_mod.foundtarget)
                   break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(11, 0)//Formation secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writebyte(testtarget, 0);  
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Beam
    case 10:
        //Check if you have energy for the beam and that you are not moving
        if(energy &lt; 99 || speed &gt; 0)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 60;
        if(amplified = 0)
            energy -= 20;
        //Create a beam and give it the correct direction
        beam = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_beam);
        beam.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        beam.mid = global.mymid;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(12, 0)//Beam secondary
        writeshort(x+lengthdir_x(9, facedir), 0);
        writeshort(y+lengthdir_y(9, facedir), 0);
        writebyte(beam.direction/1.5, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    case 11:    //Sparkline
        //Check if you have enough energy
        if(energy &lt; 15)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        
        //Change the max distance between sparkline nodes depending on if the attack is amplified
        if(amplified = 0)
            var max_sparkline_distance = 480;
        else
            var max_sparkline_distance = 680;
        
        //Loop through to check all 3 possible sparkline nodes
        for(i = 1; i &lt;= 3; i ++)
            //Check if the current node exists
            if(sparkline_node[i] = -1)
            {
                //Perform action depending on which node
                switch(i)
                {
                    case 2:     //This is the second node. One node exists already.
                        //Check if the distance between the new node's end point and the existing node is too large
                        if(point_distance(mouse_x, mouse_y, sparkline_node[1].target_x, sparkline_node[1].target_y) &gt; max_sparkline_distance)
                        {
                            i = 1;                      //This is now the first node
                            with(sparkline_node[i])     //Destroy the previously existing node
                                instance_destroy();
                            sparkline_node[1] = -1;
                        }
                    break;
                    case 3:     //This is the third node. Two nodes exist already
                        //Check if the distance between the new node's end point and the existing nodes is too large
                        if(point_distance(mouse_x, mouse_y, sparkline_node[1].target_x, sparkline_node[1].target_y) &gt; max_sparkline_distance ||
                            point_distance(mouse_x, mouse_y, sparkline_node[2].target_x, sparkline_node[2].target_y) &gt; max_sparkline_distance)
                            {
                                i = 1;                      //This is now the first node
                                with(sparkline_node[1])     //Destroy the previously existing first node
                                    instance_destroy();
                                with(sparkline_node[2])     //Destroy the previously existing second node
                                    instance_destroy();
                                sparkline_node[1] = -1;
                                sparkline_node[2] = -1;
                            }
                    break;
                }
                
                //Reduce Energy
                energy -= 15;

                //Create the new node
                sparkline_node[i] = instance_create(x, y, obj_sparkline);
                sparkline_node[i].direction = point_direction(x, y, mouse_x, mouse_y);  //Set the node's direction to its end point
                sparkline_node[i].target_x = mouse_x;                                   //Set the node's end point x value
                sparkline_node[i].target_y = mouse_y;                                   //Set the node's end point y value
                sparkline_node[i].mid = global.mymid;                                   //Give the node your mid
                sparkline_node[i].node_order = i;                                       //Label the node with its order number. This is used
                                                                                        //  to determine how it interacts with the other nodes
                //Exit the loop since a node has been created                                                                        
                break;                                                                                              
            }                                                                           
        

        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(13, 0)//Sparkline secondary
        writebyte(i, 0);
        writeshort(x, 0);
        writeshort(y, 0);
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Burst
    case 12:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_burst);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(14, 0)//Burst secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Trident Missile
    case 13:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_tridentmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile1 = instance_create(x, y, obj_tridentmissile);
        missile1.startdir = facedir;
        missile1.direction = facedir;
        missile1.speed = 4;
        missile1.target = obj_mod.foundtarget;
        missile1.mid = global.mymid;
        missile1.trio = 1;
        missile1.amplified = amplified;
        
        //Create the second missile
        missile2 = instance_create(x, y, obj_tridentmissile);
        missile2.startdir = facedir;
        missile2.direction = facedir-90;
        missile2.speed = 4;
        missile2.target = obj_mod.foundtarget;
        missile2.mid = global.mymid;
        missile2.trio = 2;
        missile2.middle = missile1;
        missile2.amplified = amplified;
        
        //Create the last missile
        missile3 = instance_create(x, y, obj_tridentmissile);
        missile3.startdir = facedir;
        missile3.direction = facedir+90;
        missile3.speed = 4;
        missile3.target = obj_mod.foundtarget;
        missile3.mid = global.mymid;
        missile3.trio = 3;
        missile3.middle = missile1;
        missile3.amplified = amplified;
        
        //Take note of the last two missile in the first missile
        missile1.second = missile2;
        missile1.third = missile3;
        
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
         testtarget+=1;
         if(testtarget != global.mymid)
          if(global.playership[testtarget] = obj_mod.foundtarget)
           break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(15, 0)//Trident missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Slash
    case 14:
        //Check if you have energy for the barrier
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
    
        //Reduce Energy
        energy -= 25;
        //Create and send the initial shot at the cursor
        form = instance_create(x+lengthdir_x(32, point_direction(x, y,mouse_x, mouse_y)), y+lengthdir_y(32, point_direction(x, y,mouse_x, mouse_y)), obj_slash);
        form.mid = global.mymid;
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.direction = point_direction(x, y,mouse_x, mouse_y);
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(16, 0)//Slash secondary
        writeshort(form.x, 0);
        writeshort(form.y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Horizon
    case 15:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if you have energy for the barrier
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
                   
        //Reduce Energy
        energy -= 25;
        //Crete and send the initial shot at the cursor
        loldir = point_direction(x, y, obj_mod.foundtarget.x, obj_mod.foundtarget.y);
        form = instance_create(obj_mod.foundtarget.x+lengthdir_x(500, loldir), obj_mod.foundtarget.y+lengthdir_y(500, loldir), obj_horizon);
        form.target = obj_mod.foundtarget;
        form.direction = loldir-180;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(17, 0)//Horizon secondary
        writeshort(form.x, 0);
        writeshort(form.y, 0);    
        writebyte(form.direction/1.5, 0);  
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Hacker Mine
    case 16:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_hackermine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(18, 0)//Hacker Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
   
    break;
    
    //Shock Missile
    case 17:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_shockmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_shockmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 12;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(19, 0)//Shock missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Hermit Missile
    case 18:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing hermit missile belongs to you
        with(obj_hermitmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_hermitmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        missile.target = obj_mod.foundtarget;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(22, 0)//hermit missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Strike Missile
    case 19:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
          audio_play_sound(snd_unable, 1, 0);
          exit;
        }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_strikemissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(23, 0)//Shock missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Strike Mine
    case 20:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_strikemine);
        phan.mid = global.mymid;
        phan.amplified =amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(24, 0)//Strike Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Turret
    case 21:
        //Check if you have soluses left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        if(obj_bulletcontrol.wallposition[floor(mouse_x/32), floor(mouse_y/32)] = true)
            exit;
        //Reduce soluses
        deploystock[obj_mod.dstock] -= 1;
        //Create the solus where the cursor is
        solus = instance_create(mouse_x, mouse_y, obj_turret);
        solus.mid = global.mymid;
        solus.amplified = amplified
        
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(25, 0)//Turret secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Spiral
    case 22:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_spiral);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(26, 0)//Spiral secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Whip
    case 23:
        //Check to see if you have enough energy to use it
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
                   
        if(global.sfxtoggle = 0)
        {
            emit_whip = audio_emitter_create();
            sound_whip = audio_play_sound_on(emit_whip, snd_whip, 1, 1);
            audio_emitter_position(emit_whip, x, y, 0);
        }

        //Create a stardust spawner for the attack
        var whip_spawner = instance_create(0, 0, obj_whip_attack);
        whip_spawner.target_x = mouse_x;        //Set the x value of the target location
        whip_spawner.target_y = mouse_y;        //Set the y value of the target location
        whip_spawner.mid = global.mymid;        //Set the mid to your mid
        whip_spawner.amplified = amplified;     //Set the amplified correctly
        whip_spawner_existing = true;           //Set the spawner flag to true
        
        //Reduce energy
        energy -= 20;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(27, 0)//Whip secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Trail
    case 24:
        //Check if you have energy for the barrier
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 30;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_trail);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(28, 0)//Trail secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(form.direction, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Serpent
    case 25:
        //Check if you have energy
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 30;
        //Create and send the shot at the cursor
        form = instance_create(x, y, obj_serpent);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.mid = global.mymid;
        form.target = 1;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(29, 0)//Serpent secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(form.direction, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Storm
    case 26:
        //Check if you have energy
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        with(obj_storm)
        {
            if(mid = global.mymid)
                age += 1;
            if(age = 4)
                instance_destroy();
        }
        with(obj_storm_wall)
        {
            if(mid = global.mymid)
                age += 1;
            if(age = 4)
                instance_destroy();
        }
        sfx_play(snd_storm, x, y);
        //Create and send shots at the cursor
        if(amplified = 0)
        {
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y);
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-30;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+30;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+15;
            storm.mid = global.mymid;
            storm = instance_create(mouse_x, mouse_y, obj_storm_wall);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-180;
            storm.x += lengthdir_x(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);
            storm.y += lengthdir_y(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);       
            storm.image_angle = storm.direction;
            storm.mid = global.mymid;
        }
        else
        {
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+5;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-5;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-25;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+25;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-35;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+35;
            storm.mid = global.mymid;
            storm = instance_create(mouse_x, mouse_y, obj_storm_wall);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-180;
            storm.x += lengthdir_x(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);
            storm.y += lengthdir_y(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);       
            storm.image_angle = storm.direction;
            storm.mid = global.mymid;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(30, 0)//Storm secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Trigger
    case 27:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        with(obj_trigger)
            if(speed &gt; 0)
                exit;
                
        //Reduce Energy
        energy -= 20;
        
        var direct;
        direct = 0;
        if(instance_exists(obj_trigger))
            if(instance_exists(directthis))
                direct = 1;
        if(direct = 0)
        {
            //Crete and send the initial shot at the cursor
            form = instance_create(x, y, obj_trigger);
            form.direction = point_direction(x, y, mouse_x, mouse_y);
            form.targetx = mouse_x;
            form.targety = mouse_y;
            form.mid = global.mymid;
            form.amplified = amplified;
            directthis = form;
        }
        else
        {
            sfx_play(snd_wave, directthis.x, directthis.y);
            directthis.targetx = mouse_x;
            directthis.targety = mouse_y;
            directthis.speed = 13;
            directthis.direction = point_direction(directthis.x, directthis.y, mouse_x, mouse_y);
            directthis.alarm[0] = 5;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(31, 0)//Trigger secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Split Missile
    case 28:
        //Check if an existing hermit missile belongs to you
        with(obj_splitmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Check if you have missiles left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_splitmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13;
        missile.mid = global.mymid;
        missile.oldmid = -1;
        missile.damage = 11;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(33, 0)//Split missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
        
    break;
    
    //Cluster Mine
    case 29:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Destroy nearby mines
        for(i = instance_nearest(x, y, obj_clustermine); i != noone; i = instance_nearest(x, y, obj_clustermine))
        {
            if(point_distance(x, y, i.x, i.y) &lt; 400)
                instance_destroy();
            else
                break;
        }
        for(i = instance_nearest(x, y, obj_clustermine_small); i != noone; i = instance_nearest(x, y, obj_clustermine_small))
        {
            if(point_distance(x, y, i.x, i.y) &lt; 400)
                instance_destroy();
            else
                break;
        }
        phan = instance_create(x, y, obj_clustermine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(34, 0)//Cluster Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_flame(direction);
draw_turnblur();
//Draw the ship
draw_sprite_ext(sprite_index, -1, x, y, 1, 1, image_angle, c_white, invincible);

if(ship_ability_active_flag = true &amp;&amp; global.shipselect = 3)
    draw_sprite_ext(spr_goliath_hyperrush, nextflame, x, y, 1, 1, image_angle, c_white, invincible);

if(ship_status_shocked = true)
    draw_sprite_ext(spr_shocksparks, nextflame, x, y, 1, 1, 0, c_white, 0.8);
//Draw the flame trail particles
part_system_drawit(flame_smoke_system);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true || stasis_slow_timer &gt; 0) exit;

predictspeed = 1;

boosteffect = instance_create(x+lengthdir_x(8, image_angle-180), y+lengthdir_y(8, image_angle-180), obj_boosteffect)
boosteffect.image_angle = image_angle;
boosteffect.source = obj_ship;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true) exit;

predictspeed = 2;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true) exit;

predictturn = 1;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true) exit;

predictturn = 2;
obj_mod.refreshing = 0;

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_secondary = global.secondary[4];
current_secondary_type = global.secondary_type[4];
current_secondary_cost = global.secondary_cost[4];
current_secondary_stock = global.secondary_stock[4];
current_secondary_object = global.secondary_object[4];
current_secondary_lockon_required = global.secondary_lockon_required[4];
current_secondary_selected = 4;
current_target_x = mouse_x;
current_target_y = mouse_y;

current_target_object = -1;                                                    //Set a default for the target object
//Loop through all of the player ships to see which ship is targeted
for(i = 1; i &lt;= 8; i++)
    if(global.playership[i] = obj_mod.foundtarget)
    {
         current_target_object = global.playership[i];                         //Object to fire at(if applicable)
         break;
    }

amplified = 1;

event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keypress, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ability_cooldown_timer &gt; 0)
    exit;
ability_cooldown_timer = ability_cooldown;

switch(global.shipselect)
{
    case 1:
        ship_ability_active_flag = true;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(21, 0);//Treat pulse as a secondary
        writebyte(1, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    case 2:
        //Exit if already warping, not enough energy, or overheated
        if(hornet_warp != -1)
            exit;
            
        //Find the distance to the cursor
        dist = min(400, point_distance(x, y, mouse_x, mouse_y));
        //Warp towards the cursor
        warpdir = point_direction(x, y, mouse_x, mouse_y);
        warpx = x+lengthdir_x(dist, warpdir);
        warpy = y+lengthdir_y(dist, warpdir);
        //Don't warp if you would warp into a wall
        if(collision_point(warpx, warpy, obj_wall, 1, 1))
            exit;
            
        //Play a sound effect
        sfx_play(snd_swifttele, x, y);

        //Begin warp, use energy and heat
        hornet_warp = 40;
        //swiftteled = instance_create(x, y, obj_swifttele);
        view_object[0] = swiftteled;
        swiftteled.hspeed = (warpx-x)/10;
        swiftteled.vspeed = (warpy-y)/10;
        
        //Change sprite to show warp
        sprite_index = spr_swiftwing_warp;
        if(global.team[global.mymid] = 2)
            sprite_index = spr_swiftwing_warp_enemy;
        
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(35, 0);//Treat warp as a secondary
        writeshort(warpx, 0);
        writeshort(warpy, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    case 3:
        //Create pulse
        ship_turning_rate = 8;
        velocity_maximum = 10;
        speed = 10;
        ship_ability_active_flag = true;
        alarm[3] = 60;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(21, 0)//Treat pulse as a secondary
        writebyte(1, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keypress, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || ship_status_hacked = true || stasis_slow_timer &gt; 0) exit;

predictspeed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>predictspeed = 0;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>predictturn = 0;
thisturn = 0;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>predictturn = 0;
thisturn = 0;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keyrelease, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.shipselect != 1)
    exit;
    

ship_ability_active_flag = false;
//Send the information
clearbuffer(0);
packet_label_write(2, global.mymid);
writebyte(21, 0);//Treat pulse as a secondary
writebyte(0, 0);
//Send to everyone if host
if(global.master = true)
    client_sendall(0, 0);
else
    //Send to host if client
    sendmessage(global.host, 0, 0, 0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keyrelease, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,11</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
