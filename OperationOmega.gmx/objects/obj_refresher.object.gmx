<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prnt_selection</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_refresher;
//This object MYSQL
dllfree();
dllinit(0,true,true);

var newversion, vfile;
newversion = get_version();
if(VERSION_NUMBER != newversion &amp;&amp; newversion != "0")
{
    show_message("Operation Omega can now be updated to version "+newversion+" . You will need to download the new version before playing.");
    dllfree();
    game_end();
    exit;
}

switch(global.resolution)
{
 case 3:
      x += 109;
 break;
 case 4:
      x += 64;
 break;
}

//Reset activation variables
for(i = 0; i &lt; 8; i += 1)
{
 global.activated[i] = 0;
}

//Initialize the games list
//Set the selected game IP to nothing
global.connectip = '';
//Initialize all information on games

sockId = tcpconnect("www.insomniasoft.net", 80, 0, 0);
if(!sockId)
{
show_message("Unable to connect to the database");
exit;
}

setformat(sockId, 1, chr(13) + chr(10));

newLine = chr(13) + chr(10);
clearbuffer(0);
writechars("GET /receivematch.php HTTP/1.0" + newLine, 0);
writechars("Host: www.insomniasoft.net"+ newLine, 0);
sendmessage(sockId, 0, 0, 0);

processHeader = true;
while(processHeader)
{
receivemessage(sockId, 0, 0);
firstWord = readsep(" ", 0);
switch(firstWord)
{
case ""://blank line
processHeader = false;
break;

//read important stuff from header...
}
}

setformat(sockId, 2, 0);
retVal = "";
while(1)
{
size = receivemessage(sockId, 6000, 0);
if(size &gt; 0)
retVal += readchars(size, 0);
else break;
}
//now we have all page data in retVal
//show_message(retVal);
var nextdata, j, datastart;
nextdata = 0;
datastart = 0;
j = 0;
k = 0;
closesocket(sockId);

for(i=0 ; i&lt;=string_length(retVal); i+=1) 
{
 if(string_char_at(retVal,i)="|" || i=string_length(retVal))
 {
        returndata[j, k] = string_copy(retVal, datastart, nextdata-1);
        datastart = i+1;
        nextdata = 0;
        j += 1;
 } 
 if(string_char_at(retVal,i)=";")
 {
        returndata[j, k] = string_copy(retVal, datastart, nextdata-1);
        datastart = i+1;
        nextdata = 0;
        j = 0;
        k += 1;
 } 
 nextdata += 1        
}


//Convert the return values over to familiar variables
for(i=0; i&lt;20; i+=1)
{
 dataserverip[i] = '';
 datatime[i] = '';
 datagamename[i] = '';
 datausername[i] = '';
 datamaxplayers[i] = '';
 dataplayercount[i] = '';
 datamode[i] = '';
 datamap[i] = '';
 datastatus[i] = '';
}

update = 0;
thistime = get_servertime();
for(i = 0; i &lt; k; i += 1)
//Set the information on games that currently exist
{
 dataserverip[i] = returndata[0, i];
 //Remove your own games
 if(dataserverip[i] = global.myipaddress)
 {
    sql_remove(dataserverip[i]);
    update = 1;
 }

    
 //Remove earlier duplicate games
 for(ii = 0; ii &lt; i; ii+= 1)
    if(dataserverip[i] = dataserverip[ii])
    {
        sql_remove(dataserverip[ii]);
        update = 1;
    }
    
 datatime[i] = returndata[1, i];
 //Remove the game is 20 minutes of inactivity have passed
 if(real(thistime)-real(datatime[i]) &gt; 20)
 {
    sql_remove(dataserverip[i]);
    update = 1;
 }
    
 datagamename[i] = returndata[2, i];
 datausername[i] = returndata[3, i];
 datamaxplayers[i] = returndata[4, i];
 dataplayercount[i] = returndata[5, i];
 datamode[i] = returndata[6, i];
 datamap[i] = returndata[7, i];
 datastatus[i] = returndata[8, i];
 //Create a possible highlight over this game if it exists and give it the
 //coresponding ip
 if(dataserverip[i] != '')
  (instance_create(view_wview[0], 32+16*i, obj_selectgame)).thisip = dataserverip[i];
}

if(update = 1)
    event_perform(ev_mouse, ev_left_press);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
//Initialize all information on games
database_get_serverlist();
for(i=0; i&lt;20; i+=1)
{
 dataserverip[i] = '';
 datagamename[i] = '';
 datamaxplayers[i] = '';
 dataplayercount[i] = '';
 datamode[i] = '';
 datamap[i] = '';
 datastatus[i] = '';
}
//Set the information on games that currently exist
for(i=0; i&lt;20; i+=1)
{
 dataserverip[i] = database_get_serverinfo(i, 1);
 datagamename[i] = database_get_serverinfo(i, 2);
 datamaxplayers[i] = database_get_serverinfo(i, 3);
 dataplayercount[i] = database_get_serverinfo(i, 4);
 datamode[i] = database_get_serverinfo(i, 5);
 datamap[i] = database_get_serverinfo(i, 6);
 datastatus[i] = database_get_serverinfo(i, 7);
 //Create a possible highlight over this game if it exists and give it the
 //coresponding ip
 if(dataserverip[i] != '')
  (instance_create(view_wview[0], 32+16*i, obj_selectgame)).thisip = dataserverip[i];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exit the script if a popup exists
if(global.creatinggame = 1)
 exit;
if(global.sfxtoggle = 0)
    audio_play_sound(snd_clicktext, 1, 0);
//Destroy all highlights that exist
with(obj_selectgame)
 instance_destroy();
 
var newversion, vfile;
newversion = get_version();
if(VERSION_NUMBER != newversion &amp;&amp; newversion != "0")
{
    show_message("Operation Omega can now be updated to version "+newversion+" . You will need to download the new version before playing.");
    dllfree();
    game_end();
    exit;
}

//Set the selected ip to empty
global.connectip = '';
//Refresh the games list

sockId = tcpconnect("www.insomniasoft.net", 80, 0, 0);
if(!sockId)
{
show_message("Unable to connect to the database");
exit;
}

setformat(sockId, 1, chr(13) + chr(10));

newLine = chr(13) + chr(10);
clearbuffer(0);
writechars("GET /receivematch.php HTTP/1.0" + newLine, 0);
writechars("Host: www.insomniasoft.net"+ newLine, 0);
sendmessage(sockId, 0, 0, 0);

processHeader = true;
while(processHeader)
{
receivemessage(sockId, 0, 0);
firstWord = readsep(" ", 0);
switch(firstWord)
{
case ""://blank line
processHeader = false;
break;

//read important stuff from header...
}
}

setformat(sockId, 2, 0);
retVal = "";
while(1)
{
size = receivemessage(sockId, 6000, 0);
if(size &gt; 0)
retVal += readchars(size, 0);
else break;
}
//now we have all page data in retVal
//show_message(retVal);
var nextdata, j, datastart;
nextdata = 0;
datastart = 0;
j = 0;
k = 0;
closesocket(sockId);

for(i=0 ; i&lt;=string_length(retVal); i+=1) 
{
 if(string_char_at(retVal,i)="|" || i=string_length(retVal))
 {
        returndata[j, k] = string_copy(retVal, datastart, nextdata-1);
        datastart = i+1;
        nextdata = 0;
        j += 1;
 } 
 if(string_char_at(retVal,i)=";")
 {
        returndata[j, k] = string_copy(retVal, datastart, nextdata-1);
        datastart = i+1;
        nextdata = 0;
        j = 0;
        k += 1;
 } 
 nextdata += 1        
}


//Convert the return values over to familiar variables
for(i=0; i&lt;20; i+=1)
{
 dataserverip[i] = '';
 datatime[i] = '';
 datagamename[i] = '';
 datausername[i] = '';
 datamaxplayers[i] = '';
 dataplayercount[i] = '';
 datamode[i] = '';
 datamap[i] = '';
 datastatus[i] = '';
}

update = 0;
thistime = get_servertime();
for(i = 0; i &lt; k; i += 1)
//Set the information on games that currently exist
{
 dataserverip[i] = returndata[0, i];
 //Remove earlier duplicate games
 for(ii = 0; ii &lt; i; ii+= 1)
    if(dataserverip[i] = dataserverip[ii])
    {
        sql_remove(dataserverip[ii]);
        update = 1;
    }
    
 datatime[i] = returndata[1, i];
 //Remove the game is 20 minutes of inactivity have passed
 if(real(thistime)-real(datatime[i]) &gt; 20)
 {
    sql_remove(dataserverip[i]);
    update = 1;
 }
    
 datagamename[i] = returndata[2, i];
 datausername[i] = returndata[3, i];
 datamaxplayers[i] = returndata[4, i];
 dataplayercount[i] = returndata[5, i];
 datamode[i] = returndata[6, i];
 datamap[i] = returndata[7, i];
 datastatus[i] = returndata[8, i];
 //Create a possible highlight over this game if it exists and give it the
 //coresponding ip
 if(dataserverip[i] != '')
  (instance_create(view_wview[0], 32+16*i, obj_selectgame)).thisip = dataserverip[i];
}

if(update = 1)
    event_perform(ev_mouse, ev_left_press);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the image
draw_sprite_ext(sprite_index, 0, x, y, 1, 1, 0, c_white, image_alpha);
//Set the alpha and font of the text. Alpha must be set for room transitions
draw_set_alpha(image_alpha);
draw_set_font(fnt_digital);
//Draw the games list
for(i=0; i&lt;20; i+=1)
{
 if(dataserverip[i] != '')
  draw_text(view_wview[0]-576, 32+16*i, dataplayercount[i]+"/"+datamaxplayers[i]);
 draw_text(view_wview[0]-528, 32+16*i, datagamename[i]);
 draw_text(view_wview[0]-296, 32+16*i, datamode[i]);
 draw_text(view_wview[0]-198, 32+16*i, datamap[i]);
 draw_text(view_wview[0]-88, 32+16*i, datastatus[i]);
}
//Set alpha back to 1 for other objects
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
