<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_mod</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.tutorial = 1)
    instance_create(100, 100, obj_tutorialpractice);
            global.spawnx[0] = 368;
      global.spawny[0] = 368;
      global.spawnx[1] = 1140;
      global.spawny[1] = 1140;
      global.spawnx[2] = 1140;
      global.spawny[2] = 368;
      global.spawnx[3] = 368;
      global.spawny[3] = 1140;
      global.spawnx[4] = 368;
      global.spawny[4] = 750;
      global.spawnx[5] = 750;
      global.spawny[5] = 368;
      global.spawnx[6] = 1140;
      global.spawny[6] = 750;
      global.spawnx[7] = 750;
      global.spawny[7] = 1140;
      global.mymid = 0;
      stall = 0;
 tele = instance_create(global.spawnx[0], global.spawny[0], obj_practice_teleport);
 tele.mid = global.mymid;
 global.lolship[global.mymid] = global.shipselect;
 global.allycolor = c_red;
 global.enemycolor = c_blue;
 global.team[0] = 0;
 global.team[1] = 1;
instance_create(global.spawnx[1], global.spawny[1], obj_practice_enemytele);
global.ships = 10000;

//Handle tip display
tipalpha = 0;
playertip = "";

modify_x = 0;
modify_y = 0;

//Intialize weapon availability
esecondfade[1] = c_white;
esecondfade[2] = c_white;
esecondfade[3] = c_white;
deployfade[1] = c_white;
deployfade[2] = c_white;
deployfade[3] = c_white;


//Initialize extra background movement
back_extrahspeed = -2 + random(4);
back_extravspeed = -2 + random(4);
if(room = rm_victatundra)
{
back_extrahspeed = -8 + random(16);
back_extravspeed = -8 + random(16);
tile_add(global.backpiece_1, 0, 0, 2460, 2265, 0, 2265, 100001);
tile_add(global.backpiece_2, 0, 0, 2460, 2265, 2460, 0, 100001);
tile_add(global.backpiece_3, 0, 0, 2460, 2265, 2460, 2265, 100001);
}
if(room = rm_barricade || room = rm_katrinbase)
{
tile_add(global.backpiece_1, 0, 0, 2000, 2000, 0, 2000, 100001);
tile_add(global.backpiece_2, 0, 0, 2000, 2000, 2000, 0, 100001);
tile_add(global.backpiece_3, 0, 0, 2000, 2000, 2000, 2000, 100001);

}
background_hspeed[2]=back_extrahspeed/3;
background_hspeed[3]=back_extrahspeed/4;
background_hspeed[4]=back_extrahspeed/5;
background_vspeed[2]=back_extravspeed/3;
background_vspeed[3]=back_extravspeed/4;
background_vspeed[4]=back_extravspeed/5;
 
//Initialize auto-turn variable
global.enableautoturn = false;

chaincount = 0;
armorpart = 1;
shieldpart = 1;

//Initialize announcement variables
announcement = "";
announcealpha = 0;
announcement_color = c_maroon;
announcing = 0;

//Initialize chat check
global.chatting = false;
flashing = '';
alarm[5] = 10/global.framerate;
alarm[11] = 180/global.framerate;

//initialize ping count
pinged = 0;
sendping = 0;
refreshing = 0;
disconnectcheck = 0;

//Initialize deploy stock variable 
dstock = 0;
maxdstock = 1;

//Initialize view position
viewpos = 0;

//Merge walls together
global.wallsprite = spr_empty;
makenewwall = 0;
alarm[4] = 2;

//Initialize cursor flash
targethit = 0;
//Set rotation values for the cursor
global.rot1 = 0;
global.rot2 = 0;
global.rot3 = 0;
//Set the targetting values
foundtarget = -1;
targetdist = 0;
thisplayer = 0;
//Initialize scaling
scaling = 1;
//Initialize the notice chat
for(i = 0; i &lt;= 4; i += 1)
{
 chatline[i] = "";
 chatcolor[i] = c_black;
 chatalpha[i] = 0;
}
for(i = 0; i &lt;= 16; i += 1)
{
 extchatline[i] = "";
}

//Initialize sparkline nodes
for(i = 0; i &lt;= 8; i += 1)
{
 node[i] = -1;
 node2[i] = -1;
 node3[i] = -1;
}

//Start the match with your first energy secondary selected
switch(global.esecond[1])
{
 case 1:
      global.secondary = 1; //Fusion
 break;
 case 2:
      global.secondary = 2; //Stardust
 break;
 case 3:
      global.secondary = 5; //Barrier
 break;
 case 4:
      global.secondary = 10; //Beam
 break;
 case 5:
      global.secondary = 9; //Formation
 break;
 case 6:
      global.secondary = 11; //Sparkline
 break;
 case 7:
      global.secondary = 12; //Burst
 break;
 case 8:
      global.secondary = 14; //Slash
 break;
 case 9:
      global.secondary = 15; //Horizon
 break;
 case 10:
      global.secondary = 22; //Spiral
 break;
 case 11:
      global.secondary = 23; //Laser
 break;
 case 12:
      global.secondary = 24; //Trail  
 break;
 case 13:
      global.secondary = 25; //Reflection
 break;
 case 14:
      global.secondary = 26; //Storm
 break;
 case 15:
      global.secondary = 27; //Trigger
 break;
}
selectx = 0;
//Find the correct hotkeyed secondary
//Switch to the correct new attack
global.spacesecond = -1;
switch(global.spacehot)
{
 case 1:
 case 2:
 case 3:
      switch(global.esecond[global.spacehot])
      {
       case 1:
            global.spacesecond = 1; //Fusion
       break;
       case 2:
            global.spacesecond = 2; //Stardust
       break;
       case 3:
            global.spacesecond = 5; //Barrier
       break;
       case 4:
            global.spacesecond = 10; //Beam
       break;
       case 5:
            global.spacesecond = 9; //Formation
       break;
       case 6:
            global.spacesecond = 11; //Sparkline
       break;
       case 7:
            global.spacesecond = 12; //Burst
       break;
       case 8:
            global.spacesecond = 14; //Slash
       break;
       case 9:
            global.spacesecond = 15; //Horizon
       break;
       case 10:
            global.spacesecond = 22; //Spiral
       break;
       case 11:
            global.spacesecond = 23; //Laser
       break;
       case 12:
            global.spacesecond = 24; //Trail  
       break;
       case 13:
            global.spacesecond = 25; //Reflection
       break;
       case 14:
            global.spacesecond = 26; //Storm
       break;
       case 15:
            global.spacesecond = 27; //Trigger
       break;
      }
      spacex = -32+(global.spacehot*32);
 break;
 case 4:
 case 5:
 case 6:
      switch(global.deploy[global.spacehot-3])
      {
       case 1:
            global.spacesecond = 0; //Dual Missile
       break;
       case 2:
            global.spacesecond = 4; //Layer Missile
       break;
       case 3:
            global.spacesecond = 3; //Hunter Mine
       break;
       case 4:
            global.spacesecond = 6; //Locust Missile
       break;
       case 5:
            global.spacesecond = 7; //Phantom Mine
       break;
       case 6:
            global.spacesecond = 8; //Solus
       break;
       case 7:
            global.spacesecond = 13; //Trident Missile
       break;
       case 8:
            global.spacesecond = 17; //Shock Missile
       break;
       case 9:
            global.spacesecond = 16; //Hacker Mine
       break;
       case 10:
            global.spacesecond = 18; //Hacker Mine
       break;
       case 11:
            global.spacesecond = 19; //Hacker Mine
       break;
       case 12:
            global.spacesecond = 20; //Hacker Mine
       break;
       case 13:
            global.spacesecond = 21; //Hacker Mine
       break;
       case 14:
            global.spacesecond = 28; //Split Missile
       break;
       case 15:
            global.spacesecond = 29; //Cluster Mine
       break;
      }
      switch(global.spacehot)
      {
       case 4:
            switch(global.shipselect)
            {
             case 1:
                  spacex = 64;
             break;
             case 2:
                  spacex = 96;
             break;
             case 3:
                  spacex = 32;
             break;
            }
       break;
       case 5:
            switch(global.shipselect)
            {
             case 1:
                  spacex = 96;
             break;
             case 3:
                  spacex = 64;
             break;
            }
       break;
       case 6:
            spacex = 96;
       break;
      }
 break;
}

//Set the view increments
global.resolution = 4;
switch(global.resolution)
{
 case 1:
      increx = 20;
      increy = 15;
      viewheight = 660;
      view_hview[0] = viewheight;
 break; 
 case 2:
      increx = 20;
      increy = 16;
      viewheight = 704;
      view_hview[0] = viewheight;
 break; 
 case 3:
      increx = 24;
      increy = 13.5;
      viewheight = 642;
      view_hview[0] = viewheight;
 break; 
 case 4:
      increx = 24;
      increy = 15;
      viewheight = 750;
      view_hview[0] = viewheight;
 break; 
}
view_wview[0] += increx*18;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//change fps to match the framerate of the slowest player
/*
//Find the current lowest framerate
lowestrate = min(global.playerfps[0], global.playerfps[1], global.playerfps[2], global.playerfps[3], global.playerfps[4], global.playerfps[5], global.playerfps[6], global.playerfps[7]);

//Do not limit your framerate if your framerate is lowest, and below the current framerate limit
if(lowestrate = global.playerfps[global.mymid])
 room_speed = 60/global.framerate;
else
 room_speed = round(lowestrate/global.framerate);

 
alarm[11] = 180/global.framerate;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>announcing = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Check if the view is larger than normal
 if(view_hview[0] &gt; viewheight &amp;&amp; stall = 0)
 {
   alarm[6] = 1;
   view_wview[0] -= increx/3;
   view_hview[0] -= increy/3;
 }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change the flashing text
if(flashing = '')
 flashing = '|';
else
 flashing = '';
//Set time until next flash
alarm[5] = 10/global.framerate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create a surface large enough to hold all wall drawings
global.wallsurface = surface_create(ceil(room_width/15), ceil(room_height/15));

//Begin drawing to the surface
surface_set_target(global.wallsurface);
//Clear the surface
draw_clear_alpha(c_black, 1);
//Have each wall mark its position with a square
draw_set_alpha(1);
with(obj_wall)
{
 draw_set_color(c_dkgray);
 draw_rectangle(x/16, y/16, (x+sprite_width)/16, (y+sprite_height)/16, 0);
}
//Create a sprite from the surface
global.wallsprite = sprite_create_from_surface(global.wallsurface, 0, 0, ceil(room_width/16), ceil(room_height/16), 1, 0, 0, 0);
//Stop drawing to the surface
surface_reset_target();
//Free the surface from memory
surface_free(global.wallsurface);

//Stop execution if there were no walls in the room
if(instance_number(obj_wall) &lt; 1)
 exit;

makenewwall = 1;

//Destroy all walls
with(obj_wall)
 instance_destroy();
 
//Create one of these objects
superwall = instance_create(0, 0, obj_bigwall);
superwall.sprite_index = global.wallsprite;

//Scale the object to actual size
superwall.image_xscale = 16;
superwall.image_yscale = 16;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targethit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The game is over. Return to the waiting rooom
room_goto(rm_aftermatch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Return to the appropriate room
room_goto(rm_profile);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//respawn if there is stock left
tele = instance_create(global.myspawnx, global.myspawny, obj_practice_teleport);
tele.mid = global.mymid;
//destroy the error stopper
with(obj_practiceship_placeholder)
 instance_destroy();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This part of the step event is the personal checks
//Things here will not be sent to/received by other players.

//Update chain image loop
chaincount += 1;
if(chaincount &gt; 33)
 chaincount = 0;

if(tipalpha &gt; 0)
    tipalpha -= 0.01;
    
if(!instance_exists(view_object[0]))
 view_object[0] = obj_ship;
//Handle background positioning
if((view_xview[0]&gt;0&amp;&amp;view_xview[0]+view_wview[0]&lt;room_width))
{
if(room != rm_katrinbase &amp;&amp; room != rm_victabase &amp;&amp; room != rm_victatundra &amp;&amp; room != rm_katrincoast)
{ 
 background_hspeed[0]=view_object.hspeed/1.5;
 background_hspeed[2]=(view_object.hspeed+back_extrahspeed)/3;
 background_hspeed[3]=(view_object.hspeed+back_extrahspeed)/4;
 background_hspeed[4]=(view_object.hspeed+back_extrahspeed)/5;
}

background_hspeed[1]=view_object.hspeed/1.5;
background_hspeed[5]=view_object.hspeed/10;
background_hspeed[6] = -(view_object.hspeed-back_extrahspeed)*.2;
}
else
{
background_hspeed[0]=0;
background_hspeed[1]=0;
background_hspeed[2]=back_extrahspeed/3;
background_hspeed[3]=back_extrahspeed/4;
background_hspeed[4]=back_extrahspeed/5;
background_hspeed[5]=0;
background_hspeed[6]=back_extrahspeed/12;
}
if((view_yview[0]&gt;0&amp;&amp;view_yview[0]+view_hview[0]&lt;room_height))
{
if(room != rm_katrinbase &amp;&amp; room != rm_victabase &amp;&amp; room != rm_victatundra &amp;&amp; room != rm_katrincoast)
{ 
 background_vspeed[0]=view_object.vspeed/1.5;
 background_vspeed[2]=(view_object.vspeed+back_extravspeed)/3;
 background_vspeed[3]=(view_object.vspeed+back_extravspeed)/4;
 background_vspeed[4]=(view_object.vspeed+back_extravspeed)/5;
}

background_vspeed[1]=view_object.vspeed/1.5;
background_vspeed[5]=view_object.vspeed/10;
background_vspeed[6] = -(view_object.vspeed-back_extravspeed)*.2;
}
else
{
background_vspeed[0]=0;
background_vspeed[1]=0;
background_vspeed[2]=back_extravspeed/3;
background_vspeed[3]=back_extravspeed/4;
background_vspeed[4]=back_extravspeed/5;
background_vspeed[5]=0;
background_hspeed[6]=back_extravspeed/12;
}

//Rotate cursor parts
global.rot1 += 2.5*global.framerate;
global.rot2 -= 4*global.framerate;
global.rot3 += 6*global.framerate;

//Handle Goliath Weaponsmith Bay
if(global.shipselect = 3)
 weaponsmith(dstock);

//Find the player farthest from you, but within view range
farthestdist = 0;
farthesttarget = -1;
for(i = 1; i &lt;= global.enemynumber; i += 1)
{
 if(!instance_exists(global.playership[i])) continue;
 loldist = point_distance(view_object.x, view_object.y, global.playership[i].x, global.playership[i].y);
 if(loldist &lt;= 740 &amp;&amp; loldist &gt; farthestdist)
 {
  farthestdist = loldist;
  farthesttarget = global.playership[i];
 }
}

//Targetting
//Target the enemy closest to the cursor
oldtarget = foundtarget;
if(obj_ship.armor &gt; 0)
 foundtarget = instance_nearest(mouse_x,mouse_y,prnt_enemy);

//Check if there is a target
if(farthesttarget &gt; -1)
{
    view_focusx = farthesttarget.x;
    if(farthesttarget.x &lt; 64)
        view_focusx = 66;
    if(farthesttarget.x &gt; room_width-64)
        view_focusx = room_width-66;
    view_focusy = farthesttarget.y;
    if(farthesttarget.y &lt; 64)
        view_focusy = 66;
    if(farthesttarget.y &gt; room_height-64)
        view_focusy = room_height-66;
        
 //Check if the target is moving out of view
 if(view_hview[0] &lt; 1480 &amp;&amp; view_wview[0] &lt; room_width-increx &amp;&amp;
  
 (view_focusx &lt; view_xview[0]+64 || view_focusx &gt; view_xview[0]+view_wview[0]-64 || view_focusy&lt;view_yview[0]+64 || view_focusy &gt; view_yview[0]+view_hview[0]-64))
 {
  //Expand the view to keep it seen
  view_wview[0] += increx;
  view_hview[0] += increy;
  stall = 1;
 }
 //Check if the view is larger than normal
 if(view_hview[0] &gt; viewheight)
 {
  //Check if the target is moving closer
  if(stall = 1 &amp;&amp; view_focusx &gt; view_xview[0]+128 &amp;&amp; view_focusx &lt; view_xview[0]+view_wview[0]-128 &amp;&amp; view_focusy &gt; view_yview[0]+128 &amp;&amp; view_focusy &lt; view_yview[0]+view_hview[0]-128)
  {
   //Shrink the view as needed
   stall = 0;
   alarm[6] = 180;
  }
 }
}
else
{
 //If there is no target, check to see if the view is larger
 //than normal
 if(stall = 1 &amp;&amp; view_hview[0] &gt; viewheight)
 {
  //Shrink the view as needed
   stall = 0;
   alarm[6] = 180;
 }
 foundtarget = -1;
}

//Convert the distance to target to be used by the targetting meter
if(foundtarget != -1 &amp;&amp; instance_exists(foundtarget))
 targetdist = ceil(point_distance(view_object.x, view_object.y, foundtarget.x, foundtarget.y)/29.6);
else
 targetdist = 0;
if(targetdist &gt; 27)
 foundtarget = -1;
 
//Creeate a new cursor effect
if(foundtarget != -1 &amp;&amp; foundtarget != oldtarget)
{
    with(obj_lockoncursor)
        instance_destroy();
    newlockon = instance_create(0, 0, obj_lockoncursor);
    newlockon.target = foundtarget;
    newlockon.direction = global.rot2;
}

//Center your ship
screen_shake(view_object);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_postgrid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
alarm[1]=2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(selectx)
{
 case 0:
      keyboard_key_press(ord('2'));
      keyboard_key_release(ord('2'));
 break;
 case 32:
      keyboard_key_press(ord('3'));
      keyboard_key_release(ord('3'));
 break;
 case 64:
      keyboard_key_press(ord('4'));
      keyboard_key_release(ord('4'));
 break;
 case 96:
      keyboard_key_press(ord('1'));
      keyboard_key_release(ord('1'));
 break;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(selectx)
{
 case 0:
      keyboard_key_press(ord('4'));
      keyboard_key_release(ord('4'));
 break;
 case 32:
      keyboard_key_press(ord('1'));
      keyboard_key_release(ord('1'));
 break;
 case 64:
      keyboard_key_press(ord('2'));
      keyboard_key_release(ord('2'));
 break;
 case 96:
      keyboard_key_press(ord('3'));
      keyboard_key_release(ord('3'));
 break;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tipalpha &gt; 0)
    exit;
playertip = select_tip("secondary");
tipalpha = 3.5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tipalpha &gt; 0)
    exit;
playertip = select_tip("primary");
tipalpha = 3.5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Delete temporary data from memory
sprite_delete(global.wallsprite);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the scaling value
scaling = view_hview[0]/480;
//Draw cloud layer on victa tundra
if(room = rm_victatundra)
 draw_background_tiled(global.cloudback, background_x[6], background_y[6]);
//Draw equipped weapons
check_weapons();
switch(global.shipselect)
{
 case 1:
      draw_sprite_ext(global.esecondimage[1], 0, view_xview[0], view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[1], 1);
      draw_sprite_ext(global.esecondimage[2], 0, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[2], 1);
      draw_sprite_ext(global.deployimage[1], 0, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[1], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[1]/obj_ship.maxdstock[1])*24, 28, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
      draw_sprite_ext(global.deployimage[2], 0, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[2], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[2]/obj_ship.maxdstock[2])*24, 28, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
 break;
 case 2:
      draw_sprite_ext(global.esecondimage[1], 0, view_xview[0], view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[1], 1);
      draw_sprite_ext(global.esecondimage[2], 0, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[2], 1);
      draw_sprite_ext(global.esecondimage[3], 0, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[3], 1);
      draw_sprite_ext(global.deployimage[1], 0, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[1], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[1]/obj_ship.maxdstock[1])*24, 28, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
 break;
 case 3:
      draw_sprite_ext(global.esecondimage[1], 0, view_xview[0], view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[1], 1);
      draw_sprite_ext(global.deployimage[1], 0, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[1], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[1]/obj_ship.maxdstock[1])*24, 28, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
      draw_sprite_ext(global.deployimage[2], 0, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[2], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[2]/obj_ship.maxdstock[2])*24, 28, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
      draw_sprite_ext(global.deployimage[3], 0, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[3], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[3]/obj_ship.maxdstock[3])*24, 28, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
 break;
} 
with(obj_weaponflash)
    draw_sprite_ext(sprite_index, image_index, view_xview[0]+xstart*obj_mod.scaling, view_yview[0]+72*obj_mod.scaling, obj_mod.scaling, obj_mod.scaling, 0, c_white, 1);

//Draw the highlighter
draw_sprite_ext(spr_numbers_selected, 0, view_xview[0]+selectx*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, c_white, 1);

//Draw Armor, Shield, Energy, and Ammo bars
if(obj_ship.armor &gt; 0)
{
 armorratio = obj_ship.armor/obj_ship.maxarmor;
 if(armorratio &lt; armorpart)
  armorpart -= 0.02;
 else
  armorpart = armorratio;
 draw_sprite_part_ext(spr_armorbar, 0, 0, 0, 4+armorpart*233, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, 1);
}
if(obj_ship.shield &gt; 0)
{
 shieldratio = obj_ship.shield/obj_ship.maxshield;
 if(shieldratio &lt; shieldpart)
  shieldpart -= 0.02;
 else
  shieldpart = shieldratio;
 draw_sprite_part_ext(spr_shieldbar, 0, 0, 0, 4+shieldpart*233, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, 0.4+(0.6*(obj_ship.shield/obj_ship.maxshield)));
}
else
 shieldpart = 0;
if(obj_ship.energy &gt; 0)
{
 draw_sprite_part_ext(spr_energybar, 0, 0, 0, 107+(obj_ship.energy/100)*130, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, obj_ship.heat/50);
 draw_sprite_part_ext(spr_energybar, 1, 0, 0, 107+(obj_ship.energy/100)*130, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, 1-obj_ship.heat/50); 
}
if(obj_ship.cooldown = 0)
    draw_sprite_ext(spr_overheatbar, 0, view_xview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
if(instance_exists(obj_overheatshine))
    draw_sprite_ext(spr_overheatshine, obj_overheatshine.image_index, view_xview[0], view_yview[0], scaling, scaling, 0, c_white, 1);

if(obj_ship.deploystock[dstock] &gt; 0)
 draw_sprite_part_ext(spr_ammobar, maxdstock, 0, 0, 81+(obj_ship.deploystock[dstock]/obj_ship.maxdstock[dstock])*157, 64, view_xview[0], view_yview[0], scaling, scaling, c_white, 1);

//Draw the gauge backgrounds
draw_sprite_ext(spr_gauges, 0, view_xview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
//Draw the space hotkey icon
if(global.spacehot != 0)
 draw_sprite_ext(spr_numbers_icon, 5, view_xview[0]+spacex*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, c_white, 1);

//Draw the radar
draw_sprite_ext(spr_radar, 0, view_xview[0]+view_wview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
//Draw the map of the walls
draw_sprite_part_ext(global.wallsprite, 0, (obj_ship.x-1600)/16, (obj_ship.y-1600)/16, 200, 200, view_xview[0]+view_wview[0]-113*scaling,  view_yview[0]+11*scaling, 0.5*scaling, 0.5*scaling, c_white, 0.8);
//Check which loop to set to
/*
for(i = 0; i &lt; 8; i += 1)
{
 //Check to make sure the current number is not your own if you are not master
 if(global.mymid != i &amp;&amp; (global.activated[i] = 1 || i = 0))
 {
  //Set radar point color
  if(global.playership[i].ally = true)
   radarpoint = global.redblue;
  else
   radarpoint = global.bluered;
  //Set radar point position
  //radardist = point_distance(obj_ship.x, obj_ship.y, global.playership[radarplayer].x, global.playership[radarplayer].y);
  radarx = ((global.playership[i].x-obj_ship.x)*50)/1500;
  radary = ((global.playership[i].y-obj_ship.y)*50)/1500;
  //Draw radar point if it is in range
  if(abs(radarx) &lt;51 &amp;&amp; abs(radary) &lt; 51)
    draw_sprite_ext(spr_radar_player, radarpoint, view_xview[0]+view_wview[0]-65*scaling+radarx*scaling, view_yview[0]+62*scaling+radary*scaling, scaling, scaling, global.playership[i].image_angle, c_white, 1);
}
}
*/  
//Draw the framerate
draw_set_color(c_white);
draw_set_font(fnt_chat);
draw_text_transformed(view_xview[0]+10*scaling, view_yview[0]+view_hview[0]-20*scaling, string(fps*global.framerate), scaling, scaling, 0);

//Draw the tip(just the tip bby)
draw_set_halign(fa_center);
draw_set_alpha(min(1, tipalpha));
draw_text_ext_transformed(view_xview[0]+view_wview[0]/2, view_yview[0]+view_hview[0]-80*scaling, playertip, -1, 500, scaling, scaling, 0);
draw_set_halign(fa_left);
draw_set_alpha(1);

//Show score window when ` is pressed
if(keyboard_check_direct(vk_tab))
 draw_sprite_ext(spr_controlwindow, 0, view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], scaling, scaling, 0, c_white, 1);

//If you are targeting an enemy, draw the targetting cursor
if(foundtarget &gt; -1 &amp;&amp; !instance_exists(obj_lockoncursor))
 draw_sprite_ext(spr_targetcursor, targetdist, foundtarget.x, foundtarget.y, scaling, scaling, global.rot2, c_white, 0.7);
//Draw the cursor
if(global.tutorial = 1)
    exit;
draw_sprite_ext(spr_cursor, targethit, mouse_x, mouse_y, scaling*.7, scaling*.7, global.rot1, c_white, 0.7);
draw_sprite_ext(spr_cursor, targethit+1, mouse_x, mouse_y, scaling*.7, scaling*.7, global.rot2, c_white, 0.7);
draw_sprite_ext(spr_cursor, targethit+2, mouse_x, mouse_y, scaling*.7, scaling*.7, global.rot3, c_white, 0.7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;

//Switch to the correct new attack
switch(global.shipselect)
{
 case 1:
      dstock = 2;
      switch(global.deploy[2])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
 case 2:
      dstock = 1;
      switch(global.deploy[1])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
 case 3:
      dstock = 3;
      switch(global.deploy[3])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
}
selectx = 96;

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;

selectx = 64;
//Switch to the correct new attack
switch(global.shipselect)
{
 case 1:
      dstock = 1;
      switch(global.deploy[1])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
 case 2:
      dstock = 0;
      switch(global.esecond[3])
      {
       case 1:
            global.secondary = 1; //Fusion
       break;
       case 2:
            global.secondary = 2; //Stardust
       break;
       case 3:
            global.secondary = 5; //Barrier
       break;
       case 4:
            global.secondary = 10; //Beam
       break;
       case 5:
            global.secondary = 9; //Formation
       break;
       case 6:
            global.secondary = 11; //Sparkline
       break;
       case 7:
            global.secondary = 12; //Burst
       break;
       case 8:
            global.secondary = 14; //Slash
       break;
       case 9:
            global.secondary = 15; //Horizon
       break;
       case 10:
            global.secondary = 22; //Spiral
       break;
       case 11:
            global.secondary = 23; //Laser
       break;
       case 12:
            global.secondary = 24; //Trail  
       break;
       case 13:
            global.secondary = 25; //Reflection
       break;
       case 14:
            global.secondary = 26; //Storm
       break;
       case 15:
            global.secondary = 27; //Trigger
       break;
      }
 break;
 case 3:
      dstock = 2;
      switch(global.deploy[2])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
}

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;
selectx = 32;
//Switch to the correct new attack
switch(global.shipselect)
{
 case 1:
 case 2:
      dstock = 0;
      switch(global.esecond[2])
      {
       case 1:
            global.secondary = 1; //Fusion
       break;
       case 2:
            global.secondary = 2; //Stardust
       break;
       case 3:
            global.secondary = 5; //Barrier
       break;
       case 4:
             global.secondary = 10; //Beam
       break;
       case 5:
            global.secondary = 9; //Formation
       break;
       case 6:
            global.secondary = 11; //Sparkline
       break;
       case 7:
            global.secondary = 12; //Burst
       break;
       case 8:
            global.secondary = 14; //Slash
       break;
       case 9:
            global.secondary = 15; //Horizon
       break;
       case 10:
            global.secondary = 22; //Spiral
       break;
       case 11:
            global.secondary = 23; //Laser
       break;
       case 12:
            global.secondary = 24; //Trail  
       break;
       case 13:
            global.secondary = 25; //Reflection
       break;
       case 14:
            global.secondary = 26; //Storm
       break;
       case 15:
            global.secondary = 27; //Trigger
       break;
      }
 break;
 case 3:
      dstock = 1;
      switch(global.deploy[1])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
}

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;
dstock = 0;
selectx = 0;
//Switch to the correct new attack
switch(global.esecond[1])
{
 case 1:
      global.secondary = 1; //Fusion
 break;
 case 2:
      global.secondary = 2; //Stardust
 break;
 case 3:
      global.secondary = 5; //Barrier
 break;
 case 4:
      global.secondary = 10; //Beam
 break;
 case 5:
      global.secondary = 9; //Formation
 break;
 case 6:
      global.secondary = 11; //Sparkline
 break;
 case 7:
      global.secondary = 12; //Burst
 break;
 case 8:
      global.secondary = 14; //Slash
 break;
 case 9:
      global.secondary = 15; //Horizon
 break;
 case 10:
      global.secondary = 22; //Spiral
 break;
 case 11:
      global.secondary = 23; //Laser
 break;
 case 12:
      global.secondary = 24; //Trail  
 break;
 case 13:
      global.secondary = 25; //Reflection
 break;
 case 14:
      global.secondary = 26; //Storm
 break;
 case 15:
      global.secondary = 27; //Trigger
 break;
}

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tipalpha &gt; 0)
    exit;
playertip = select_tip("hotkey");
tipalpha = 3.5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1]=4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
