<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alphastar_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>spr_shipmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize armor and shield
//Shield is the only important variable for this object. The shield effect
//will be shown dependant on it.
shield=30;
armor=100;
maxshield = 30;
maxarmor = 100;
shieldup = 1;
abilityactive = 0;
warping = -1;
beserk = 0;
beserking= 0;
heat = 50;
regentime = 120;
//Initialize primary firing variables
shoot = 0;
shooting = 0;
newdir = 0;
flankcurve = 0;
stasislife = 0;
crossfiredist = 0;
siphontarget = 0;

//Initialize prediction variables
thisturn = 0;
turning = 0;
speeding = 0;
shooting = 0;
//Set damage smoke and initialize smoke alarm(lol)
smoke = 6;
alarm[2] = 1;
//Set default movement values to prevent error
autoturn = 2*global.framerate;
forceturn = 5*global.framerate;
minspeed = 2*global.framerate;
maxspeed = 7*global.framerate; 
controlturn = 0.75*global.framerate;
//Initialize Hacker Mine hack variable
hacked = false;
//Initialize Shock Missile shock variable
shocked = false;
//Initialize facedir. This is your target direction
facedir = direction;

dusted = 0;
controlling = true;
//Initialize flame trail particles
deployhits = 0;
system = part_system_create();

//Initialize Chain control
chain = 0;
chained = 0;
chainer = 0;
chaincount = 0;

//Initialize flame effect
for(i = 0; i &lt;= 11; i += 1)
{
 flamelife[i] = 0;
 flamex[i] = 0;
 flamey[i] = 0;
 flamedir[i] = 0;
 flameimage[i] = 0;
}
nextflame = 0;
alarm[10] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop(snd_stardust);
sound_stop(snd_whip);
//Destroy any shield effect that might be on this ship
with(obj_hit)
{
 if(hurting = other.id)
  instance_destroy();
}
//If this ship was targeted, reset targeting
if(obj_mod.foundtarget = id)
 obj_mod.foundtarget = -1;
//Destroy all flame trails
for(i = 0; i &lt; deployhits; i += 1)
 part_emitter_destroy(system, emit[i]);
//Create a defeated ship in your place and give it your movement
defeat = instance_create(x, y, obj_practice_deadenemy);
defeat.direction = direction;
defeat.speed = speed+1;
defeat.sprite_index = sprite_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Handle Chain
if(!instance_exists(chainer))
{
 chained = 0;
 exit;
}
if(chainer = obj_ship)
 if(chainer.chaining = 0)
  chained = 0;
if(chainer.shooting = 1 &amp;&amp; chained = 1)
{
 //If there is shield left, create effect
 if(shieldup = 1)
 {
  hurt = instance_create(0, 0, obj_hit);
  hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
  hurt.hurting = id;
 }
 alarm[11] = 11;
}
else
 chained = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset stardust hit limiter
dusted = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stardust
//If there are parts of the attack left, reset the alarm
//to create them
repeat(global.framerate)
{
if(whips &gt; 0)
{
alarm[8] = 1;
whips -= 1;
}
//Set target direction
aim = point_direction(x, y, hitx, hity);
//Get movement speed of the current bullet
switch(whips)
{
 case 19:
      whipspeed = 12*global.framerate;
 break;
 case 18:
      whipspeed = 10*global.framerate;
 break;
 case 17:
      whipspeed = 8*global.framerate;
 break;
 case 16:
      whipspeed = 6*global.framerate;
 break;
 case 15:
      whipspeed = 4*global.framerate;
 break;
 case 14:
      whipspeed = 2*global.framerate;
 break;
 case 13:
      whipspeed = 3*global.framerate;
 break;
 case 12:
      whipspeed = 4*global.framerate;
 break;
 case 11:
      whipspeed = 5.5*global.framerate;
 break;
 case 10:
      whipspeed = 7*global.framerate;
 break;
 case 9:
      whipspeed = 8.5*global.framerate;
 break;
 case 8:
      whipspeed = 10*global.framerate;
 break;
 case 7:
      whipspeed = 12*global.framerate;
 break;
 case 6:
      whipspeed = 14*global.framerate;
 break;
 case 5:
      whipspeed = 16*global.framerate;
 break;
 case 4:
      whipspeed = 19*global.framerate;
 break;
 case 3:
      whipspeed = 18*global.framerate;
 break;
 case 2:
      whipspeed = 16*global.framerate;
 break;
 case 1:
      whipspeed = 14.5*global.framerate;
 break;
 case 0:
      whipspeed = 13*global.framerate;
 break;
}
bullet = bullet_create(x, y, "Whip", aim, mid, whipspeed);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destroy all burn trail effects ad reset effect counter
for(i = 0; i &lt; deployhits; i += 1)
 part_emitter_destroy(system, emit[i]);
depoyhits = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset shock variable
shocked = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hacked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if smoking should be occuring
if(smoke &lt; 6)
{
 //Select a color
 switch(floor(random(3)))
 {
  case 0:
       //Make a random color somewhere between pure red and pure yellow
       smokecolor = make_color_rgb(255, random(255), 0);
  break;
  case 1:
       smokecolor = c_gray;
  break;
  case 2:
       smokecolor = c_dkgray;
  break;
 }
 //If smoking is still low, force gray smoke
 if(smoke &gt; 3) smokecolor = c_gray;
 //Create the smoke on the ship
 effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, smokecolor);
}
//Set the time until the next smoke effect, dependant on how bad smoking is
alarm[2]=(6*smoke+10)/global.framerate;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stardust
//If there are parts of the attack left, reset the alarm
//to create them
repeat(global.framerate)
{
if(stardust &gt; 0)
{
alarm[1] = 1;
stardust -= 1;
}
//Set target direction
aim = point_direction(x, y, hitx, hity);
//Create a stardust part
fuse = instance_create(x, y, obj_stardust_enemy);
fuse.mid = mid;
fuse.amplified = staramp;
//Set movement dependant on which part it is
switch(stardust)
{
 case 24:
      fuse.speed = 11*global.framerate;
      fuse.direction = aim;
 break;
 case 23:
      fuse.speed = 13*global.framerate;
      fuse.direction = aim+11;
 break;
 case 22:
      fuse.speed = 7*global.framerate;
      fuse.direction = aim-17;
 break;
 case 21:
      fuse.speed = 9*global.framerate;
      fuse.direction = aim+7;
 break;
 case 20:
      fuse.speed = 15*global.framerate;
      fuse.direction = aim+21;
 break;
 case 19:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim-9;
 break;
 case 18:
      fuse.speed = 12*global.framerate;
      fuse.direction = aim+1;
 break;
 case 17:
      fuse.speed = 8*global.framerate;
      fuse.direction = aim-13;
 break;
 case 16:
      fuse.speed = 14*global.framerate;
      fuse.direction = aim+19;
 break;
 case 15:
      fuse.speed = 13*global.framerate;
      fuse.direction = aim-25;
 break;
 case 14:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim+5;
 break;
 case 13:
      fuse.speed = 14*global.framerate;
      fuse.direction = aim-15;
 break;
 case 12:
      fuse.speed = 12*global.framerate;
      fuse.direction = aim+17;
 break;
 case 11:
      fuse.speed = 15*global.framerate;
      fuse.direction = aim-5;
 break;
 case 10:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim+13;
 break;
 case 9:
      fuse.speed = 8*global.framerate;
      fuse.direction = aim-23;
 break;
 case 8:
      fuse.speed = 13*global.framerate;
      fuse.direction = aim+9;
 break;
 case 7:
      fuse.speed = 9*global.framerate;
      fuse.direction = aim-1;
 break;
 case 6:
      fuse.speed = 12*global.framerate;
      fuse.direction = aim+15;
 break;
 case 5:
      fuse.speed = 15*global.framerate;
      fuse.direction = aim-11;
 break;
 case 4:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim-19;
 break;
 case 3:
      fuse.speed = 11*global.framerate;
      fuse.direction = aim-7;
 break;
 case 2:
      fuse.speed = 9*global.framerate;
      fuse.direction = aim+3;
 break;
 case 1:
      fuse.speed = 14*global.framerate;
      fuse.direction = aim-21;
 break;
 case 0:
      fuse.speed = 8*global.framerate;
      fuse.direction = aim+25;
 break;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Fusion
//If there are parts of the attack left, reset the alarm
//to create them
if(fusions &gt; 0)
{
alarm[0] = 5/global.framerate;
fusions -= 1;
}
//Create a fusion part
fuse = instance_create(x, y, obj_fusion_enemy);
//Set its movement
fuse.speed = 10*global.framerate;
fuse.direction = 72*fusions;
//Set its target location
fuse.targetx = hitx;
fuse.targety = hity;
fuse.mid = mid;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shieldup = 1;
if(shield &lt;= 0)
    shieldup = 0;
if(armor &lt;= 0)
{
 instance_destroy();
 exit;
}

if(hacked = true)
{
 speed = 0;
 exit;
}
else
 speed = 3;
//Drop speed to half the max if chained
if(chained = 1)
    if(speed &gt; 2*global.framerate)
        speed = 2*global.framerate;
//Rotate the image to reflect the direction
image_angle = direction;
facedir = direction;

point = point_direction(x, y, obj_practiceship.x, obj_practiceship.y);
if(aim_limit(direction, point, 30) = point &amp;&amp; global.tutorial = 0)
{
 if(shoot = 0)
 {
  newdir = aim_limit(direction, point, 30);
  bullet_create(x+lengthdir_x(9, direction), y+lengthdir_y(9, direction), "Needle", newdir-3+random(6), 1, 0);
  shoot = 7;
 }
 else
  shoot -= 1;
}

//Update burn trail effect positions
for(i = 0; i &lt; deployhits; i += 1)
 part_emitter_region(system, emit[i], x+lengthdir_x(8, direction+effectdir[i]), x+lengthdir_x(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), ps_shape_ellipse, ps_distr_linear);


//Turn towards mouse cursor
step_towards_direction(point, 1);



 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prnt_allydeploy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_clustermine_small">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 10;
//Check if under shock effect
if(shocked = false)
 shield -= 10;
else
{
 shield -= 5;
 armor -= 5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_splitmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= other.damage;
//Check if under shock effect
if(shocked = false)
 shield -= other.damage;
else
{
 shield -= other.damage/2;
 armor -= other.damage/2;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}


//Split into two missiles.
if(other.damage &gt; 4)
{
 other.split = instance_create(other.x, other.y, obj_splitmissile);
 other.split.mid = other.mid;
 other.split.direction = other.direction-30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
 other.split = instance_create(other.x, other.y, obj_splitmissile);
 other.split.mid = other.mid;
 other.split.direction = other.direction+30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 15;
//Check if under shock effect
if(other.amplified = 0)
{
 if(shocked = false)
  shield -= 10;
 else
 {
  shield -= 5;
  armor -= 5;
 }
}
else
 armor -= 10;
//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 10;
//Check if under shock effect
if(shocked = false)
 shield -= 12;
else
{
 shield -= 6;
 armor -= 6;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hermitmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.fragment = 1;
other.breaker = mid;
//Take damage
armor -= 12;
//Check if under shock effect
if(shocked = false)
 shield -= 12;
else
{
 shield -= 6;
 armor -= 6;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hackermine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 11;
//Check if under shock effect
if(shocked = false)
 shield -= 6;
else
{
 shield -= 3;
 armor -= 3;
}

hacked = true;
alarm[5] = 90;
 
//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shockmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 10;
//Check if under shock effect
if(shocked = false)
 shield -= 10;
else
{
 shield -= 5;
 armor -= 5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

shocked = true;
if(other.amplified = 0)
 alarm[6] = 600;
else
 alarm[6] = 900;
//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tridentmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 8;
//Check if under shock effect
if(shocked = false)
 shield -= 2;
else
{
 shield -= 1;
 armor -= 1;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_phantommine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 20;
//Check if under shock effect
if(shocked = false)
 shield -= 15;
else
{
 shield -= 7.5;
 armor -= 7.5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_locustmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
//Check if under shock effect
if(shocked = false)
 shield -= 3;
else
{
 shield -= 1;
 armor -= 2;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 //Do double damage to armor
 armor += shield*1.167;
 shield = 0;
}


effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_huntermine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 25;
//Check if under shock effect
if(shocked = false)
 shield -= 15;
else
{
 shield -= 7.5;
 armor -= 7.5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_layermissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>directdir = point_direction(other.x, other.y, x, y);
//Base connection damage and explosion
armor -= 15;
//Check if under shock effect
if(shocked = false)
 shield -= 10+other.bonusdamage;
else
{
 shield -= 5+other.bonusdamage/2;
 armor -= 5+other.bonusdamage/2;
}

other.hits = 1;
//If the missile's direction is near the ideal direction, add more damage and explosion
if(directdir &gt;= other.direction-4 &amp;&amp; directdir &lt;= other.direction+4)
{
 armor -= 20;
 //Check if under shock effect
 if(shocked = false)
  shield -= 10;
 else
 {
  shield -= 5;
  armor -= 5;
 }
 other.hits = 2;
}
//If the missile's direction is VERY close to the ideal direction, add even more damage and explosion
if(directdir &gt;= other.direction-1 &amp;&amp; directdir &lt;= other.direction+1)
{
 armor -= 25;
 //Check if under shock effect
 if(shocked = false)
  shield -= 10;
 else
 {
  shield -= 5;
  armor -= 5;
 }
 other.hits = 3;
}
//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dualmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Take damage
armor -= 10;
//Check if under shock effect
if(shocked = false)
 shield -= 8;
else
{
 shield -= 4;
 armor -= 4;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));
 
//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_storm">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 4;
else
{
 shield -= 2;
 armor -= 2;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_trail">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 5;
else
{
 shield -= 2.5;
 armor -= 2.5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_serpent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 6;
else
{
 shield -= 3;
 armor -= 3;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spiral">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 7;
else
{
 shield -= 3.5;
 armor -= 3.5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sparkline">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
switch(other.damage)
{
 case 0:
      //Check if under shock effect
      if(shocked = false)
       shield -= 10;
      else
      {
       shield -= 5;
       armor -= 5;
      }
      //Shake the screen
      obj_mod.viewpos = 4;
 break;
 case 1:
      //Check if under shock effect
      if(shocked = false)
       shield -= 12;
      else
      {
       shield -= 6;
       armor -= 6;
      }
      //Shake the screen
      obj_mod.viewpos = 8;
 break;
 case 2:
      //Check if under shock effect
      if(shocked = false)
       shield -= 12;
      else
      {
       shield -= 6;
       armor -= 6;
      }
      //Shake the screen
      obj_mod.viewpos = 8;
 break;
}
//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stardust">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 5;
else
{
 shield -= 2.5;
 armor -= 2.5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fusion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 6;
else
{
 shield -= 3;
 armor -= 3;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stasis_field">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> switch(sprite_index)
 {
  case spr_alphastar:
  case spr_alphastar_enemy: //Alphastar
       if(speed &gt; 2*global.framerate)
        speed = 2*global.framerate;
  break;
  case spr_swiftwing:
  case spr_swiftwing_enemy: //Swiftwing
       if(speed &gt; 3*global.framerate)
        speed = 3*global.framerate;
  break;
  case spr_goliath:
  case spr_goliath_enemy: //Goliath
       if(speed &gt; 2*global.framerate)
        speed = 2*global.framerate;
  break;
 }
other.slowing = 1;
other.alarm[2] = 3;


if(other.damaged[mid] = 1)
    exit;
other.damaged[mid] = 1;
sfx_play(snd_hit, x, y);

//Take damage
if(shocked = false)
 shield -= 1;
else
{
 armor -= 1;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crossfire">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 5;
else
{
 shield -= 2.5;
 armor -= 2.5;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flank">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sfx_play(snd_hit, x, y);
//Take damage
if(shocked = false)
 shield -= 6;
else
{
 shield -= 3;
 armor -= 3;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prnt_allyattack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;
y = yprevious;
direction -= 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_flame(direction);
//Draw the ship
draw_sprite_ext(sprite_index,-1,x,y,1,1,image_angle,c_white,1);
if(shocked = true)
 draw_sprite_ext(spr_shocksparks, nextflame, x, y, 1, 1, 0, c_white, 0.8);
if(beserk = true &amp;&amp; warping = -1)
 draw_sprite_ext(spr_swiftwing_beserkglow, beserking, x, y, 1, 1, image_angle, c_white, 1);

//Draw the flame trail particles
part_system_drawit(system);

if(chained = 1)
{
 //Set the number of images to draw depenadant on the distance between the two nodes
 lines = floor(point_distance(chainer.x, chainer.y, x, y)/64);
 //Set the direction to the node
 dir = point_direction(chainer.x, chainer.y, x, y);
 //Set the scale value so that all images are drawn the same
 scale = (point_distance(chainer.x, chainer.y, x, y)-(lines*64))/64;
 for(i = 1; i &lt;= lines; i += 1)
 {
   draw_sprite_ext(spr_chainsap, obj_mod.chaincount+i*11, chainer.x+lengthdir_x(64*(i-1), dir), chainer.y+lengthdir_y(64*(i-1), dir), 1, 1, dir, global.allycolor, 0.8);
 }
 draw_sprite_ext(spr_chainsap, obj_mod.chaincount+i*11, chainer.x+lengthdir_x(64*(i-1), dir), chainer.y+lengthdir_y(64*(i-1), dir), scale, 1, dir, global.allycolor, 0.8);
}
 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,11</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
