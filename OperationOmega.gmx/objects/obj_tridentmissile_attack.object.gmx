<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tridentmissile</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize variables
target_x = 0;                   //x value to aim the attack at
target_y = 0;                   //y value to aim the attack at
target_direction = 0;           //directional value to aim at
target_object = -1;             //Object to fire at(if applicable)
mid = 0;                        //mid of this ship to shoot from
amplified = false;              //Whether or not the amplified version is used

alarm[1] = 1;   //Set time until attack creation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Assign the correct object depending on if it's coming from an ally or an enemy
if(global.team[mid] = global.team[global.mymid])
    var created_object = obj_tridentmissile;
else
    var created_object = obj_tridentmissile_enemy;

//Check for any existing attacks
if(instance_exists(created_object))
{
    created_object.check_mid = mid;     //Pass this object's mid onto all existing attacks of this type       
    with(created_object)
        if(check_mid = mid)             //If this attack has the same mid, destroy it
            instance_destroy();
}

//Hold the value of the origin object locally for faster reference    
var origin_object = global.playership[mid];
//Hold the value of the targeted object as well
var aiming_object = global.playership[target_object];

var attack;
//Create the first missile and give it its properties
attack[1] = instance_create(origin_object.x, origin_object.y, created_object);
attack[1].startdir = origin_object.facedir;
attack[1].direction = attack[1].startdir;
attack[1].speed = 4;
attack[1].mid = mid;
attack[1].trio = 1;
attack[1].base_direction = attack[1].direction;
if(target_object != 10)
    attack[1].target = aiming_object;                                       //Pass on the targeted object
else
    attack[1].not_targeting = true;
attack[1].amplified = amplified;

//Create the second missile
attack[2] = instance_create(origin_object.x, origin_object.y, created_object);
attack[2].startdir = origin_object.facedir;
attack[2].direction = attack[2].startdir-90;
attack[2].speed = 4;
attack[2].mid = mid;
attack[2].trio = 2;
attack[2].middle = attack[1];
attack[2].base_direction = attack[2].direction;
if(target_object != 10)
    attack[2].target = aiming_object;                                       //Pass on the targeted object
else
    attack[2].not_targeting = true;
attack[2].amplified = amplified;

//Create the last missile
attack[3] = instance_create(origin_object.x, origin_object.y, created_object);
attack[3].startdir = origin_object.facedir;
attack[3].direction = attack[3].startdir+90;
attack[3].speed = 4;
attack[3].mid = mid;
attack[3].trio = 3;
attack[3].middle = attack[1];
attack[3].base_direction = attack[3].direction;
if(target_object != 10)
    attack[3].target = aiming_object;                                       //Pass on the targeted object
else
    attack[3].not_targeting = true;
attack[3].amplified = amplified;

//Take note of the last two missile in the first missile
attack[1].second = attack[2];
attack[1].third = attack[3];

//This object is no longer needed
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
