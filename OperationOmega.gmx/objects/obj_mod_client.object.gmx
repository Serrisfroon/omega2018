<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_mod</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Perform action based on the update packet timer
switch(update_packet_timer)
{
 case 0:
        //Reset the timer
        update_packet_timer = 10;
        
        //Clear the packet and write the label of the new packet
        clearpack();
        packet_label_write(0, mid);             //0 label means this is the update packet
        crush(global.activated[mid]+1, 3, 0);   //Send your ship's activated value
        
        //Check if your ship is currently alive
        if(global.activated[mid] = 1)
        {
            //Send your ship's position, direction, and speed
            crush(round(obj_player.direction*10), 3600, 0);     //Send your ship's direction
            crush(round(obj_player.facedir*10), 3600, 0);       //Send your ship's facing direction
            crush(round(obj_player.x*10), 65000, 0);            //Send your ship's x coordinate
            crush(round(obj_player.y*10), 65000, 0);            //Send your ship's y coordinate
            crush(round(abs(obj_player.speed*100)), 2500, 0);   ////Send your ship's speed
            
            //Send your ship's prediction variables
            crush(prediction_compress(obj_player.predictturn, obj_player.predictspeed, obj_player.multiplayer_primary_fire_flag), 24, 0);
            
            //Send your ship's status variables
            crush(status_compress(obj_player.smoke, obj_player.ship_status_hacked, obj_player.ship_status_shocked, mid), 64, 0);
            
            //Check if you are currently firing your primary weapon
            if(obj_player.multiplayer_primary_fire_flag = true)
            {
                //Lower the time until the next update
                //update_packet_timer = 3;
                
                //Send your RNG seed and firing direction
                crush(global.primaryRNG[mid], 65536, 0);
                crush(round(obj_player.primary_direction), 360, 0);
                crush(round(obj_player.primary_overheat*20), 200, 0);                
            }
        }      
        //Send the update packet to the host
        bufferpack();
        sendmessage(global.host, "", 0, 0);
 break;
 default:       //The timer needs to count down
    update_packet_timer -= 1;
 break;   
}
//Send a packet immediately if the primary direction changes
if(global.activated[mid] = 1)
    if(obj_player.primary_direction != previous_primary_direction)
    {
        //Update the previous primary direction
        previous_primary_direction = obj_player.primary_direction;
        //Send a packet to everyone to update your aiming direction
        clearbuffer(0);
        packet_label_write(13, mid);
        writebyte(obj_player.primary_direction/5, 0);
        sendmessage(global.host, "", 0, 0);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This part of the step event deals with plaer communications
//This is the host object, so it must relay messages to other
//players

//Start an infinite while loop. It will be broken when there are no new messages
//from the host. All other clients will relay messages to you through the host.
while(true)
{
    //Initialize variables
    var size;
    size = 0;
    //Check for a tcp message
    size = receivemessage(global.host, 0, 0);
    //If there was no response, the host disconnected
    if(size == 0 || disconnect_timer &gt;= 300)
    {
        //Inform the player
        show_message("The host has disconnected.");
        if(global.musictoggle = 0)
        {
            audio_stop_sound(music_quasar);
            audio_play_sound(music_quasar, 1, 1);
        }
        //Close the udp socket and stop 39dll
        closesocket(global.udpsock);
        closesocket(global.host);
        dllfree();
        //Return to the appropriate room
        if(global.public_game = true)
            room_goto(rm_public_game);
        else
            room_goto(rm_private_game);   
        exit;
    }
    //If there was no message, break the loop
    if(size &lt; 0) 
    {
        disconnect_timer += 1;
        break;
    }
    disconnect_timer = 0;
    //Read the label byte to find the packet id and the player who sent it
    var lollabel = readbyte(0);
    packet_label_read(lollabel);
  
    //Check to make sure some freak error didn't occur that made the host
    //send your actions back to you to read
    if((dummy != mid || packet = 1) &amp;&amp; dummy &gt;= 0)
  
    //Perform the correct acton depending on what packet has been sent
    switch(packet)
    {
        case 0: //The player sends its refresh packet
            //Begin reading the packet information
            uncrushbegin();
            
            //Loop through all players
            for(i = 0; i &lt; 8; i += 1)
            {
                //Read the player's activation state
                var holdactivation = uncrush(3, 0)-1;
                if(i != mid)
                {
                    global.activated[i] = holdactivation;
                }
                //Ignore this cycle if the player slot is not activated
                if(holdactivation != 1) continue;
                
                //Read the cycle if it is your player slot, and put it into a junk variable.
                if(i = mid)
                {
                    var holdvar = uncrush(3600, 0);         //Read the player's direction
                    holdvar = uncrush(3600, 0);             //Read the player's facing direction
                    holdvar = uncrush(65000, 0);            //Read the player's x coordinate
                    holdvar = uncrush(65000, 0);            //Read the player's y coordinate
                    holdvar = uncrush(2500, 0);             //Read the player's speed   
                    var check_prediction = uncrush(24, 0);  //Read the player's prediction variables
                    holdervar = uncrush(64, 0);             //Read the player's status variables
                    
                    //Check if the compressed prediction holds shooting as 1
                    if(check_prediction &gt; 12)
                    {
                        //Read the player's RNG seed and firing direction
                        holdvar = uncrush(65536, 0);
                        holdvar = uncrush(360, 0);
                        holdvar = uncrush(200, 0);
                    }
                    continue;
                }   
                
                //Read this player's information and assign it to the appropriate ship         
                global.playership[i].direction = uncrush(3600, 0)/10;       //Read the player's direction
                global.playership[i].facedir = uncrush(3600, 0)/10;         //Read the player's facing direction
                global.playership[i].x = uncrush(65000, 0)/10;              //Read the player's x coordinate
                global.playership[i].y = uncrush(65000, 0)/10;              //Read the player's y coordinate
                global.playership[i].speed = uncrush(2500, 0)/100;          //Read the player's speed
         
                dummy = i;
                //Read the player's prediction variables
                var decomp = uncrush(24, 0);
                prediction_decompress(decomp);
                
                //Read the player's status variables
                decomp = uncrush(64, 0);
                status_decompress(decomp);
                
                //Check if the player is firing their primary weapon
                if(global.playership[i].multiplayer_primary_fire_flag = true)
                {
                    //Read the player's RNG seed and firing direction
                    global.primaryRNG[global.mymid] = uncrush(65536, 0);
                    global.playership[i].newdir = uncrush(360, 0)/10;
                    global.playership[i].primary_overheat = uncrush(200, 0)/20;
                }
            }
        break;
   
        //The player sends its ping packet
        case 1:
            if(dummy = global.mymid)
            {
                //Find your ms ping. Take the pined variable(added every step, 60/sec
                //Multiply by 16.67(60*16.67 ~ 1000), take the floor to remove decimal
                global.ping[global.mymid] = floor((obj_mod.ping_frame_count)*16.67);
                break;
            }
            lolstatuses = readbyte(0);
            status_decompress(lolstatuses);
            if(global.playership[dummy].ship_status_hacked = true)
            {
                global.playership[dummy].thisturn = 0;
                global.playership[dummy].turning = 0;
                global.playership[dummy].speeding = 2;
            }
            global.ping[dummy] = readbyte(0)*20;
            global.playerfps[dummy] = readbyte(0);
        break;
        
        //The player uses a secondary weapon
        case 2:
            receive_secondary();
        break;
   
        case 3: //The player is defeated  
                  
            //Send the mid of the player that defeated this player
            global.playership[dummy].defeatmid = readbyte(0);

            var dead_message = readstring(0);
            var dead_color = readbyte(0);
            //Send a defeat notice to chat
            chat_addline_game(dead_message, dead_color, 0, dummy);          //Add the line to the chat
            
            //Perform the defeat function for the player
            with(global.playership[dummy])
                event_perform(ev_other, ev_user2);    
                        
            //Read the respawn location for the player
            respawn_location[dummy] = readbyte(0);     
            if(global.playership[dummy].defeatmid != 20)
            {
                var new_message = readstring(0);
                create_announcement(new_message, obj_chat.chat_line_color[1]);
            }
 
        break;
   
        //A player is eliminated in a stock match
        case 4:
             //Send it to your chat
             chat_addline_game(global.othername[dummy]+" has been eliminated.", global.team[dummy], 0, dummy);          //Add the line to the chat
        break;
   
        //The stock match is over
        case 5:
            //Set variables appropriately depending on the outcome
            switch(readbyte(0))
            {
                case 1: //Blue team won   
                    //Send a message to your chat
                    chat_addline_game("Red Team has been eliminated.", 1, 0, dummy);          //Add the line to the chat
                    chat_addline_game("Blue Team has won the match.", 2, 0, dummy);          //Add the line to the chat
                    
                    newcolor = c_red;
                    if(global.team[global.mymid] = 1)
                    {
                        create_announcement("Operation Failed", c_blue);
                        global.outcome = 1;
                    }
                    else
                    {
                        create_announcement("Operation Successful", c_blue);
                        global.outcome = 0;
                    }
                break;
                case 2: //Red team won
                    //Send a message to your chat
                    chat_addline_game("Blue Team has been eliminated.", 2, 0, dummy);          //Add the line to the chat
                    chat_addline_game("Red Team has won the match.", 1, 0, dummy);          //Add the line to the chat
                    newcolor = c_blue;
                    if(global.team[global.mymid] = 1)
                    {
                        create_announcement("Operation Successful", c_red);
                        global.outcome = 0;
                    }
                    else
                    {
                        create_announcement("Operation Failed", c_red);
                        global.outcome = 1;
                    }
                break;
            }
            //Set time until returning to waiting room
            alarm[2] = 180;
        break;
      
        //Prediction Packet
        case 6:
            decomp = readbyte(0);
            prediction_decompress(decomp);
        break;  
        
        //Chat Message
        case 7:
            //Put the message in your chat
            var chat_message = readstring(0);
            var chat_color = global.team[dummy];
            chat_addline_game(chat_message, chat_color, 0, dummy);          //Add the line to the chat
        break;
  
        //Respawn Packet
        case 10:
            tele = instance_create(global.spawnx[respawn_location[dummy]], global.spawny[respawn_location[dummy]], obj_teleport);
            tele.mid = dummy;
        break;  
        
        //Primary Switched
        case 11:
            global.playerprimary[dummy] = readbyte(0);
        break;
           
        //Change snapdir
        case 13:
            global.playership[dummy].primary_direction = readbyte(0)*5;
        break;
        
        //Begin Firing Primary weapon
        case 14:
            global.primaryRNG[dummy] = readushort(0);
        break;
   
        //Begin Firing Primary weapon
        case 15:
             global.playership[dummy].ship_status_hacked = true;
             global.playership[dummy].alarm[5] = 90;        
        break;

        //Destroy paladin drone for player
        case 16:
            var pass_mid = dummy;
            if(global.team[dummy] = global.team[global.mymid])
            {
                with(obj_paladindrone)
                    if(mid = pass_mid)
                        instance_destroy();
            }
            else
            {
                with(obj_paladindrone_enemy)
                    if(mid = pass_mid)
                        instance_destroy();
            }
        break;

        //Push a ship
        case 17:
            var push_effect = instance_create(0, 0, obj_buster_push);
            push_effect.target_object = global.playership[dummy];
            push_effect.push_direction = readshort(0);
            push_effect.amplified = readbyte(0);
        break;
        
        //Shoot a charge shot
        case 18:
            var dummy_ship = global.playership[dummy];
            dummy_ship.x = readshort(0);
            dummy_ship.y = readshort(0);
            dummy_ship.facedir = readshort(0);
            dummy_ship.speed = readshort(0);
            dummy_ship.primary_direction = readshort(0);
            with(dummy_ship)
                event_perform(ev_other, ev_user3);
        break;
        
        //A player leaves the game
        case CLIENT_DROP:
            //Get info from leaving player
            droppedname = readstring(0);
            //Destroy the removed player
            with(global.playership[dummy])
            {
                defeatmid = 20;
                event_perform(ev_other, ev_user2);
            }            
            //Send a notice to your chat
            chat_addline_game(readstring(0), global.team[dummy], 0, dummy);          //Add the line to the chat

        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This part of the step event is the personal checks
//Things here will not be sent to/received by other players.

ping_frame_count += 1;
 
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
