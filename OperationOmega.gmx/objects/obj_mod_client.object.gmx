<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_mod</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Perform action based on the update packet timer
switch(update_packet_timer)
{
 case 0:
        //Reset the timer
        update_packet_timer = 5;
        
        //Clear the packet and write the label of the new packet
        clearpack();
        packet_label_write(0, mid);             //0 label means this is the update packet
        crush(global.activated[mid]+1, 3, 0);   //Send your ship's activated value
        
        //Check if your ship is currently alive
        if(global.activated[mid] = 1)
        {
            //Send your ship's position, direction, and speed
            crush(round(obj_player.direction*10), 3600, 0);     //Send your ship's direction
            crush(round(obj_player.facedir*10), 3600, 0);       //Send your ship's facing direction
            crush(round(obj_player.x*10), 65000, 0);            //Send your ship's x coordinate
            crush(round(obj_player.y*10), 65000, 0);            //Send your ship's y coordinate
            crush(round(abs(obj_player.speed*100)), 2500, 0);   ////Send your ship's speed
            
            //Send your ship's prediction variables
            crush(prediction_compress(obj_player.predictturn, obj_player.predictspeed, obj_player.multiplayer_primary_fire_flag), 24, 0);
            
            //Send your ship's status variables
            crush(status_compress(obj_player.smoke, obj_player.ship_status_hacked, obj_player.ship_status_shocked, mid), 64, 0);
            
            //Check if you are currently firing your primary weapon
            if(obj_player.multiplayer_primary_fire_flag = true)
            {
                //Lower the time until the next update
                update_packet_timer = 3;
                
                //Send your RNG seed and firing direction
                crush(global.primaryRNG[mid], 15, 0);
                crush(round(obj_player.primary_direction), 360, 0);
                
                //Perform action based on the primary equipped
                switch(global.primary)
                {
                    case 7: //Siphon
                        //Send the appropriate mid
                        if(obj_mod.targeted_object = -1)
                            crush(0, 8, 0);                     //Send an empty mid
                        else
                            crush(targeted_object.mid+1, 8, 0); //Send to mid corresponding to the targeted player
                    break;
                }
            }
        }      
        //Send the update packet to the host
        bufferpack();
        sendmessage(global.host, "", 0, 0);
 break;
 default:       //The timer needs to count down
    update_packet_timer -= 1;
 break;   
}
//Send a packet immediately if the primary direction changes
if(global.activated[mid] = 1)
    if(obj_player.primary_direction != previous_primary_direction)
    {
        //Update the previous primary direction
        previous_primary_direction = obj_player.primary_direction;
        //Send a packet to everyone to update your aiming direction
        clearpack();
        packet_label_write(13, mid);
        crush(obj_player.primary_direction/5, 0, 73);
        bufferpack();
        sendmessage(global.host, "", 0, 0);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This part of the step event deals with plaer communications
//This is the host object, so it must relay messages to other
//players

//Start an infinite while loop. It will be broken when there are no new messages
//from the host. All other clients will relay messages to you through the host.
while(true)
{
    //Initialize variables
    var size;
    size = 0;
    //Check for a tcp message
    size = receivemessage(global.host, 0, 0);
    //If there was no response, the host disconnected
    if(size == 0 || disconnect_timer &gt;= 300)
    {
        //Inform the player
        show_message("The host has disconnected.");
        if(global.musictoggle = 0)
        {
            audio_stop_sound(music_quasar);
            audio_play_sound(music_quasar, 1, 1);
        }
        //Close the udp socket and stop 39dll
        closesocket(global.udpsock);
        closesocket(global.host);
        dllfree();
        //Return to the appropriate room
        if(global.public_game = true)
            room_goto(rm_public_game);
        else
            room_goto(rm_private_game);   
        exit;
    }
    //If there was no message, break the loop
    if(size &lt; 0) 
    {
        disconnect_timer += 1;
        break;
    }
    disconnect_timer = 0;
    //Read the label byte to find the packet id and the player who sent it
    var lollabel = readbyte(0);
    packet_label_read(lollabel);
  
    //Check to make sure some freak error didn't occur that made the host
    //send your actions back to you to read
    if((dummy != mid || packet = 1) &amp;&amp; dummy &gt;= 0)
  
    //Perform the correct acton depending on what packet has been sent
    switch(packet)
    {
        case 0: //The player sends its refresh packet
            //Begin reading the packet information
            uncrushbegin();
            
            //Loop through all players
            for(i = 0; i &lt; 8; i += 1)
            {
                //Read the player's activation state
                global.activated[i] = uncrush(3, 0)-1;
                //Ignore this cycle if the player slot is not activated
                if(global.activated[i] != 1) continue;
                
                //Read the cycle if it is your player slot, and put it into a junk variable.
                if(i = mid)
                {
                    var holdvar = uncrush(3600, 0);         //Read the player's direction
                    holdvar = uncrush(3600, 0);             //Read the player's facing direction
                    holdvar = uncrush(65000, 0);            //Read the player's x coordinate
                    holdvar = uncrush(65000, 0);            //Read the player's y coordinate
                    holdvar = uncrush(2500, 0);             //Read the player's speed   
                    var check_prediction = uncrush(24, 0);  //Read the player's prediction variables
                    holdervar = uncrush(64, 0);             //Read the player's status variables
                    
                    //Check if the compressed prediction holds shooting as 1
                    if(check_prediction &gt; 12)
                    {
                        //Read the player's RNG seed and firing direction
                        holdvar = uncrush(15, 0);
                        holdvar = uncrush(3600, 0);
                        //Perform action based on the primary equipped
                        switch(global.playerprimary[i])
                        {          
                            case 7: //Siphon
                                holdvar = uncrush(8, 0);
                            break;
                        }
                    }
                    continue;
                }   
                
                //Read this player's information and assign it to the appropriate ship         
                global.playership[i].direction = uncrush(3600, 0)/10;       //Read the player's direction
                global.playership[i].facedir = uncrush(3600, 0)/10;         //Read the player's facing direction
                global.playership[i].x = uncrush(65000, 0)/10;              //Read the player's x coordinate
                global.playership[i].y = uncrush(65000, 0)/10;              //Read the player's y coordinate
                global.playership[i].speed = uncrush(2500, 0)/100;          //Read the player's speed
         
                dummy = i;
                //Read the player's prediction variables
                var decomp = uncrush(24, 0);
                prediction_decompress(decomp);
                
                //Read the player's status variables
                decomp = uncrush(64, 0);
                status_decompress(decomp);
                
                //Check if the player is firing their primary weapon
                if(global.playership[i].multiplayer_primary_fire_flag = true)
                {
                    //Read the player's RNG seed and firing direction
                    global.primaryRNG[global.mymid] = uncrush(15, 0);
                    global.playership[i].newdir = uncrush(3600, 0)/10;
                    
                    //Perform action based on the primary equipped
                    switch(global.playerprimary[i])
                    {          
                        case 7: //Siphon
                            global.playership[i].siphontarget = uncrush(10, 0);
                        break;
                    }
                }
            }
        break;
   
   //The player sends its ping packet
   case 1:
        if(dummy = global.mymid)
        {
         //Find your ms ping. Take the pined variable(added every step, 60/sec
         //Multiply by 16.67(60*16.67 ~ 1000), take the floor to remove decimal
         global.ping[global.mymid] = floor((obj_mod.ping_frame_count)*16.67);
         break;
        }
        lolstatuses = readbyte(0);
        status_decompress(lolstatuses);
        if(global.playership[dummy].ship_status_hacked = true)
        {
         global.playership[dummy].thisturn = 0;
         global.playership[dummy].turning = 0;
         global.playership[dummy].speeding = 2;
        }
        global.ping[dummy] = readbyte(0)*20;
        global.playerfps[dummy] = readbyte(0);
   break;
   
   //The player uses a secondary weapon
   case 2:
        receive_secondary();
   break;
   
   //The player is defeated
   case 3:
        defeatmid = readbyte(0);
        anotherspawn[dummy] = readbyte(0);
        with(obj_turret)
            if(mid = obj_mod.dummy)
                instance_destroy();
        with(obj_turret_enemy)
            if(mid = obj_mod.dummy)
                instance_destroy();
        //Update score
        if(defeatmid != 20)
         global.kills[defeatmid] += 1;
        global.deaths[dummy] += 1;
        switch(global.matchtype)
        {
         case "stock":
              //Reduce your team's score by 1
              switch(global.team[dummy])
              {
               case 1:
                    global.redscore -= 1;
               break;
               case 2:
                    global.bluescore -= 1;
               break;
              }
         break;
         case "death":
              //Increase other team's score by 1
              switch(global.team[dummy])
              {
               case 1:
                    global.bluescore += 1;
               break;
               case 2:
                    global.redscore += 1;
               break;
              }
         break;
        }
        //Create a defeated ship in the player's place
        defeat = instance_create(global.playership[dummy].x, global.playership[dummy].y, obj_deadother);
        defeat.direction = global.playership[dummy].direction;
        defeat.speed = global.playership[dummy].speed+1;
        defeat.sprite_index = global.playership[dummy].sprite_index;
        defeat.dummy = dummy;
        if(global.playership[dummy] = view_object[0])
         view_object[0] = defeat;
        //Send a defeat notice to chat
        switch(readbyte(0))
        {
         case 1:         
              newcolor = c_maroon;
         break;
         case 2:
              newcolor = c_navy;
         break;
        }
        chatline_add(readstring(0), newcolor);
        if(obj_mod.announcement_stage = 0 &amp;&amp; defeatmid != 20)
        {
         obj_mod.announcement_stage  = 1;
         obj_mod.announcement_message = global.othername[defeatmid]+" defeated "+global.othername[dummy];
         obj_mod.announcement_color = newcolor;
        }
        //Reset targetting if currently targetting this ship
        if(targeted_object = global.playership[dummy])
        {
         targeted_object = -1;
         distance_to_target = point_distance(obj_ship.x, obj_ship.y, -10000, -10000);
        }
        //Destroy the designated ship
        with(global.playership[dummy])
         instance_destroy();
        //Create an object to intercept late info
        global.playership[dummy] = instance_create(0, 0, obj_dud);         
   break;
   
   //A player is eliminated in a stock match
   case 4:
        //Send it to your chat
        if(global.team[dummy] = 1)
         newcolor = c_red;
        else
         newcolor = c_blue;
        chatline_add(global.othername[dummy]+" has been eliminated.", newcolor);
   break;
   
   //The stock match is over
   case 5:
        //Send it to your chat
        switch(readbyte(0))
        {
         case 1:         
              newcolor = c_maroon;
              if(global.team[global.mymid] = 1)
              {
               obj_mod.announcement_message = "Operation Failed";
               obj_mod.announcement_color = c_navy;
               global.outcome = 1;
              }
              else
              {
               obj_mod.announcement_message = "Operation Successful";
               obj_mod.announcement_color = c_navy;
               global.outcome = 0;
              }
         break;
         case 2:
              newcolor = c_navy;
              if(global.team[global.mymid] = 1)
              {
               obj_mod.announcement_message = "Operation Successful";
               obj_mod.announcement_color = c_maroon;
               global.outcome = 0;
              }
              else
              {
               obj_mod.announcement_message = "Operation Failed";
               obj_mod.announcement_color = c_maroon;
               global.outcome = 1;
              }
         break;
        }
        obj_mod.announcement_stage  = 1;
        obj_mod.announcement_alpha = 0;
        
        chatline_add(readstring(0), newcolor);
        switch(readbyte(0))
        {
         case 1:         
              newcolor = c_maroon;
         break;
         case 2:
              newcolor = c_navy;
         break;
        }
        chatline_add(readstring(0), newcolor);
        //Set time until returning to waiting room
        alarm[2] = 180;
   break;
      
   //Prediction Packet
   case 6:
        decomp = readbyte(0);
        prediction_decompress(decomp);
   break;  
   
   //Chat Message
   case 7:
        //Put the message in your chat
        chatline_add(readstring(0), c_white);
   break;

   //Ship checkin. Sets the correct image and ship-dependant variables 
   //for a player when it spawns
   case 9:
        global.playership[dummy].mid = readbyte(0);
        ship = readbyte(0);
        //If the player is on red team, set choose a red ship and set
        //the right values
        if(global.team[dummy] = 1)
         switch(ship)
         {
          case 1: //Alphastar
               global.playership[dummy].sprite_index = spr_alphastar;
               global.playership[dummy].ship_turning_rate = 5;
               global.playership[dummy].minspeed = 2;
               global.playership[dummy].velocity_maximum = 7;               
          break;
          case 2: //Swiftwing
               global.playership[dummy].sprite_index = spr_swiftwing;
               global.playership[dummy].ship_turning_rate = 8;
               global.playership[dummy].minspeed = 4;
               global.playership[dummy].velocity_maximum = 10;               
          break;
          case 3: //Goliath
               global.playership[dummy].sprite_index = spr_goliath;
               global.playership[dummy].ship_turning_rate = 3;
               global.playership[dummy].minspeed = 1;
               global.playership[dummy].velocity_maximum = 5;
          break;
         }
        else
        //If the player is on blue team, set choose a blue ship and set
        //the right values
         switch(ship)
         {
          case 1: //Alphastar
               global.playership[dummy].sprite_index = spr_alphastar_enemy;
               global.playership[dummy].ship_turning_rate = 5;
               global.playership[dummy].minspeed = 2;
               global.playership[dummy].velocity_maximum = 7;               
          break;
          case 2: //Swiftwing
               global.playership[dummy].sprite_index = spr_swiftwing_enemy;
               global.playership[dummy].ship_turning_rate = 8;
               global.playership[dummy].minspeed = 4;
               global.playership[dummy].velocity_maximum = 10;               
          break;
          case 3: //Goliath
               global.playership[dummy].sprite_index = spr_goliath_enemy;
               global.playership[dummy].ship_turning_rate = 3;
               global.playership[dummy].minspeed = 1;
               global.playership[dummy].velocity_maximum = 5;               
          break;
         }
   break;
  
   //Respawn Packet
   case 10:
        tele = instance_create(readushort(0), readushort(0), obj_teleport_other);
        tele.mid = dummy;
   break;  

   //Primary Switched
   case 11:
        global.playerprimary[dummy] = readbyte(0);
   break;
      
   //Change snapdir
   case 13:
        global.playership[dummy].snapdir = readbyte(0)-100;
   break;
   
   //Begin Firing Primary weapon
   case 14:
        global.primaryRNG[dummy] = readushort(0);
   break;

      //A Deathmatch is over
   case TIME_UP:
        chatline_add(readstring(0), c_maroon);
        chatline_add(readstring(0), c_blue);
        switch(readbyte(0))
        {
         case 0:
              chatline_add("The match has ended in a draw.", c_white);
         break;
         case 1:
              chatline_add("Red Team has won the match.", c_maroon);
         break;
         case 2:
              chatline_add("Blue Team has won the match.", c_navy);
         break;
        }
        alarm[2] = 180;
   break;
   
   //Begin Firing Primary weapon
   case 15:
        global.playership[dummy].ship_status_hacked = true;
        global.playership[dummy].alarm[5] = 90;        
   break;

    //A player leaves the game
   case CLIENT_DROP:
        //Get info from leaving player
        droppedname = readstring(0);
        //Destroy the removed player
        with(global.playership[dummy])
         instance_destroy();
        //Create a dud to intercept remaining messages
        global.playership[dummy] = instance_create(-2000, -2000, obj_dud);
        //Send a notice to your chat
        chatline_add(readstring(0), c_maroon)        
        if(global.team[dummy] = 0)
         chatcolor[4] = c_maroon;
        else
         chatcolor[4] = c_navy;
   break;
  }
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This part of the step event is the personal checks
//Things here will not be sent to/received by other players.

ping_frame_count += 1;
 
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
