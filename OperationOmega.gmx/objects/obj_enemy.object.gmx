<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alphastar_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prnt_enemy</parentName>
  <maskName>spr_shipmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize armor and shield
//Shield is the only important variable for this object. The shield effect
//will be shown dependant on it.
shield=100;
armor=100;
maxshield = 100;
shieldup = 1;
abilityactive = 0;
warping = -1;
beserk = 0;
beserking= 0;
heat = 50;
maxarmor = 100
stasismark = 100;
snapdir = 0;
nextturnblur = 0;
totalturnblur = 0;


//Initialize primary firing variables
shoot = 0;
shooting = 0;
newdir = 0;
flankcurve = 0;
stasislife = 0;
crossfiredist = 0;
siphontarget = 0;
oldspeeding = 0;

//Initialize prediction variables
thisturn = 0;
turning = 0;
speeding = 0;
shooting = 0;
//Set damage smoke and initialize smoke alarm(lol)
smoke = 6;
alarm[2] = 1;
//Set default movement values to prevent error
autoturn = 2;
forceturn = 5;
minspeed = 2;
maxspeed = 7; 
controlturn = 0.75;
//Initialize Hacker Mine hack variable
hacked = false;
//Initialize Shock Missile shock variable
shocked = false;
//Initialize facedir. This is your target direction
facedir = direction;

dusted = 0;
controlling = true;
//Initialize flame trail particles
deployhits = 0;
system = part_system_create();

//Initialize Chain control
chain = 0;

//Initialize flame effect
for(i = 0; i &lt;= 11; i += 1)
{
 flamelife[i] = 0;
 flamex[i] = 0;
 flamey[i] = 0;
 flamedir[i] = 0;
 flameimage[i] = 0;
}
nextflame = 0;
alarm[10] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop(snd_stardust);
sound_stop(snd_whip);
//Destroy any shield effect that might be on this ship
with(obj_hit)
{
 if(hurting = other.id)
  instance_destroy();
}
//If this ship was targeted, reset targeting
if(obj_mod.foundtarget = id)
 obj_mod.foundtarget = -1;
//Destroy all flame trails
for(i = 0; i &lt; deployhits; i += 1)
 part_emitter_destroy(system, emit[i]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Handle Chain
if(!instance_exists(chainer))
{
 chained = 0;
 exit;
}
if(chainer = obj_ship)
 if(chainer.chaining = 0)
  chained = 0;
if(chainer.shooting = 1 &amp;&amp; chained = 1)
{
 //If there is shield left, create effect
 if(shieldup = 1)
 {
  hurt = instance_create(0, 0, obj_hit);
  hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
  hurt.hurting = id;
 }
 alarm[11] = 11;
}
else
 chained = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>        if(global.team[mid] = 1)
         switch(global.lolship[mid])
         {
          case 1: //Alphastar
               sprite_index = spr_alphastar;
               autoturn = 2*global.framerate;
               forceturn = 5*global.framerate;
               minspeed = 2*global.framerate;
               maxspeed = 7*global.framerate;
               controlturn = 0.75*global.framerate;
          break;
          case 2: //Swiftwing
               sprite_index = spr_swiftwing;
               autoturn = 3*global.framerate;
               forceturn = 8*global.framerate;
               minspeed = 4*global.framerate;
               maxspeed = 10*global.framerate;               
               controlturn = 1.2*global.framerate;
          break;
          case 3: //Goliath
               sprite_index = spr_goliath;
               autoturn = 1*global.framerate;
               forceturn = 3*global.framerate;
               minspeed = 1*global.framerate;
               maxspeed = 5*global.framerate;
               controlturn = 0.5*global.framerate;
          break;
         }
        else
        //If the player is on blue team, set choose a blue ship and set
        //the right values
         switch(global.lolship[mid])
         {
          case 1: //Alphastar
               sprite_index = spr_alphastar_enemy;
               autoturn = 2*global.framerate;
               forceturn = 5*global.framerate;
               minspeed = 2*global.framerate;
               maxspeed = 7*global.framerate;               
               controlturn = 0.75*global.framerate;
          break;
          case 2: //Swiftwing
               sprite_index = spr_swiftwing_enemy;
               autoturn = 3*global.framerate;
               forceturn = 8*global.framerate;
               minspeed = 4*global.framerate;
               maxspeed = 10*global.framerate;               
               controlturn = 1.2*global.framerate;
          break;
          case 3: //Goliath
               sprite_index = spr_goliath_enemy;
               autoturn = 1*global.framerate;
               forceturn = 3*global.framerate;
               minspeed = 1*global.framerate;
               maxspeed = 5*global.framerate;               
               controlturn = 0.5*global.framerate;
          break;
         }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset stardust hit limiter
dusted = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stardust
//If there are parts of the attack left, reset the alarm
//to create them
if(global.sfxtoggle = 0)
    audio_emitter_position(emit_whip, (view_xview[0]+view_wview[0]/2)-x, y-(view_yview[0]+view_hview[0]/2), 0);

repeat(global.framerate)
{
if(whips &gt; 0)
{
alarm[8] = 1;
whips -= 1;
}
else
    if(global.sfxtoggle = 0)
    {
        audio_stop_sound(sound_whip);
        audio_emitter_free(emit_whip);
    }
//Set target direction
aim = point_direction(x, y, hitx, hity);
//Get movement speed of the current bullet
switch(whips)
{
 case 19:
      whipspeed = 12*global.framerate;
 break;
 case 18:
      whipspeed = 10*global.framerate;
 break;
 case 17:
      whipspeed = 8*global.framerate;
 break;
 case 16:
      whipspeed = 6*global.framerate;
 break;
 case 15:
      whipspeed = 4*global.framerate;
 break;
 case 14:
      whipspeed = 2*global.framerate;
 break;
 case 13:
      whipspeed = 3*global.framerate;
 break;
 case 12:
      whipspeed = 4*global.framerate;
 break;
 case 11:
      whipspeed = 5.5*global.framerate;
 break;
 case 10:
      whipspeed = 7*global.framerate;
 break;
 case 9:
      whipspeed = 8.5*global.framerate;
 break;
 case 8:
      whipspeed = 10*global.framerate;
 break;
 case 7:
      whipspeed = 12*global.framerate;
 break;
 case 6:
      whipspeed = 14*global.framerate;
 break;
 case 5:
      whipspeed = 16*global.framerate;
 break;
 case 4:
      whipspeed = 19*global.framerate;
 break;
 case 3:
      whipspeed = 18*global.framerate;
 break;
 case 2:
      whipspeed = 16*global.framerate;
 break;
 case 1:
      whipspeed = 14.5*global.framerate;
 break;
 case 0:
      whipspeed = 13*global.framerate;
 break;
}
bullet = bullet_create(x, y, "Whip", aim, mid, whipspeed);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destroy all burn trail effects ad reset effect counter
for(i = 0; i &lt; deployhits; i += 1)
 part_emitter_destroy(system, emit[i]);
depoyhits = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>abilityactive = 0;
maxspeed = 5;
forceturn = 3;
if(speed &gt; 5)
    speed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(smoke &lt; 6)
{
    //Select a color
    if(smoke &gt; 3) 
        effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_gray);
    else
        switch(irandom(5))
        {
            case 1:
                effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_gray);
            break;
            case 2:
                effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_dkgray);
            break;
            default:
                //Make a random color somewhere between pure red and pure yellow
                create_burning(x-6+random(12), y-6+random(12));
            break;
        }
}
//Set the time until the next smoke effect, dependant on how bad smoking is
alarm[2]=(6*smoke+10)/global.framerate;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stardust
//If there are parts of the attack left, reset the alarm
//to create them

repeat(global.framerate)
{
if(stardust &gt; 0)
{
alarm[1] = 1;
stardust -= 1;
}

//Set target direction
aim = point_direction(x, y, hitx, hity);
//Create a stardust part
fuse = instance_create(x, y, obj_stardust_enemy);
fuse.mid = mid;
fuse.amplified = staramp;
//Set movement dependant on which part it is
switch(stardust)
{
 case 24:
      fuse.speed = 11*global.framerate;
      fuse.direction = aim;
 break;
 case 23:
      fuse.speed = 13*global.framerate;
      fuse.direction = aim+11;
 break;
 case 22:
      fuse.speed = 7*global.framerate;
      fuse.direction = aim-17;
 break;
 case 21:
      fuse.speed = 9*global.framerate;
      fuse.direction = aim+7;
 break;
 case 20:
      fuse.speed = 15*global.framerate;
      fuse.direction = aim+21;
 break;
 case 19:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim-9;
 break;
 case 18:
      fuse.speed = 12*global.framerate;
      fuse.direction = aim+1;
 break;
 case 17:
      fuse.speed = 8*global.framerate;
      fuse.direction = aim-13;
 break;
 case 16:
      fuse.speed = 14*global.framerate;
      fuse.direction = aim+19;
 break;
 case 15:
      fuse.speed = 13*global.framerate;
      fuse.direction = aim-25;
 break;
 case 14:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim+5;
 break;
 case 13:
      fuse.speed = 14*global.framerate;
      fuse.direction = aim-15;
 break;
 case 12:
      fuse.speed = 12*global.framerate;
      fuse.direction = aim+17;
 break;
 case 11:
      fuse.speed = 15*global.framerate;
      fuse.direction = aim-5;
 break;
 case 10:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim+13;
 break;
 case 9:
      fuse.speed = 8*global.framerate;
      fuse.direction = aim-23;
 break;
 case 8:
      fuse.speed = 13*global.framerate;
      fuse.direction = aim+9;
 break;
 case 7:
      fuse.speed = 9*global.framerate;
      fuse.direction = aim-1;
 break;
 case 6:
      fuse.speed = 12*global.framerate;
      fuse.direction = aim+15;
 break;
 case 5:
      fuse.speed = 15*global.framerate;
      fuse.direction = aim-11;
 break;
 case 4:
      fuse.speed = 10*global.framerate;
      fuse.direction = aim-19;
 break;
 case 3:
      fuse.speed = 11*global.framerate;
      fuse.direction = aim-7;
 break;
 case 2:
      fuse.speed = 9*global.framerate;
      fuse.direction = aim+3;
 break;
 case 1:
      fuse.speed = 14*global.framerate;
      fuse.direction = aim-21;
 break;
 case 0:
      fuse.speed = 8*global.framerate;
      fuse.direction = aim+25;
 break;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Fusion
//If there are parts of the attack left, reset the alarm
//to create them
if(fusions &gt; 0)
{
alarm[0] = 5/global.framerate;
}
fusions -= 1;
//Create a fusion part
fuse = instance_create(x, y, obj_fusion_enemy);
//Set its movement
fuse.speed = 10*global.framerate;
fuse.direction = 60*fusions;
//Set its target location
fuse.targetx = hitx;
fuse.targety = hity;
fuse.mid = mid;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change the angle of the ship
image_angle = facedir;

//update the direction of this ship
prespeed = speed;
//Handle abilities
if(global.lolship[mid] = 1)
 if(abilityactive = 1)
 {
  controlturn = 0.1
 }
 else
 {
  controlturn = prespeed/7
 }
hspeed += lengthdir_x(controlturn, facedir);
vspeed += lengthdir_y(controlturn, facedir);
speed = prespeed;
//Handle swiftwing warping
if(warping &gt; -1)
{
 //Perform the warp at the 15th frame
 if(warping = 30)
 {
  x = warpx;
  y = warpy;
 }
 //Return to the normal sprite at the last frame
 if(warping = 0)
 {
  sprite_index = spr_swiftwing_enemy;
  if(global.team[global.mymid] = 2)
   sprite_index = spr_swiftwing;
 }
 //Count toward the next frame
 warping -= 1;
} 
if(beserk = 1) beserking += 1;

//Update burn trail effect positions
for(i = 0; i &lt; deployhits; i += 1)
 part_emitter_region(system, emit[i], x+lengthdir_x(8, facedir+effectdir[i]), x+lengthdir_x(8, facedir+effectdir[i]), y+lengthdir_y(8, facedir+effectdir[i]), y+lengthdir_y(8, facedir+effectdir[i]), ps_shape_ellipse, ps_distr_linear);

if(hacked = true)
{
 thisturn = 0;
 turning = 0;
 speeding = 2;
}

//Predict base turning
switch(thisturn)
{
 case 1:
      facedir -= 3;
 break;
 case 2:
      facedir += 3;
 break;
}
//Predict secondary turning
switch(turning)
{
 case 1:
      facedir -= forceturn;
 break;
 case 2:
      facedir += forceturn;
 break;
}

if(facedir &gt; 360)
    facedir -= 360;
if(facedir &lt; 0)
    facedir += 360;

//Predict speed
speedmin = minspeed;
switch(speeding)
{
 case 1:
      if(speed &gt; 0)
      {
            if(oldspeeding != 1)
            {
                boosteffect = instance_create(x+lengthdir_x(8, image_angle-180), y+lengthdir_y(8, image_angle-180), obj_boosteffect)
                boosteffect.image_angle = image_angle;
            }
            speed += 0.2;   
      } 
      oldspeeding = 1;
      if(speed &gt; maxspeed)
       speed = maxspeed;
      if(speed &gt; 4 &amp;&amp; chained = 1)
       speed = 4;
 break;
 case 2:
      if(speed &gt; 0)
      {
       speed -= 0.2;
      }      
        oldspeeding = 0;
       speedmin = 0;
 break;
 case 3:
      if(speed &gt; 0)
      {
            if(oldspeeding != 1)
            {
                boosteffect = instance_create(x+lengthdir_x(8, image_angle-180), y+lengthdir_y(8, image_angle-180), obj_boosteffect)
                boosteffect.image_angle = image_angle;
            }
            speed += 0.2;   
      } 
      oldspeeding = 1;
      if(speed &gt; maxspeed+3)
       speed = maxspeed+3;
      if(speed &gt; 4 &amp;&amp; chained = 1)
       speed = 4;
 break;
 case 0:
    oldspeeding = 0;
 break;
}
//Lower speed
if(speed &gt; speedmin) 
 speed -= 0.04; 
else 
 speed = speedmin;
 
//Primary weapon fire delay
shoot -= 1;

//Disbale shooting if hacked
if(hacked = true || shooting = 0) exit;

if(shoot &lt;= 0)
{
 switch(global.playerprimary[mid])
 {
 
  //Needle Primary
  case 1:
        shoot = 7;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_aqua);
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 10);      
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Needle", (direction+(snapdir*5))-3+primary_random(6, mid), mid, 0);
  break;
  
  //Sonic
  case 2:
        shoot = 4;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, make_color_rgb(152, 77, 7));
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 5);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Sonic", (direction+(snapdir*5))-7+primary_random(14, mid), mid, 0);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Sonic", (direction+(snapdir*5))-7+primary_random(14, mid), mid, 0);
  break;
  
  //Wave
  case 3:
        shoot = 15;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_purple);
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 15);
        //Create the shot and give it speed and facedir
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Wave", (direction+(snapdir*5))-1+primary_random(2, mid), mid, 0);
  break;

  //Flank
  case 4:
        shoot = 10;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_orange);
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 10);
        //Create the shot and give it speed and facedir
        sfx_play(snd_flank, x, y);
        flank = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_flank_enemy);
        flank.speed = 7+speed;
        flank.direction = (direction+(snapdir*5))-7+primary_random(14, mid);
        flank.mid = mid;
        flank.target = flankcurve;
  break;
  
  //Chain
  case 5:
        //Create an effect
         part_type_color1(obj_partsystem.primarypart, c_aqua);
         part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
         part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
         if(global.psplasheffect = 1)
          part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 10);
         //Create the shot and give it speed and facedir
        stasisslow = 0; 
        shoot = 25; 
        global.checkmid = mid;                       
        with(obj_enemystasis_field)
            if(mid = global.checkmid &amp;&amp; slowing = 1)
                global.playership[global.checkmid].stasisslow = 1;
        sfx_play(snd_stasis, x, y);
        bullet = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_stasisnew_enemy);
        bullet.direction = (direction+(snapdir*5));
        bullet.speed = 7+speed;
        bullet.mid = mid;
        if(stasisslow = 1)
            shoot = 20;
  break;

  //Crossfire
  case 6:
        shoot = 9;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_fuchsia);
        part_type_speed(obj_partsystem.primarypart,1.68,2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-230,facedir+230,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 10);
        sfx_play(snd_helix, x, y);
        //Create the shot and give it speed and facedir
        cross = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_crossfire_enemy);
        cross.speed = 7+speed;
        cross.direction = (direction+(snapdir*5));
        cross.mid = mid;
        cross.side = 1;
        //Create the shot and give it speed and facedir
        cross = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_crossfire_enemy);
        cross.speed = 7+speed;
        cross.direction = (direction+(snapdir*5));
        cross.mid = mid;
        cross.side = 2;
  break;
   
  //Siphon
  case 7:
        shoot = 12;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_aqua);
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 5);
        //Check if the target is nearby
        if(siphontarget = 10) break;
        if(siphontarget = global.mymid)
         siphonship = obj_ship;
        else
         siphonship = global.playership[siphontarget];
        if(point_distance(x, y, siphonship.x, siphonship.y) &gt; 400) break;
        //Check if the target is withing firing angle
        point = point_direction(x, y, siphonship.x, siphonship.y);
        if(aim_limit(facedir, point, 30) != point) break;
        //Create the shot and give it speed and facedir
        sfx_play(snd_siphon, x, y);
        siphon = instance_create(0, 0, obj_siphon_enemy);
        siphon.mid = mid;
        siphon.targetmid = siphontarget;
  break;
  
  //Double Primary
  case 8:
        shoot = 10;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_maroon);
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 10);
        addshotdir = -5+primary_random(10, mid); 
        sfx_play(snd_double, x, y);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Double", (direction+(snapdir*5))+addshotdir, mid, 0);
        enemynear = instance_nearest(x, y, prnt_ally);
        if(instance_exists(enemynear))
            newdir = aim_limit(facedir-180, point_direction(x, y, enemynear.x, enemynear.y), 30)-180;
        else
            newdir = (direction+(snapdir*5))
        bullet = bullet_create(x+lengthdir_x(9, facedir-180), y+lengthdir_y(9, facedir-180), "Double", newdir-180, mid, 0);
  break;

  //Pierce Primary
  case 9:
        shoot = 7;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_aqua);
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 10);      
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Pierce", (direction+(snapdir*5))-4+primary_random(8, mid), mid, 0);
  break;
  
  //Spread Primary
  case 10:
        shoot = 20;
        //Create an effect
        part_type_color1(obj_partsystem.primarypart, c_maroon);
        part_type_speed(obj_partsystem.primarypart,speed+1.68,speed+2.80,-0.04,0);
        part_type_direction(obj_partsystem.primarypart,facedir-50,facedir+50,0,0);
        if(global.psplasheffect = 1)
         part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart, 30);
        addshotdir = -5+primary_random(10, mid); 
        sfx_play(snd_spread, x, y);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", (direction+(snapdir*5))+addshotdir, mid, 0);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", (direction+(snapdir*5))-15+addshotdir, mid, 0);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", (direction+(snapdir*5))-30+addshotdir, mid, 0);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", (direction+(snapdir*5))-45+addshotdir, mid, 0);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", (direction+(snapdir*5))+15+addshotdir, mid, 0);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", (direction+(snapdir*5))+30+addshotdir, mid, 0);
        bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", (direction+(snapdir*5))+45+addshotdir, mid, 0);
  break;

 }
}

 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prnt_allydeploy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_splitmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel if this ship was the last targeted
if(other.oldmid = mid)
 exit;
//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious)
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Split into two missiles.
if(other.damage &gt; 4)
{
 other.split = instance_create(other.x, other.y, obj_splitmissile);
 other.split.mid = other.mid;
 other.split.direction = other.direction-30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
 other.split = instance_create(other.x, other.y, obj_splitmissile);
 other.split.mid = other.mid;
 other.split.direction = other.direction+30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
}

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.mid != mid || other.recollect = 0)
 exit;

with(other)
{
 collected = 1;
 sfx_play(snd_pickup, x, y);
 instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hermitmissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
effectdir[deployhits] = point_direction(x, y, other.xprevious, other.yprevious);

//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = effectdir[deployhits];
 hurt.hurting = id;
}

//Create burning trail effect
if(global.dflameseffect = 1)
{
 emit[deployhits] = part_emitter_create(system);
 part_emitter_region(system, emit[deployhits], x+lengthdir_x(8, effectdir[deployhits]), x+lengthdir_x(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), y+lengthdir_y(8, effectdir[deployhits]), ps_shape_ellipse, ps_distr_linear);
 part_emitter_stream(system, emit[deployhits], obj_partsystem.deployhit, 2);
 effectdir[deployhits] =  direction-effectdir[deployhits];
 alarm[7] = 60/global.framerate;
 deployhits += 1;
}

//Shake the screen if in range
if(point_distance(x, y, obj_ship.x, obj_ship.y) &lt; view_wview[0]/2)
 obj_mod.viewpos = 4;

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_storm">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
sfx_play(snd_hit, x, y);
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spiral">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;

sfx_play(snd_hit, x, y);
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stardust">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
sfx_play(snd_hit, x, y);

//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stasis_field">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed &gt; 4)
    speed = 4;
other.slowing = 1;
other.alarm[2] = 3;


if(other.damaged[mid] = 1)
    exit;
other.damaged[mid] = 1;
sfx_play(snd_hit, x, y);

//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crossfire">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
sfx_play(snd_hit, x, y);
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flank">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
sfx_play(snd_hit, x, y);
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prnt_allyattack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cancel the collision if a pulse is active
closepulse = instance_nearest(x, y, obj_shieldpulse_enemy);
if(closepulse != noone)
 if(closepulse.mid = mid)
 exit;
sfx_play(snd_hit, x, y);
//If there is shield left, create effect
if(shieldup = 1)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Destroy the attack
with(other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the player's name
draw_set_alpha(0.7);
draw_set_font(fnt_chat);
if(global.team[global.mymid] = 1)
 draw_set_color(c_navy);
else
 draw_set_color(c_red);
draw_text((x-view_xview[0])/obj_mod.scaling, (y-48-view_yview[0])/obj_mod.scaling, thisname);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_flame(direction);
draw_turnblur();
//Draw the ship
draw_sprite_ext(sprite_index, -1, x, y, 1, 1, image_angle, c_white, 1);
if(abilityactive = 1 &amp;&amp; (sprite_index = spr_goliath || sprite_index = spr_goliath_enemy))
    draw_sprite_ext(spr_goliath_hyperrush, nextflame, x, y, 1, 1, image_angle, c_white, 1);
if(shocked = true)
 draw_sprite_ext(spr_shocksparks, nextflame, x, y, 1, 1, 0, c_white, 0.8);
if(beserk = true &amp;&amp; warping = -1)
 draw_sprite_ext(spr_swiftwing_beserkglow, beserking, x, y, 1, 1, image_angle, c_white, 1);

//Draw the flame trail particles
part_system_drawit(system);
 


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,11</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
