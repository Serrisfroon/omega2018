<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alphastar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prnt_ship</parentName>
  <maskName>spr_shipmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Perform code exclusive to the player-controlled ship

//Start following this object
view_object = id;

//Set the current primary to your selected primary
current_primary = global.primary;
//Set the current ship to your selected ship
current_ship = global.shipselect;

//This is your player's ship
global.playership[global.mymid] = id;

//Set the ship's mid
mid = global.mymid;

//Set a new spawn point at random
nextspawn = irandom(7);
global.myspawnx = global.spawnx[nextspawn];
global.myspawny = global.spawny[nextspawn];

event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_splitmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.visible = 0)
    exit;
if(other.damage &gt; 4)
{
 other.split = instance_create(other.x, other.y, obj_splitmissile_enemy);
 other.split.mid = other.mid;
 other.split.direction = other.direction-30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
 other.split = instance_create(other.x, other.y, obj_splitmissile_enemy);
 other.split.mid = other.mid;
 other.split.direction = other.direction+30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
}
attack_collision(other.damage, other.damage, 0, 8, "Split Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.mid != global.mymid || other.recollect = 0)
 exit;
//Take the mine away from your mine count
//Take from the correct deploy count
for(i = 1; i &lt;= 4; i += 1)
{
 if(global.secondary[i] = 28)
    if(global.secondary_stock[i] != obj_mod.max_secondary_stock[i])
    {
        global.secondary_stock[i] += 1;
    }

}

with(other)
{
 collected = 1;
 sfx_play(snd_pickup, x, y);
 instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hackermine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(attack_collision(6, 11, 0, 8, "Hacker Mine") = 1)
{
    ship_status_hacked = true;
    ship_disabled = true;
    alarm[5] = 90;
    //Send the information
    clearbuffer(0);
    packet_label_write(15, global.mymid);
    //Send to everyone if host
    if(global.master = true)
        client_sendall(0, 0);
    else
        //Send to host if client
        sendmessage(global.host, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shockmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(attack_collision(10, 10, 0, 8, "Shock Missile") = 1)
{
    if(ship_status_shocked = false)
    {
        ship_status_shocked = true;
        energy_regeneration_base /= 3;
        if(energy_regeneration &gt; energy_regeneration_base)
            energy_regeneration = energy_regeneration_base;
    }
    if(other.amplified = 0)
        alarm[6] = 600;
    else
        alarm[6] = 900;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_locustmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(invincible = 0.7)
    exit;



//Check if there's a nearby paladin turret
var shielded;
shielded = 1;
if(instance_exists(obj_turret))
    if(distance_to_object(instance_nearest(x, y, obj_turret)) &lt; 400)
        shielded = 2;
//Take damage
if(invincible = 1)
{
    //Check if under shock effect
   if(ship_status_shocked = false)
        shield -= 3/shielded;
    else
    {
        shield -= 1;
        armor -= 2;
    }

    //If there is no more shield, transfer damage to armor
    if(shield &lt; 0) 
    {
        //Do double damage to armor
        armor += shield*1.167;
        shield = 0;
    }
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}


//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (armor_maximum*100)/60)
 smoke = floor(armor/(armor_maximum/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
    //Take note of the player that defeated you
    defeatmid = other.mid;
    //Make a defeat message
    if(global.ships &gt; 1)
        random_message(global.othername[other.mid], global.name, "Locust Missile");
    else
        message = global.othername[other.mid]+" ELIMINATED "+global.name+".(Locust Missile)";

    //Destroy this object
    event_perform(ev_other, ev_user2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_layermissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var directdir, regdmg, penedmg;
//Find out ideal direction for a "direct hit"
var directdir = point_direction(other.x, other.y, x, y);
//Base connection damage and explosion
var penedmg = 15;
var regdmg = 10+other.bonusdamage;
other.hits = 1;

//If the missile's direction is near the ideal direction, add more damage and explosion
if(directdir &gt;= other.direction-4 &amp;&amp; directdir &lt;= other.direction+4)
{
    penedmg += 20;
    regdmg += 10;
    other.hits = 2;
}
//If the missile's direction is VERY close to the ideal direction, add even more damage and explosion
if(directdir &gt;= other.direction-1 &amp;&amp; directdir &lt;= other.direction+1)
{
    penedmg += 25;
    regdmg += 10;
    other.hits = 3;
}

attack_collision(regdmg, penedmg, 0, 8, "Layer Missile");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemystasis_field">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed &gt; 3)
    speed = 3;
stasis_slow_timer = 20; 
chained = 1;
other.slowing = 1;
other.alarm[2] = 3;


if(other.damaged[global.mymid] = 1)
    exit;
other.damaged[global.mymid] = 1;
sfx_play(snd_hit, x, y);

//Take damage
if(ship_status_shocked = false)
 shield -= 1;
else
{
 armor -= 1;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Update smoking
if(armor &lt;= (armor_maximum*100)/60)
 smoke = floor(armor/(armor_maximum/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
    //Take note of the player that defeated you
    defeatmid = other.mid;
    //Make a defeat message
    if(global.ships &gt; 1)
        random_message(global.othername[other.mid], global.name, "Stasis");
    else
        message = global.othername[other.mid]+" ELIMINATED "+global.name+".(Stasis)"
    //Destroy this object
    event_perform(ev_other, ev_user2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="prnt_enemyattack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(other.attack_damage, other.attack_burst, other.attack_threshold, 
                        other.attack_shake, other.attack_name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do nothing if the ship is disabled from hacked status or chatting
if(ship_disabled = true) 
    exit;

//Accelerate- increse speed until a max speed is reached
if(speed &lt; velocity_maximum)
    speed += 0.2;

//Disable acceleration if under stasis effect
if(stasis_slow_timer &gt; 0)
{
    stasis_slow_timer -= 1;
    if(speed &gt; 3)
        speed = 3;    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do nothing if the ship is disabled from hacked status or chatting
if(ship_disabled = true) 
    exit;

//Rotate the ship clockwise by its turning rate
facedir -= ship_turning_rate;
//Keep facedir at or below 360
if(facedir &lt; 0) facedir += 360;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do nothing if the ship is disabled from hacked status or chatting
if(ship_disabled = true) 
    exit;

//Rotate the ship counter-clockwise by its turning rate
facedir += ship_turning_rate;
//Keep facedir at or below 360
if(facedir &gt; 360) facedir -= 360;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.activated[mid] != 1) 
    exit;
//Switch the primary firing flag to false
multiplayer_primary_fire_flag = false;

//Have to controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.activated[mid] != 1) 
    exit;
current_secondary = global.secondary[secondary_selected];
current_secondary_type = global.secondary_type[secondary_selected];
current_secondary_cost = global.secondary_cost[secondary_selected];
current_secondary_stock = global.secondary_stock[secondary_selected];
current_secondary_object = global.secondary_object[secondary_selected];
current_secondary_lockon_required = global.secondary_lockon_required[secondary_selected];
current_secondary_selected = secondary_selected;
current_target_x = mouse_x;
current_target_y = mouse_y;

//Pull the mid from the targeted object if you are targeting a player
if(obj_mod.targeted_object = -1)
    current_target_object = -1;
else
    current_target_object = obj_mod.targeted_object.mid;

amplified = 0;

event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.activated[mid] != 1) 
    exit;
//Switch the primary firing flag to true
multiplayer_primary_fire_flag = true;

//Have to controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Disbale shooting if hacked or overheated
if(ship_status_hacked = true || global.activated[mid] = 2) 
    exit;
//Disable chatting if currently in chat mode
obj_mod.chat_open = false;

//Set the direction to aim at
primary_direction = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;  

//Perform the primary firing event
event_perform(ev_other, ev_user1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do nothing if the ship is disabled from hacked status or chatting
if(ship_disabled = true || stasis_slow_timer &gt; 0) 
    exit;

//Adjust the acceleration prediction variable
predictspeed = 1;

//Create a boosting effect
boosteffect = instance_create(x+lengthdir_x(8, image_angle-180), y+lengthdir_y(8, image_angle-180), obj_boosteffect)
boosteffect.image_angle = image_angle;
boosteffect.source = obj_player;

//Have the controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do nothing if the ship is disabled from hacked status or chatting
if(ship_disabled = true) 
    exit;

//Adjust the acceleration prediction variable
predictspeed = 2;
//Have the controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Do nothing if the ship is disabled from hacked status or chatting
if(ship_disabled = true) 
    exit;

//Adjust the turning prediction variable
predictturn = 1;
//Have the controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Do nothing if the ship is disabled from hacked status or chatting
if(ship_disabled = true) 
    exit;

//Adjust the turning prediction variable
predictturn = 2;
//Have the controller object send a refresh packet
obj_mod.update_packet_timer = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.activated[mid] != 1) 
    exit;
current_secondary = global.secondary[4];
current_secondary_type = global.secondary_type[4];
current_secondary_cost = global.secondary_cost[4];
current_secondary_stock = global.secondary_stock[4];
current_secondary_object = global.secondary_object[4];
current_secondary_lockon_required = global.secondary_lockon_required[4];
current_secondary_selected = 4;
current_target_x = mouse_x;
current_target_y = mouse_y;

//Pull the mid from the targeted object if you are targeting a player
if(obj_mod.targeted_object = -1)
    current_target_object = -1;
else
    current_target_object = obj_mod.targeted_object.mid;


amplified = 1;

event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keypress, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(global.activated[mid] != 1) 
    exit;
if(ability_cooldown_timer &gt; 0)
    exit;
ability_cooldown_timer = ability_cooldown;

switch(global.shipselect)
{
    case 1:
        ship_ability_active_flag = true;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(21, 0);//Treat pulse as a secondary
        writebyte(1, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    case 2:
        //Exit if already warping, not enough energy, or overheated
        if(hornet_warp != -1)
            exit;
            
        //Find the distance to the cursor
        dist = min(400, point_distance(x, y, mouse_x, mouse_y));
        //Warp towards the cursor
        warpdir = point_direction(x, y, mouse_x, mouse_y);
        warpx = x+lengthdir_x(dist, warpdir);
        warpy = y+lengthdir_y(dist, warpdir);
        //Don't warp if you would warp into a wall
        if(collision_point(warpx, warpy, obj_wall, 1, 1))
            exit;
            
        //Play a sound effect
        sfx_play(snd_swifttele, x, y);

        //Begin warp, use energy and heat
        hornet_warp = 40;
        //swiftteled = instance_create(x, y, obj_swifttele);
        view_object = swiftteled;
        swiftteled.hspeed = (warpx-x)/10;
        swiftteled.vspeed = (warpy-y)/10;
        
        //Change sprite to show warp
        sprite_index = spr_swiftwing_warp;
        if(global.team[global.mymid] = 2)
            sprite_index = spr_swiftwing_warp_enemy;
        
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(35, 0);//Treat warp as a secondary
        writeshort(warpx, 0);
        writeshort(warpy, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    case 3:
        //Create pulse
        ship_turning_rate = 8;
        velocity_maximum = 10;
        speed = 10;
        ship_ability_active_flag = true;
        alarm[3] = 60;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(21, 0)//Treat pulse as a secondary
        writebyte(1, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keypress, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do nothing if the ship is disabled from hacked status or chatting, or is affected by stasis
if(ship_disabled = true || stasis_slow_timer &gt; 0) exit;

//Adjust the accelration prediction variable
predictspeed = 0;
//Have to controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Adjust the acceleration prediction variable
predictspeed = 0;
//Have the controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Adjust the turning prediction variable
predictturn = 0;
//Have the controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Adjust the turning prediction variable
predictturn = 0;
//Have the controller object send a refresh packet
obj_mod.update_packet_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,11</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
