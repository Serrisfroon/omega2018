<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>creates = 7;
alarm[0] = 1;
amplified = 0;
sfx_play(snd_horizon, x, y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 9;
image = 0;
if(global.allycolor != c_red)
    image = 1;
if(amplified = 0)
{
for(i = 1; i &lt;= obj_bulletcontrol.bulletmax+1; i += 1)
{
 if(obj_bulletcontrol.bulletfree[i] = false) continue;
 obj_bulletcontrol.bulletfree[i] = false;
 //The bullet type is also the sprite
 obj_bulletcontrol.bullettype[i] = spr_horizon;
 //The bullet's coordinates
 obj_bulletcontrol.bulletx[i] = x+lengthdir_x(25*creates, direction-90);
 obj_bulletcontrol.bullety[i] = y+lengthdir_y(25*creates, direction-90);
    part_particles_create(obj_partsystem.system, obj_bulletcontrol.bulletx[i], obj_bulletcontrol.bullety[i], obj_partsystem.horizonflare[global.team[mid]-1], 2); 
 //The bullet's vspeed and hspeed
 obj_bulletcontrol.bullethspeed[i] = hspeed;
 obj_bulletcontrol.bulletvspeed[i] = vspeed;
 //The bullet's direction. Used for drawing at the right angle
 obj_bulletcontrol.bulletdirection[i] = direction;
 //The bullet's blend atribute. It shows what team it belongs to
 obj_bulletcontrol.bulletblend[i] = global.allycolor;
 obj_bulletcontrol.bulletsingle[i] = image;
 //The bullet's life. Each step, it is lowered by one. At 0, this index is freed.
 obj_bulletcontrol.bulletlife[i] = 120;
 //The bullet's damage. Stored to make loops much easier
 obj_bulletcontrol.bulletdamage[i] = 5;
 //The bullet's death object. When a bullet has a collision, this object is created.
 obj_bulletcontrol.bulletend[i] = obj_generic_hit;     
 //The bullet's multiplayer id. This will trace the bullet to the player who shot it.
 obj_bulletcontrol.bulletmid[i] = global.mymid;
 //The bullet's name. Stored for ease of use
 obj_bulletcontrol.bulletname[i] = "Horizon";
 //The bullet's mask radius. Used for collision checking with ships
 obj_bulletcontrol.bulletmask[i] = 8;    
 if(i = obj_bulletcontrol.bulletmax+1) obj_bulletcontrol.bulletmax += 1;
 break;
}
for(i = 1; i &lt;= obj_bulletcontrol.bulletmax+1; i += 1)
{
 if(obj_bulletcontrol.bulletfree[i] = false) continue;
 obj_bulletcontrol.bulletfree[i] = false;
 //The bullet type is also the sprite
 obj_bulletcontrol.bullettype[i] = spr_horizon;
 //The bullet's coordinates
 obj_bulletcontrol.bulletx[i] = x+lengthdir_x(25*creates, direction+90);
 obj_bulletcontrol.bullety[i] = y+lengthdir_y(25*creates, direction+90);
    part_particles_create(obj_partsystem.system, obj_bulletcontrol.bulletx[i], obj_bulletcontrol.bullety[i], obj_partsystem.horizonflare[global.team[mid]-1], 2); 
 //The bullet's vspeed and hspeed
 obj_bulletcontrol.bullethspeed[i] = hspeed;
 obj_bulletcontrol.bulletvspeed[i] = vspeed;
 //The bullet's direction. Used for drawing at the right angle
 obj_bulletcontrol.bulletdirection[i] = direction;
 //The bullet's blend atribute. It shows what team it belongs to
 obj_bulletcontrol.bulletblend[i] = global.allycolor;
 obj_bulletcontrol.bulletsingle[i] = image;
 //The bullet's life. Each step, it is lowered by one. At 0, this index is freed.
 obj_bulletcontrol.bulletlife[i] = 120;
 //The bullet's damage. Stored to make loops much easier
 obj_bulletcontrol.bulletdamage[i] = 5;
 //The bullet's death object. When a bullet has a collision, this object is created.
 obj_bulletcontrol.bulletend[i] = obj_generic_hit;     
 //The bullet's multiplayer id. This will trace the bullet to the player who shot it.
 obj_bulletcontrol.bulletmid[i] = global.mymid;
 //The bullet's name. Stored for ease of use
 obj_bulletcontrol.bulletname[i] = "Horizon";
 //The bullet's mask radius. Used for collision checking with ships
 obj_bulletcontrol.bulletmask[i] = 8;    
 if(i = obj_bulletcontrol.bulletmax+1) obj_bulletcontrol.bulletmax += 1;
 break;
}
}
else
{
for(i = 1; i &lt;= obj_bulletcontrol.bulletmax+1; i += 1)
{
 if(obj_bulletcontrol.bulletfree[i] = false) continue;
 obj_bulletcontrol.bulletfree[i] = false;
 //The bullet type is also the sprite
 obj_bulletcontrol.bullettype[i] = spr_horizon;
 //The bullet's coordinates
 obj_bulletcontrol.bulletx[i] = x+lengthdir_x(25*creates, direction-90);
 obj_bulletcontrol.bullety[i] = y+lengthdir_y(25*creates, direction-90);
    part_particles_create(obj_partsystem.system, obj_bulletcontrol.bulletx[i], obj_bulletcontrol.bullety[i], obj_partsystem.horizonflare[global.team[mid]-1], 2); 
 //The bullet's vspeed and hspeed
 obj_bulletcontrol.bullethspeed[i] = hspeed;
 obj_bulletcontrol.bulletvspeed[i] = vspeed;
 //The bullet's direction. Used for drawing at the right angle
 obj_bulletcontrol.bulletdirection[i] = direction;
 //The bullet's blend atribute. It shows what team it belongs to
 obj_bulletcontrol.bulletblend[i] = global.allycolor;
 obj_bulletcontrol.bulletsingle[i] = image;
 //The bullet's life. Each step, it is lowered by one. At 0, this index is freed.
 obj_bulletcontrol.bulletlife[i] = 120/global.framerate;
 //The bullet's damage. Stored to make loops much easier
 obj_bulletcontrol.bulletdamage[i] = 6;
 //The bullet's death object. When a bullet has a collision, this object is created.
 obj_bulletcontrol.bulletend[i] = obj_generic_hit;     
 //The bullet's multiplayer id. This will trace the bullet to the player who shot it.
 obj_bulletcontrol.bulletmid[i] = global.mymid;
 //The bullet's name. Stored for ease of use
 obj_bulletcontrol.bulletname[i] = "Horizon ";
 //The bullet's mask radius. Used for collision checking with ships
 obj_bulletcontrol.bulletmask[i] = 8;    
 if(i = obj_bulletcontrol.bulletmax+1) obj_bulletcontrol.bulletmax += 1;
 break;
}
for(i = 1; i &lt;= obj_bulletcontrol.bulletmax+1; i += 1)
{
 if(obj_bulletcontrol.bulletfree[i] = false) continue;
 obj_bulletcontrol.bulletfree[i] = false;
 //The bullet type is also the sprite
 obj_bulletcontrol.bullettype[i] = spr_horizon;
 //The bullet's coordinates
 obj_bulletcontrol.bulletx[i] = x+lengthdir_x(25*creates, direction+90);
 obj_bulletcontrol.bullety[i] = y+lengthdir_y(25*creates, direction+90);
    part_particles_create(obj_partsystem.system, obj_bulletcontrol.bulletx[i], obj_bulletcontrol.bullety[i], obj_partsystem.horizonflare[global.team[mid]-1], 2); 
 //The bullet's vspeed and hspeed
 obj_bulletcontrol.bullethspeed[i] = hspeed;
 obj_bulletcontrol.bulletvspeed[i] = vspeed;
 //The bullet's direction. Used for drawing at the right angle
 obj_bulletcontrol.bulletdirection[i] = direction;
 //The bullet's blend atribute. It shows what team it belongs to
 obj_bulletcontrol.bulletblend[i] = global.allycolor;
 obj_bulletcontrol.bulletsingle[i] = image;
 //The bullet's life. Each step, it is lowered by one. At 0, this index is freed.
 obj_bulletcontrol.bulletlife[i] = 120/global.framerate;
 //The bullet's damage. Stored to make loops much easier
 obj_bulletcontrol.bulletdamage[i] = 8;
 //The bullet's death object. When a bullet has a collision, this object is created.
 obj_bulletcontrol.bulletend[i] = obj_generic_hit;     
 //The bullet's multiplayer id. This will trace the bullet to the player who shot it.
 obj_bulletcontrol.bulletmid[i] = global.mymid;
 //The bullet's name. Stored for ease of use
 obj_bulletcontrol.bulletname[i] = "Horizon ";
 //The bullet's mask radius. Used for collision checking with ships
 obj_bulletcontrol.bulletmask[i] = 8;    
 if(i = obj_bulletcontrol.bulletmax+1) obj_bulletcontrol.bulletmax += 1;
 break;
}
}

speed = 0;
creates -= 1;

if(creates &gt;= 0)
 alarm[0] = 1;
else
 instance_destroy(); 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
