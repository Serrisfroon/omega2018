<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This object creates host-client specific objects for the game
//It also creates dummies for every other player
oldcountdown = 6;
packet = 0;
//Initialize extra background movement
back_extrahspeed = -2 + random(4);
back_extravspeed = -2 + random(4);
if(room = rm_victatundra)
{
back_extrahspeed = -8 + random(16);
back_extravspeed = -8 + random(16);
tile_add(global.backpiece_1, 0, 0, 2460, 2265, 0, 2265, 100001);
tile_add(global.backpiece_2, 0, 0, 2460, 2265, 2460, 0, 100001);
tile_add(global.backpiece_3, 0, 0, 2460, 2265, 2460, 2265, 100001);
}
if(room = rm_barricade || room = rm_katrinbase || room = rm_katrincoast || room = rm_victabase || room = rm_spacedepot)
{
tile_add(global.backpiece_1, 0, 0, 2000, 2000, 0, 2000, 100001);
tile_add(global.backpiece_2, 0, 0, 2000, 2000, 2000, 0, 100001);
tile_add(global.backpiece_3, 0, 0, 2000, 2000, 2000, 2000, 100001);
}
if(room = rm_combatzone)
{
tile_add(global.backpiece_1, 0, 0, 1500, 1500, 0, 1500, 100001);
tile_add(global.backpiece_2, 0, 0, 1500, 1500, 1500, 0, 100001);
tile_add(global.backpiece_3, 0, 0, 1500, 1500, 1500, 1500, 100001);
}
if(room = rm_orbitstation)
{
tile_add(global.backpiece_1, 0, 0, 1100, 1100, 655, 1750, 100001);
tile_add(global.backpiece_2, 0, 0, 1100, 1100, 1755, 650, 100001);
tile_add(global.backpiece_3, 0, 0, 1100, 1100, 1755, 1750, 100001);
}
background_hspeed[2]=back_extrahspeed/3;
background_hspeed[3]=back_extrahspeed/4;
background_hspeed[4]=back_extrahspeed/5;
background_vspeed[2]=back_extravspeed/3;
background_vspeed[3]=back_extravspeed/4;
background_vspeed[4]=back_extravspeed/5;
 
//Set colors
if(global.team[global.mymid] = 1)
{
 global.allycolor = c_red;
 global.enemycolor = c_blue;
}
else
{
 global.allycolor = c_blue;
 global.enemycolor = c_red;
}

//Initialize score window values
for(i = 0; i &lt; 8; i += 1)
{
 global.primaryRNG[i] = 1234;
 global.playerfps[i] = 60;
 global.ping[i] = 0;
 global.kills[i] = 0;
 global.deaths[i] = 0;
 global.assists[i] = 0;
 global.damagetaken[i] = 0;
 global.damagedealt[i] = 0;
}
 global.walldamage = 0;
global.walldeaths = 0;
//If stock, set the score equal to the team's total stock
//Matchvariable will be the stock each player gets
if(global.matchtype = "stock")
{
 global.redscore = global.redteam*global.matchvariable;
 global.bluescore = global.blueteam*global.matchvariable;
}
else
{
 //Otherwise, just set the team score to 0, as it will track kills
 global.redscore = 0;
 global.bluescore = 0;
}

//Set time until match begins
alarm[0] = 2700;
alarm[1] = 70;
beginning = 0;
pending = 1;


switch(global.matchlevel)
{
 case "Deep Space":
      global.shortlevel = "D.Space";
 break;
 case "Combat Zone":
      global.shortlevel = "C.Zone";
 break;
 case "Barricade":
      global.shortlevel = "Barricade";
 break;
 case "Katrin Base":
      global.shortlevel = "K.Base";
 break;
 case "Victa Tundra":
      global.shortlevel = "V.Tundra";
 break;
 case "Victa Base":
      global.shortlevel = "V.Base";
 break;
 case "Satellite":
      global.shortlevel = "Satellite";
 break;
 case "Katrin Coast":
      global.shortlevel = "K.Coast";
 break;
}

black = 1;

switch(global.resolution)
{
 case 1:
      increx = 20;
      increy = 15;
      viewheight = 660;
      view_hview[0] = viewheight;
 break; 
 case 2:
      increx = 20;
      increy = 16;
      viewheight = 704;
      view_hview[0] = viewheight;
 break; 
 case 3:
      increx = 24;
      increy = 13.5;
      viewheight = 642;
      view_hview[0] = viewheight;
 break; 
 case 4:
      increx = 24;
      increy = 15;
      viewheight = 750;
      view_hview[0] = viewheight;
 break; 
}
view_wview[0] += increx*18;
view_xview[0] = room_width/2 - view_wview[0]/2;
view_yview[0] = room_height/2 - view_hview[0]/2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.master = false)
{
 writebyte(50, 0);
 sendmessage(global.host, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wearbeginning = 1;

//If on the barricade map, move the background to maintain its center  
if(room = rm_satellite)
{  
 //Handle the x coordinate        
 background_x[0] += 2*(global.spawnx[global.mymid]-(room_width/2))/3;
 if(global.spawnx[global.mymid] &lt; view_wview[0]/2)
 {
  background_x[0] -= 2*(global.spawnx[global.mymid]-(room_width/2))/3;
  background_x[0] += 2*((view_wview[0]/2)-(room_width/2))/3;
 }
 if(global.spawnx[global.mymid] &gt; room_width-view_wview[0]/2)
 {
  background_x[0] -= 2*(global.spawnx[global.mymid]-(room_width/2))/3;
  background_x[0] += 2*((room_width-view_wview[0]/2)-(room_width/2))/3; 
 }
 //Change the planet's position as well
 background_x[1] = background_x[0];
 //Handle the y coordinate
 background_y[0] += 2*(global.spawny[global.mymid]-(room_height/2))/3;
 if(global.spawny[global.mymid] &lt; view_hview[0]/2)
 {
  background_y[0] -= 2*(global.spawny[global.mymid]-(room_height/2))/3;
  background_y[0] += 2*((view_hview[0]/2)-(room_height/2))/3;
 }
 if(global.spawny[global.mymid] &gt; room_height-view_hview[0]/2)
 { 
  background_y[0] -= 2*(global.spawny[global.mymid]-(room_height/2))/3;
  background_y[0] += 2*((room_height-view_hview[0]/2)-(room_height/2))/3;
 }
 //Change the planet's position as well
 background_y[1] = background_y[0];
}

if(room = rm_barricade)
{  
 //Handle the x coordinate        
 background_x[0] += 2*(global.spawnx[global.mymid]-(room_width/2))/3;
 if(global.spawnx[global.mymid] &lt; view_wview[0]/2)
 {
  background_x[0] -= 2*(global.spawnx[global.mymid]-(room_width/2))/3;
  background_x[0] += 2*((view_wview[0]/2)-(room_width/2))/3;
 }
 if(global.spawnx[global.mymid] &gt; room_width-view_wview[0]/2)
 {
  background_x[0] -= 2*(global.spawnx[global.mymid]-(room_width/2))/3;
  background_x[0] += 2*((room_width-view_wview[0]/2)-(room_width/2))/3; 
 }
  background_x[1] = background_x[0]+800;
 //Change the planet's position as well
 //Handle the y coordinate
 background_y[0] += 2*(global.spawny[global.mymid]-(room_height/2))/3;
 if(global.spawny[global.mymid] &lt; view_hview[0]/2)
 {
  background_y[0] -= 2*(global.spawny[global.mymid]-(room_height/2))/3;
  background_y[0] += 2*((view_hview[0]/2)-(room_height/2))/3;
 }
 if(global.spawny[global.mymid] &gt; room_height-view_hview[0]/2)
 { 
  background_y[0] -= 2*(global.spawny[global.mymid]-(room_height/2))/3;
  background_y[0] += 2*((room_height-view_hview[0]/2)-(room_height/2))/3;
 }
 //Change the planet's position as well
 background_y[1] = background_y[0]+800;
}

//Create objects for the host
if(global.master = true)
{
 //Create the controller and the player
 instance_create(0, 0, obj_mod);
 tele = instance_create(global.myspawnx, global.myspawny, obj_teleport);
 tele.mid = global.mymid;
 instance_create(0, 0, obj_bulletcontrol);
 instance_create(0, 0, obj_partsystem);
 //Create a ship for each additional player
 for(i = 1; i &lt;= 7; i += 1)
 {
  //Check if this player is in game
  if(global.activated[i] = 1)
  {
   //Create an ally if this player is on your team
   if(global.team[i] = global.team[global.mymid])
   {
    global.playership[i] = instance_create(6500, 6500, obj_ally);
    global.playership[i].ally = true;
    global.playership[i].thisname = global.othername[i];
   }
   //Create an enemy if this player is not on your team
   else
   {
    global.playership[i] = instance_create(6500, 6500, obj_enemy);
    global.playership[i].ally = false;
    global.playership[i].thisname = global.othername[i];
   }
   global.playership[i].mid = i
  }
 }
}
//Create objects for the client
else
{
//Create the controller and the player
 instance_create(0, 0, obj_mod_client);
 tele = instance_create(global.myspawnx, global.myspawny, obj_teleport);
 tele.mid = global.mymid;
 instance_create(0, 0, obj_bulletcontrol);
 instance_create(0, 0, obj_partsystem);
 //Create a ship for each additional player
 for(i = 0; i &lt;= 7; i += 1)
 {
  //Check if this player is in game
  if((global.activated[i] = 1 || i = 0) &amp;&amp; i != global.mymid)
  {
   //Create an ally if this player is on your team
   if(global.team[i] = global.team[global.mymid])
   {
    global.playership[i] = instance_create(6500, 6500, obj_ally);
    global.playership[i].ally = true;
    global.playership[i].thisname = global.othername[i];
   }
   //Create an enemy if this player is not on your team
   else
   {
    global.playership[i] = instance_create(6500, 6500, obj_enemy);
    global.playership[i].ally = false;
    global.playership[i].thisname = global.othername[i];
   }
   global.playership[i].mid = i
  }
 }
}
//Initialize match type
switch(global.matchtype)
{
 case "stock":
      global.ships = global.matchvariable;
      obj_mod.shipspace = 65/global.matchvariable;
 break;
 case "death":
      global.time = date_current_datetime();
      global.endtime = date_inc_second(global.time, global.matchvariable*60);
      global.ships = 2;
 break;
}
//Reset warning color
global.matchcolor = c_black;

//Transfer extra background speeds
obj_mod.back_extrahspeed = back_extrahspeed;
obj_mod.back_extravspeed = back_extravspeed;

instance_destroy();




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.master = true)
 while(true)
 {
  var size;
  size = 0;
  for(i = 0; i &lt; ds_list_size(global.clients); i += 1)
  {
   size = receivemessage(client_port(i), 0, 0);
   //If a message was received, break the loop
   if(size &gt; 0) break;
  }
  if(size &lt; 0) break;
  if(size = 0) break;///////////////////////
  packet = readbyte(0);
  pending += 1;
  if(pending = global.playercount)
  {
   clearbuffer(0);
   writebyte(50, 0);
   client_sendall(0, 0);
   alarm[0] = 300;
  }
 }
else
if(packet = 0)
 while(true)
 {
  var size;
  size = 0;
  size = receivemessage(global.host, 0, 0);
  if(size == 0)
  {
   show_message("The host has disconnected.");
   closesocket(global.udpsock);
   dllfree();
   if(global.gameslist = 1)
    room_goto(rm_gamelist);
   else
    room_goto(rm_connect);
   exit;
  }
  if(size &lt; 0) 
  {
   break;
  }
  packet = readbyte(0);
  alarm[0] = 300;
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(black &gt; 0)
 black -= 0.0125*global.framerate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(beginning = 1)
 exit;
//Set the scaling value
scaling = view_hview[0]/480;

//Draw cloud layer on victa tundra
if(room = rm_victatundra)
 draw_background_tiled(global.cloudback, background_x[6], background_y[6]);
draw_sprite_ext(spr_matchbox, 0, view_xview[0]+50*scaling, view_yview[0]+50*scaling, scaling, scaling, 0, c_white, 1);
draw_sprite_ext(spr_matchbox, 1, view_xview[0]+view_wview[0]-312*scaling, view_yview[0]+view_hview[0]-211*scaling, scaling, scaling, 0, c_white, 1);
//draw_text(room_width/2-240+70, room_height/2-158+35, global.matchtype+': '+string(global.matchvariable));
//draw_text(room_width/2-240+400, room_height/2-158+35, global.shortlevel);
countdown = ceil(alarm[0]/60);
if(countdown &lt; 6 &amp;&amp; alarm[0] != -1)
{
    if(countdown != oldcountdown)
        audio_play_sound(snd_changeweapon, 1, 0);
    oldcountdown = countdown;
    draw_sprite_ext(spr_matchstart_text, countdown, room_width/2, room_height/2, scaling, scaling, 0, c_white, 1);
}
draw_set_halign(fa_center);
////draw teams
//Reset team listing variables
redlist = 0;
bluelist = 0;
//Begin a loop to both check if a player exists and draw the name correctly
for(i = 0; i &lt; 8; i += 1)
{
 //Skip this player if they are not present
 if(global.activated[i] &lt;= 0) continue;
 //Draw the name on the correct team's side and increase the team's listing value
 if(global.team[i] = 1)
 {
  draw_text_transformed(view_xview[0]+181*scaling, view_yview[0]+70*scaling+(30*redlist*scaling), global.othername[i], scaling, scaling, 0);
  redlist += 1;
 }
 else
 {
  draw_text_transformed(view_xview[0]+view_wview[0]-181*scaling, view_yview[0]+view_hview[0]-191*scaling+(30*bluelist*scaling), global.othername[i], scaling, scaling, 0);
  bluelist += 1;
 }
}
draw_set_halign(fa_left);

draw_set_alpha(black)
draw_set_color(c_white);
draw_rectangle(0, 0, room_width, room_height, 0);
draw_set_color(c_black);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
