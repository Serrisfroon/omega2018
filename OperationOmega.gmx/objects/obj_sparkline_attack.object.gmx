<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sparkline</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize variables
target_x = 0;                   //x value to aim the attack at
target_y = 0;                   //y value to aim the attack at
target_direction = 0;           //directional value to aim at
target_object = -1;             //Object to fire at(if applicable)
mid = 0;                        //mid of this ship to shoot from
amplified = false;              //Whether or not the amplified version is used

alarm[1] = 1;   //Set time until attack creation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Assign the correct object depending on if it's coming from an ally or an enemy
if(global.team[mid] = global.team[global.mymid])
    var created_object = obj_sparkline;
else
    var created_object = obj_sparkline_enemy;

//Hold the value of the origin object locally for faster reference    
var origin_object = global.playership[mid];
//Hold the values of the origin object's sparkline nodes locally as well
var sparkline_node;
sparkline_node[1] = origin_object.sparkline_node[1];
sparkline_node[2] = origin_object.sparkline_node[2];
sparkline_node[3] = origin_object.sparkline_node[3];

//Change the max distance between sparkline nodes depending on if the attack is amplified
if(amplified = 0)
    var max_sparkline_distance = 480;
else
    var max_sparkline_distance = 680;
   
//Loop through to check all 3 possible sparkline nodes
for(i = 1; i &lt;= 3; i ++)
    //Check if the current node exists
    if(sparkline_node[i] = -1)
    {
        //Perform action depending on which node
        switch(i)
        {
            case 2:     //This is the second node. One node exists already.
                //Check if the distance between the new node's end point and the existing node is too large
                if(point_distance(target_x, target_y, sparkline_node[1].target_x, sparkline_node[1].target_y) &gt; max_sparkline_distance)
                {
                    i = 1;                      //This is now the first node
                    with(sparkline_node[i])     //Destroy the previously existing node
                        instance_destroy();
                }
            break;
            case 3:     //This is the third node. Two nodes exist already
                //Check if the distance between the new node's end point and the existing nodes is too large
                if(point_distance(target_x, target_y, sparkline_node[1].target_x, sparkline_node[1].target_y) &gt; max_sparkline_distance ||
                    point_distance(target_x, target_y, sparkline_node[2].target_x, sparkline_node[2].target_y) &gt; max_sparkline_distance)
                    {
                        i = 1;                      //This is now the first node
                        with(sparkline_node[1])     //Destroy the previously existing first node
                            instance_destroy();
                        with(sparkline_node[2])     //Destroy the previously existing second node
                            instance_destroy();
                        origin_object.sparkline_node[2] = -1;
                    }
            break;
        }
        
        //Create the attack and give pass on the properties
        var attack = instance_create(origin_object.x, origin_object.y, created_object);
        attack.direction = point_direction(origin_object.x, origin_object.y, target_x, target_y);   //Pass on the direction
        attack.mid = mid;                                                                           //Pass on the mid
        attack.target_x = target_x;                                                                  //Pass on the x coordinate of the target location
        attack.target_y = target_y;                                                                  //Pass on the y coordinate of the target location
        attack.node_order = i;                                                                      //Pass on the targeted object
        origin_object.sparkline_node[i] = attack;       
                                                                                //  to determine how it interacts with the other nodes
        //Exit the loop since a node has been created                                                                        
        break;                                                                                              
    }    
    
//This object is no longer needed
instance_destroy();
                                                                       
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
