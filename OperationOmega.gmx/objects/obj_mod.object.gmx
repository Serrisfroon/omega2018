<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_listener_position(0, 0, 0);

stall = 0;
chaincount = 0;
armorpart = 1;
shieldpart = 1;
fadetoblack = 0;
blackalpha = 0;
oldsnap = 0;

modify_x = 0;
modify_y = 0;

//Intialize weapon availability
esecondfade[1] = c_white;
esecondfade[2] = c_white;
esecondfade[3] = c_white;
deployfade[1] = c_white;
deployfade[2] = c_white;
deployfade[3] = c_white;

//Initialize announcement variables
announcement = "";
announcealpha = 0;
announcement_color = c_maroon;
announcing = 0;

//Initialize chat check
global.chatting = false;
flashing = '';
alarm[5] = 10/global.framerate;
alarm[11] = 180/global.framerate;

//initialize ping count
pinged = 0;
sendping = 0;
refreshing = 0;
disconnectcheck = 0;

//Initialize deploy stock variable 
dstock = 0;
maxdstock = 1;

//Initialize view position
viewpos = 0;

//Merge walls together
global.wallsprite = spr_empty;
makenewwall = 0;
alarm[4] = 2;

//Initialize cursor flash
targethit = 0;
//Set rotation values for the cursor
global.rot1 = 0;
global.rot2 = 0;
global.rot3 = 0;
//Set the targetting values
foundtarget = -1;
targetdist = 0;
thisplayer = 0;
//Initialize scaling
scaling = 1;
//Initialize the notice chat
for(i = 0; i &lt;= 4; i += 1)
{
 chatline[i] = "";
 chatcolor[i] = c_black;
 chatalpha[i] = 0;
}
for(i = 0; i &lt;= 16; i += 1)
{
 extchatline[i] = "";
}

//Initialize sparkline nodes
for(i = 0; i &lt;= 8; i += 1)
{
 node[i] = -1;
 node2[i] = -1;
 node3[i] = -1;
 directthis[i] = -1;
 playerdisconnect[i] = 0;
}

//Start the match with your first energy secondary selected
switch(global.esecond[1])
{
 case 1:
      global.secondary = 1; //Fusion
 break;
 case 2:
      global.secondary = 2; //Stardust
 break;
 case 3:
      global.secondary = 5; //Barrier
 break;
 case 4:
      global.secondary = 10; //Beam
 break;
 case 5:
      global.secondary = 9; //Formation
 break;
 case 6:
      global.secondary = 11; //Sparkline
 break;
 case 7:
      global.secondary = 12; //Burst
 break;
 case 8:
      global.secondary = 14; //Slash
 break;
 case 9:
      global.secondary = 15; //Horizon
 break;
 case 10:
      global.secondary = 22; //Spiral
 break;
 case 11:
      global.secondary = 23; //Laser
 break;
 case 12:
      global.secondary = 24; //Trail  
 break;
 case 13:
      global.secondary = 25; //Reflection
 break;
 case 14:
      global.secondary = 26; //Storm
 break;
 case 15:
      global.secondary = 27; //Trigger
 break;
}
selectx = 0;
//Find the correct hotkeyed secondary
//Switch to the correct new attack
global.spacesecond = -1;
switch(global.spacehot)
{
 case 1:
 case 2:
 case 3:
      switch(global.esecond[global.spacehot])
      {
       case 1:
            global.spacesecond = 1; //Fusion
       break;
       case 2:
            global.spacesecond = 2; //Stardust
       break;
       case 3:
            global.spacesecond = 5; //Barrier
       break;
       case 4:
            global.spacesecond = 10; //Beam
       break;
       case 5:
            global.spacesecond = 9; //Formation
       break;
       case 6:
            global.spacesecond = 11; //Sparkline
       break;
       case 7:
            global.spacesecond = 12; //Burst
       break;
       case 8:
            global.spacesecond = 14; //Slash
       break;
       case 9:
            global.spacesecond = 15; //Horizon
       break;
       case 10:
            global.spacesecond = 22; //Spiral
       break;
       case 11:
            global.spacesecond = 23; //Laser
       break;
       case 12:
            global.spacesecond = 24; //Trail  
       break;
       case 13:
            global.spacesecond = 25; //Reflection
       break;
       case 14:
            global.spacesecond = 26; //Storm
       break;
       case 15:
            global.spacesecond = 27; //Trigger
       break;
      }
      spacex = -32+(global.spacehot*32);
 break;
 case 4:
 case 5:
 case 6:
      switch(global.deploy[global.spacehot-3])
      {
       case 1:
            global.spacesecond = 0; //Dual Missile
       break;
       case 2:
            global.spacesecond = 4; //Layer Missile
       break;
       case 3:
            global.spacesecond = 3; //Hunter Mine
       break;
       case 4:
            global.spacesecond = 6; //Locust Missile
       break;
       case 5:
            global.spacesecond = 7; //Phantom Mine
       break;
       case 6:
            global.spacesecond = 8; //Solus
       break;
       case 7:
            global.spacesecond = 13; //Trident Missile
       break;
       case 8:
            global.spacesecond = 17; //Shock Missile
       break;
       case 9:
            global.spacesecond = 16; //Hacker Mine
       break;
       case 10:
            global.spacesecond = 18; //Hacker Mine
       break;
       case 11:
            global.spacesecond = 19; //Hacker Mine
       break;
       case 12:
            global.spacesecond = 20; //Hacker Mine
       break;
       case 13:
            global.spacesecond = 21; //Hacker Mine
       break;
       case 14:
            global.spacesecond = 28; //Split Missile
       break;
       case 15:
            global.spacesecond = 29; //Cluster Mine
       break;
      }
      switch(global.spacehot)
      {
       case 4:
            switch(global.shipselect)
            {
             case 1:
                  spacex = 64;
             break;
             case 2:
                  spacex = 96;
             break;
             case 3:
                  spacex = 32;
             break;
            }
       break;
       case 5:
            switch(global.shipselect)
            {
             case 1:
                  spacex = 96;
             break;
             case 3:
                  spacex = 64;
             break;
            }
       break;
       case 6:
            spacex = 96;
       break;
      }
 break;
}


//Set the view increments
global.resolution = 4;
switch(global.resolution)
{
 case 1:
      increx = 20;
      increy = 15;
      viewheight = 660;
      view_hview[0] = viewheight;
 break; 
 case 2:
      increx = 20;
      increy = 16;
      viewheight = 704;
      view_hview[0] = viewheight;
 break; 
 case 3:
      increx = 24;
      increy = 13.5;
      viewheight = 642;
      view_hview[0] = viewheight;
 break; 
 case 4:
      increx = 24;
      increy = 15;
      viewheight = 750;
      view_hview[0] = viewheight;
 break; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//change fps to match the framerate of the slowest player
/*
//Find the current lowest framerate
lowestrate = min(global.playerfps[0], global.playerfps[1], global.playerfps[2], global.playerfps[3], global.playerfps[4], global.playerfps[5], global.playerfps[6], global.playerfps[7]);

//Do not limit your framerate if your framerate is lowest, and below the current framerate limit
if(lowestrate = global.playerfps[global.mymid])
 room_speed = 60/global.framerate;
else
 room_speed = round(lowestrate/global.framerate);

 
alarm[11] = 180/global.framerate;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>announcing = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Check if the view is larger than normal
 if(view_hview[0] &gt; viewheight &amp;&amp; stall = 0)
 {
   alarm[6] = 1;
   view_wview[0] -= increx/3;
   view_hview[0] -= increy/3;
 }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change the flashing text
if(flashing = '')
 flashing = '|';
else
 flashing = '';
//Set time until next flash
alarm[5] = 10/global.framerate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create a surface large enough to hold all wall drawings
global.wallsurface = surface_create(ceil(room_width/15), ceil(room_height/15));

//Begin drawing to the surface
surface_set_target(global.wallsurface);
//Clear the surface
draw_clear_alpha(c_black, 1);
//Have each wall mark its position with a square
draw_set_alpha(1);
with(obj_wall)
{
 draw_set_color(c_dkgray);
 draw_rectangle(x/16, y/16, (x+sprite_width)/16, (y+sprite_height)/16, 0);
}
//Create a sprite from the surface
global.wallsprite = sprite_create_from_surface(global.wallsurface, 0, 0, ceil(room_width/16), ceil(room_height/16), 1, 0, 0, 0);
//Stop drawing to the surface
surface_reset_target();
//Free the surface from memory
surface_free(global.wallsurface);

//Stop execution if there were no walls in the room
if(instance_number(obj_wall) &lt; 1)
 exit;

makenewwall = 1;

//Destroy all walls
with(obj_wall)
 instance_destroy();
 



//Create one of these objects
superwall = instance_create(0, 0, obj_bigwall);
superwall.sprite_index = global.wallsprite;
//Scale the object to actual size
superwall.image_xscale = 16;
superwall.image_yscale = 16;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targethit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The game is over. Return to the waiting rooom
fadetoblack = 1;
blackalpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Close the udp stocket if you are a client
if(global.master = false)
 closesocket(global.udpsock);
//End 39dll
dllfree();
//Return to the appropriate room
if(global.gameslist = 1)
 room_goto(rm_gamelist);
else
 room_goto(rm_connect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//respawn if there is stock left
if(global.ships&gt;0)
{
 tele = instance_create(global.myspawnx, global.myspawny, obj_teleport);
 tele.mid = global.mymid;
 //destroy the error stopper
 with(obj_ship_placeholder)
 instance_destroy();
  //Send respawn to host
  clearbuffer(0);
  packet_label_write(10, global.mymid);
  //Send to everyone if host
  if(global.master = true)
   client_sendall(0, 0);
  else
  //Send to host if client
   sendmessage(global.host, 0, 0, 0);
}
else
{
 //Check for game over if host
 if(global.master = true &amp;&amp; alarm[2] &lt;= 0)
 {
  //Add the player to the elimination count
  if(global.team[global.mymid] = 1)
  {
   global.redteamout += 1;
   //Check if all of red team is eliminated
   if(global.redteam = global.redteamout)
   {
    //Send it to your chat
    chatline_add("Red Team has been eliminated.", c_red);
    lolcolor[3] = 1;
    chatline_add("Blue Team has won the match.", c_navy);
    lolcolor[4] = 2;
    obj_mod.announcing  = 1;
    obj_mod.announcement = "Operation Failed";
    obj_mod.announcement_color = c_navy;
    obj_mod.announcealpha = 0;
    global.outcome = 1;

    //Send the message to all clients
    clearbuffer(0);
    packet_label_write(5, global.mymid);
    writebyte(lolcolor[3], 0);
    writestring(chatline[3], 0);
    writebyte(lolcolor[4], 0);
    writestring(chatline[4], 0);
    client_sendall(0, 0);
    //Set time until return to waiting room
    alarm[2] = 180/global.framerate;
   }
  }
  else
  {
   global.blueteamout += 1;
   //Check if all of blue team is eliminated
   if(global.blueteam = global.blueteamout)
   {
    //Send it to your chat
    chatline_add("Blue Team has been eliminated.", c_navy);
    lolcolor[3] = 2;
    chatline_add("Red Team has won the match.", c_red);
    lolcolor[4] = 1;
    obj_mod.announcing  = 1;
    obj_mod.announcement = "Operation Failed";
    obj_mod.announcement_color = c_red;
    obj_mod.announcealpha = 0;
    global.outcome = 1;
    //Send the message to all clients
    clearbuffer(0);
    packet_label_write(5, global.mymid);
    writebyte(lolcolor[3], 0);
    writestring(chatline[3], 0);
    writebyte(lolcolor[4], 0);
    writestring(chatline[4], 0);
    client_sendall(0, 0);
    //Set time until return to waiting room    
    alarm[2] = 180/global.framerate;
   }
  }
 }
 else
 {
  //Send elimination to host
  clearbuffer(0);
  packet_label_write(4, global.mymid);
  sendmessage(global.host, 0, 0, 0);
 }  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(sendping)
{
 case 0:
      clearbuffer(0);
      packet_label_write(1, global.mymid);
      if(obj_ship.armor &gt; 0 || obj_ship.beserk = 1)
       writebyte(status_compress(obj_ship.smoke, obj_ship.hacked, obj_ship.shocked, obj_ship.chained, obj_ship.beserk), 0);
      else
       writebyte(0, 0);
      writebyte(0, 0);
      writebyte(fps, 0);
      client_sendall(0, 0);   
      sendping = 120;   
 break;
 default:
         sendping -= 1;
 break;
}

switch(refreshing)
{
 case 0:
      refreshing = 20;
      clearpack();
      packet_label_write(0, global.mymid);
      crush(round(obj_ship.direction*10), 3600, 0);
      crush(round(obj_ship.facedir*10), 3600, 0);
      if(obj_ship.armor &gt; 0 || obj_ship.beserk = 1)
      {
       crush(round(obj_ship.x*10), 65000, 0);
       crush(round(obj_ship.y*10), 65000, 0);
      }
      else
      {
       crush(65000, 65000, 0);
       crush(65000, 65000, 0);
      }
      
      crush(round(abs(obj_ship.speed*100)), 2500, 0);
      crush(prediction_compress(0, obj_ship.predictturn, obj_ship.predictspeed, obj_ship.nowshoot), 72, 0);
      if(obj_ship.nowshoot = 1)
      {
       refreshing = 3;
       crush(round(obj_ship.newdir*10), 3600, 0);
       switch(global.primary)
       {
        case 4:
            //Find out which ship you are targetting
            if(obj_mod.foundtarget &lt;= -1)
             testtarget = 8;
            else
            {
            testtarget = -1;
            while(true)
            {
             testtarget+=1;
            if(testtarget != global.mymid)
              if(global.playership[testtarget] = obj_mod.foundtarget)
              break;
            }
            }
            crush(testtarget, 8, 0);
        break;
        case 6:
             crush(min(100, round(point_distance(obj_ship.x, obj_ship.y, mouse_x, mouse_y)/10)), 200, 0);
        break;
        case 7:
             if(foundtarget != -1)
              crush(foundtarget.mid, 10, 0);
             else
              crush(10, 10, 0);
        break;
       }
      }
      for(i = 1; i &lt; 8; i += 1)
      {
       if(global.activated[i] &lt;= 0) continue;
       if(global.playership[i] = obj_dud) continue;
       crush(round(global.playership[i].direction*10), 3600, 0);
       crush(round(global.playership[i].facedir*10), 3600, 0);
       crush(clamp(round(global.playership[i].x*10), 0, 65000), 65000, 0);
       crush(clamp(round(global.playership[i].y*10), 0, 65000), 65000, 0);
       crush(round(global.playership[i].speed*100), 2500, 0);
       crush(prediction_compress(0, global.playership[i].turning, global.playership[i].speeding, global.playership[i].shooting), 72, 0);
       if(global.playership[i].shooting = 1)
       {
        refreshing = 3;
        crush(round(global.playership[i].newdir*10), 3600, 0);
        switch(global.playerprimary[i])
        {
         case 4:
              crush(global.playership[i].flankcurve, 8, 0);
         break;
         case 6:
              crush(global.playership[i].crossfiredist, 200, 0);
         break;
         case 7:
              crush(global.playership[i].siphontarget, 10, 0);
         break;
        }
       }
      }
      //Send to everyone
      bufferpack();
      client_sendall(0, 0);
 break;
 default:
    refreshing -= 1;
 break;   
 
}

if(obj_ship.snapdir != oldsnap)
{
    clearbuffer(0);
    packet_label_write(13, global.mymid);
    writebyte(obj_ship.snapdir+100, 0);
    writeushort(global.primaryRNG[global.mymid], 0);
    client_sendall(0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//This part of the step event deals with player communications
//This is the host object, so it must relay messages to other
//players
//check_disconnect();

//Start the infinite while loop. It will cycle through until 
//there are no new messages
while(true)
 {
  //Initialize variables
  //var size;
  size = 0;
  //Check each player one by one for a new message
  for(i = 0; i &lt; ds_list_size(global.clients); i += 1)
  {
   //Check for a tcp message
   size = receivemessage(client_port(i), 0, 0);
   //If a message was received, break the for loop
   if(size &gt; 0) {
   break;}
  }
  //If no message was received, break the while loop
  if(size &lt; 0) break;
  if(size = 0) break;////////////////////
  //Read the label byte to find the packet id and the player who sent it
  lollabel = readbyte(0);
  packet_label_read(lollabel);

  
  //Perform the correct acton depending on what packet has been sent
  switch(packet)
  {
  
   //The player sends its refresh packet
   case 0:
        if(playerdisconnect[dummy] &gt; -700)
            playerdisconnect[dummy] = 0;
        uncrushbegin();
        global.playership[dummy].direction = uncrush(3600, 0)/10;
        global.playership[dummy].facedir = uncrush(3600, 0)/10;
        global.playership[dummy].x = uncrush(65000, 0)/10;
        global.playership[dummy].y = uncrush(65000, 0)/10;
        global.playership[dummy].speed = uncrush(2500, 0)/100;
        decomp = uncrush(72, 0);
        prediction_decompress(decomp);
        if(global.playership[dummy].shooting = 1)
        {
         global.playership[dummy].newdir = uncrush(3600, 0)/10;
         switch(global.playerprimary[dummy])
         {
          case 4:
               global.playership[dummy].flankcurve = uncrush(8, 0);
          break;
          case 6:
               global.playership[dummy].crossfiredist = uncrush(200, 0)*10;
          break;
          case 7:
               global.playership[dummy].siphontarget = uncrush(10, 0);
          break;
         }         
        }
   break;
   
   //The player sends its ping packet
   case 1:
        lolstatuses = readbyte(0);
        status_decompress(lolstatuses);
        if(global.playership[dummy].hacked = true)
        {
         global.playership[dummy].thisturn = 0;
         global.playership[dummy].turning = 0;
         global.playership[dummy].speeding = 2;
        }
        global.ping[dummy] = readbyte(0)*20;
        global.playerfps[dummy] = readbyte(0);
        client_sendall(0, 0);    
   break;
   
   //The player uses a secondary weapon
   case 2:
        receive_secondary();
   break;
   
   //The player is defeated
   case 3:
        playerdisconnect[dummy] = -600;
        defeatmid = readbyte(0);
        anotherspawn[dummy] = readbyte(0);
        with(obj_turret)
            if(mid = obj_mod.dummy)
                instance_destroy();
        with(obj_turret_enemy)
            if(mid = obj_mod.dummy)
                instance_destroy();
    with(obj_shieldpulse)
        if(mid = obj_mod.dummy)
            endnow = 1;
    with(obj_shieldpulse_enemy)
        if(mid = obj_mod.dummy)
            endnow = 1;

        //Update score
        if(defeatmid != 20)
         global.kills[defeatmid] += 1;
        global.deaths[dummy] += 1;
        switch(global.matchtype)
        {
         case "stock":
              //Reduce your team's score by 1
              switch(global.team[dummy])
              {
               case 1:
                    global.redscore -= 1;
               break;
               case 2:
                    global.bluescore -= 1;
               break;
              }
         break;
         case "death":
              //Increase other team's score by 1
              switch(global.team[dummy])
              {
               case 1:
                    global.bluescore += 1;
               break;
               case 2:
                    global.redscore += 1;
               break;
              }
         break;
        }
        //Create a defeated ship in the player's place
        defeat = instance_create(global.playership[dummy].x, global.playership[dummy].y, obj_deadother);
        defeat.direction = global.playership[dummy].direction;
        defeat.speed = global.playership[dummy].speed+1;
        defeat.sprite_index = global.playership[dummy].sprite_index;
        defeat.dummy = dummy;
        if(global.playership[dummy] = view_object[0])
         view_object[0] = defeat;
        //Send a defeat notice to chat
        //Send it to your chat
        switch(readbyte(0))
        {
         case 1:         
              newcolor = c_red;
         break;
         case 2:
              newcolor = c_navy;
         break;
        }
        chatline_add(readstring(0), newcolor);
        //Create an announcement
        if(obj_mod.announcing = 0 &amp;&amp; defeatmid != 20)
        {
         obj_mod.announcing  = 1;
         obj_mod.announcement = global.othername[defeatmid]+" defeated "+global.othername[dummy];
         obj_mod.announcement_color = newcolor;
        }

        //Reset targetting if currently targetting this ship
        if(foundtarget = global.playership[dummy])
        {
         foundtarget = -1;
         targetdist = point_distance(obj_ship.x, obj_ship.y, -10000, -10000);
        }
        //Destroy the designated ship
        with(global.playership[dummy])
         instance_destroy();
        //Create an object to intercept late info
        global.playership[dummy] = instance_create(0, 0, obj_dud);                
        client_sendall(0, dummy);
   break;
   
   //A player is eliminated in a stock match
   case 4:
        if(alarm[2] &gt; 0)
         exit;
        playerdisconnect[dummy] = -700;
        //Add the player to the elimination count
        if(global.team[dummy] = 1)
        {
         global.redteamout += 1;
         if(global.redteam = global.redteamout)
         {
          //Send it to your chat
          //Send it to your chat
          chatline_add("Red Team has been eliminated.", c_red);
          lolcolor[3] = 1;
          chatline_add("Blue Team has won the match.", c_navy);
          lolcolor[4] = 2;
          obj_mod.announcing  = 1;
          obj_mod.announcealpha = 0;
          if(global.team[global.mymid] = 1)
          {
           obj_mod.announcement = "Operation Failed";
           global.outcome = 1;
           obj_mod.announcement_color = c_navy;
          }
          else
          {
           obj_mod.announcement = "Operation Successful";
           obj_mod.announcement_color = c_navy;
           global.outcome = 0;
          }         

          //Send the message to all clients
          clearbuffer(0);
          packet_label_write(5, global.mymid);
          writebyte(lolcolor[3], 0);
          writestring(chatline[3], 0);
          writebyte(lolcolor[4], 0);
          writestring(chatline[4], 0);
          client_sendall(0, 0);
          //Set time until returning to waiting room
          alarm[2] = 180;
         }
        }
        else
        {
         global.blueteamout += 1;
         if(global.blueteam = global.blueteamout)
         {
          //Send it to your chat
          //Send it to your chat
          chatline_add("Blue Team has been eliminated.", c_navy);
          lolcolor[3] = 2;
          chatline_add("Red Team has won the match.", c_red);
          lolcolor[4] = 1;
          obj_mod.announcing  = 1;
          obj_mod.announcealpha = 0;
          if(global.team[global.mymid] = 1)
          {
           obj_mod.announcement = "Operation Successful";
           obj_mod.announcement_color = c_red;
           global.outcome = 0;
          }
          else
          {
           obj_mod.announcement = "Operation Failed";
           obj_mod.announcement_color = c_red;
           global.outcome = 1;
          }
          clearbuffer(0);
          packet_label_write(5, global.mymid);
          writebyte(lolcolor[3], 0);
          writestring(chatline[3], 0);
          writebyte(lolcolor[4], 0);
          writestring(chatline[4], 0);
          client_sendall(0, 0);
          //Set time until returning to waiting room
          alarm[2] = 180;
         }
        }
   break;
   
   //Prediction Packet
   case 6:
        client_sendall(1, dummy);
   break;  
   
   //Chat Message
   case 7:
        //Put the message in your chat
        chatline_add(readstring(0), c_white);
        client_sendall(0, dummy);  
   break;
   
   //Ship checkin. Sets the correct image and ship-dependant variables 
   //for a player when it spawns
   case 9:
        global.playership[dummy].mid = readbyte(0);
        ship = readbyte(0);
        //If the player is on red team, set choose a red ship and set
        //the right values
        if(global.team[dummy] = 1)
         switch(ship)
         {
          case 1: //Alphastar
               global.playership[dummy].sprite_index = spr_alphastar;
               global.playership[dummy].forceturn = 5;
               global.playership[dummy].minspeed = 2;
               global.playership[dummy].maxspeed = 7;
               global.playership[dummy].controlturn = 0.75;
          break;
          case 2: //Swiftwing
               global.playership[dummy].sprite_index = spr_swiftwing;
               global.playership[dummy].forceturn = 8;
               global.playership[dummy].minspeed = 4;
               global.playership[dummy].maxspeed = 10;               
               global.playership[dummy].controlturn = 1.2;
          break;
          case 3: //Goliath
               global.playership[dummy].sprite_index = spr_goliath;
               global.playership[dummy].forceturn = 3;
               global.playership[dummy].minspeed = 1;
               global.playership[dummy].maxspeed = 5;
               global.playership[dummy].controlturn = 0.5;
          break;
         }
        else
        //If the player is on blue team, set choose a blue ship and set
        //the right values
         switch(ship)
         {
          case 1: //Alphastar
               global.playership[dummy].sprite_index = spr_alphastar_enemy;
               global.playership[dummy].forceturn = 5;
               global.playership[dummy].minspeed = 2;
               global.playership[dummy].maxspeed = 7;               
               global.playership[dummy].controlturn = 0.75;
          break;
          case 2: //Swiftwing
               global.playership[dummy].sprite_index = spr_swiftwing_enemy;
               global.playership[dummy].forceturn = 8;
               global.playership[dummy].minspeed = 4;
               global.playership[dummy].maxspeed = 10;               
               global.playership[dummy].controlturn = 1.2;
          break;
          case 3: //Goliath
               global.playership[dummy].sprite_index = spr_goliath_enemy;
               global.playership[dummy].forceturn = 3;
               global.playership[dummy].minspeed = 1;
               global.playership[dummy].maxspeed = 5;               
               global.playership[dummy].controlturn = 0.5;
          break;
         }
        client_sendall(0, dummy);
   break;
   
   //Respawn Packet
   case 10:
        tele = instance_create(global.spawnx[anotherspawn[dummy]], global.spawny[anotherspawn[dummy]], obj_teleport_other);
        tele.mid = dummy;
        client_sendall(0, dummy);        
   break;  

   //Primary Switched
   case 11:
        global.playerprimary[dummy] = readbyte(0);
        client_sendall(0, dummy);
   break;
   
   //Beserk Activated
   case 12:
        global.playership[dummy].beserk = 1;
        client_sendall(0, dummy);
   break;
   
   //Change snapdir
   case 13:
        global.playership[dummy].snapdir = readbyte(0)-100;
        global.primaryRNG[dummy] = readushort(0);
        client_sendall(0, dummy);
   break;

   //A player leaves the game
   case CLIENT_DROP:
        //Get info from leaving player
        droppedname = readstring(0);
        //Drop the player and add the drop to the count
        client_drop(dummy);
        //Destroy the removed player
        with(global.playership[dummy])
         instance_destroy();
        //Create a dud to intercept remaining messages
        global.playership[dummy] = instance_create(-2000, -2000, obj_dud);
        //Send a notice to your chat
        chatline_add(readstring(0), c_red)
        if(global.team[dummy] = 1)
         chatcolor[4] = c_red;
        else
         chatcolor[4] = c_navy;
        //Relay the info to other players
        client_sendall(0, 0); 
        //Add the player to the elimination count
        if(global.team[dummy] = 1)
        {
            //Check if all of red team is eliminated
            if(global.redteam = global.redteamout)
            {
                //Send it to your chat
                chatline_add("Red Team has been eliminated.", c_red);
                lolcolor[3] = 1;
                chatline_add("Blue Team has won the match.", c_navy);
                lolcolor[4] = 2;
                if(global.team[global.mymid] = 1)
                {
                    global.outcome = 1;
                    obj_mod.announcement = "Operation Failed";
                }
                else
                {
                    global.outcome = 0;
                    obj_mod.announcement = "Operation Successful";
                }
                
                obj_mod.announcing  = 1;
                obj_mod.announcement_color = c_navy;
                obj_mod.announcealpha = 0;
            
                //Send the message to all clients
                clearbuffer(0);
                packet_label_write(5, disi);
                writebyte(lolcolor[3], 0);
                writestring(chatline[3], 0);
                writebyte(lolcolor[4], 0);
                writestring(chatline[4], 0);
                client_sendall(0, 0);
                //Set time until return to waiting room
                alarm[2] = 180;
            }
        }
        else
        {
            //Check if all of blue team is eliminated
            if(global.blueteam = global.blueteamout)
            {
                //Send it to your chat
                chatline_add("Blue Team has been eliminated.", c_navy);
                lolcolor[3] = 2;
                chatline_add("Red Team has won the match.", c_red);
                lolcolor[4] = 1;
                obj_mod.announcing  = 1;
                obj_mod.announcement_color = c_red;
                obj_mod.announcealpha = 0;
                if(global.team[global.mymid] = 2)
                {
                    global.outcome = 1;
                    obj_mod.announcement = "Operation Failed";
                }
                else
                {
                    global.outcome = 0;
                    obj_mod.announcement = "Operation Successful";
                }
                //Send the message to all clients
                clearbuffer(0);
                packet_label_write(5, dummy);
                writebyte(lolcolor[3], 0);
                writestring(chatline[3], 0);
                writebyte(lolcolor[4], 0);
                writestring(chatline[4], 0);
                client_sendall(0, 0);
                //Set time until return to waiting room    
                alarm[2] = 180;
            }
        }   break;
  }
 }
//Listen for a new player
newclient = tcpaccept(global.listen, true);
if(newclient &gt; 0)
{
    //Reject the new player
    clearbuffer(0);
    writebyte(CLIENT_UNABLE, 0);
    sendmessage(newclient, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This part of the step event is the personal checks
//Things here will not be sent to/received by other players.

if(fadetoblack = 1)
{
    blackalpha += 0.04;
    if(blackalpha &gt;= 1)
        room_goto(rm_aftermatch);
}


//Handle announcements
switch(announcing)
{
 case 1:
      announcealpha += 0.05;
      if(announcealpha = 1)
      {
       alarm[10] = 240;
       announcing = 2;
      }
 break;
 case 3:
      announcealpha -= 0.05;
      if(announcealpha = 0)
       announcing = 0;
 break;
}
if(!instance_exists(view_object[0]))
 view_object[0] = obj_ship;
//Handle background positioning
if((view_xview[0]&gt;0&amp;&amp;view_xview[0]+view_wview[0]&lt;room_width))
{
if(room != rm_katrinbase &amp;&amp; room != rm_victabase &amp;&amp; room != rm_victatundra &amp;&amp; room != rm_katrincoast)
{ 
 background_hspeed[0]=view_object.hspeed/1.5;
 background_hspeed[2]=(view_object.hspeed+back_extrahspeed)/3;
 background_hspeed[3]=(view_object.hspeed+back_extrahspeed)/4;
 background_hspeed[4]=(view_object.hspeed+back_extrahspeed)/5;
}

background_hspeed[1]=view_object.hspeed/1.5;
background_hspeed[5]=view_object.hspeed/10;
background_hspeed[6] = -(view_object.hspeed-back_extrahspeed)*.2;
}
else
{
background_hspeed[0]=0;
background_hspeed[1]=0;
background_hspeed[2]=back_extrahspeed/3;
background_hspeed[3]=back_extrahspeed/4;
background_hspeed[4]=back_extrahspeed/5;
background_hspeed[5]=0;
background_hspeed[6]=back_extrahspeed/12;
}
if((view_yview[0]&gt;0&amp;&amp;view_yview[0]+view_hview[0]&lt;room_height))
{
if(room != rm_katrinbase &amp;&amp; room != rm_victabase &amp;&amp; room != rm_victatundra &amp;&amp; room != rm_katrincoast)
{ 
 background_vspeed[0]=view_object.vspeed/1.5;
 background_vspeed[2]=(view_object.vspeed+back_extravspeed)/3;
 background_vspeed[3]=(view_object.vspeed+back_extravspeed)/4;
 background_vspeed[4]=(view_object.vspeed+back_extravspeed)/5;
}

background_vspeed[1]=view_object.vspeed/1.5;
background_vspeed[5]=view_object.vspeed/10;
background_vspeed[6] = -(view_object.vspeed-back_extravspeed)*.2;
}
else
{
background_vspeed[0]=0;
background_vspeed[1]=0;
background_vspeed[2]=back_extravspeed/3;
background_vspeed[3]=back_extravspeed/4;
background_vspeed[4]=back_extravspeed/5;
background_vspeed[5]=0;
background_hspeed[6]=back_extravspeed/12;
}

//Rotate cursor parts
global.rot1 += 2.5;
global.rot2 -= 4;
global.rot3 += 6;

//Handle Goliath Weaponsmith Bay
if(global.lolship[global.mymid] = 3)
 weaponsmith(dstock);

//Find the player farthest from you, but within view range
farthestdist = 0;
farthesttarget = -1;
for(i = 1; i &lt; 8; i += 1)
{
 if(global.activated[i] = 0) continue;
 if(global.playership[i] = view_object) continue;
 loldist = point_distance(view_object.x, view_object.y, global.playership[i].x, global.playership[i].y);
 if(loldist &lt;= 900 &amp;&amp; loldist &gt; farthestdist)
 {
  farthestdist = loldist;
  farthesttarget = global.playership[i];
 }
}

//Targetting
//Target the enemy closest to the cursor
oldtarget = foundtarget;
if(obj_ship.armor &gt; 0)
 foundtarget = instance_nearest(mouse_x,mouse_y,prnt_enemy);

//Check if there is a target
if(farthesttarget &gt; -1)
{
    view_focusx = farthesttarget.x;
    if(farthesttarget.x &lt; 64)
        view_focusx = 66;
    if(farthesttarget.x &gt; room_width-64)
        view_focusx = room_width-66;
    view_focusy = farthesttarget.y;
    if(farthesttarget.y &lt; 64)
        view_focusy = 66;
    if(farthesttarget.y &gt; room_height-64)
        view_focusy = room_height-66;
        
 //Check if the target is moving out of view
 if(view_hview[0] &lt; 1480 &amp;&amp; view_wview[0] &lt; room_width-increx &amp;&amp;
  
 (view_focusx &lt; view_xview[0]+64 || view_focusx &gt; view_xview[0]+view_wview[0]-64 || view_focusy&lt;view_yview[0]+64 || view_focusy &gt; view_yview[0]+view_hview[0]-64))
 {
  //Expand the view to keep it seen
  view_wview[0] += increx;
  view_hview[0] += increy;
  stall = 1;
 }
 //Check if the view is larger than normal
 if(view_hview[0] &gt; viewheight)
 {
  //Check if the target is moving closer
  if(stall = 1 &amp;&amp; view_focusx &gt; view_xview[0]+128 &amp;&amp; view_focusx &lt; view_xview[0]+view_wview[0]-128 &amp;&amp; view_focusy &gt; view_yview[0]+128 &amp;&amp; view_focusy &lt; view_yview[0]+view_hview[0]-128)
  {
   //Shrink the view as needed
   stall = 0;
   alarm[6] = 180;
  }
 }
}
else
{
 //If there is no target, check to see if the view is larger
 //than normal
 if(stall = 1 &amp;&amp; view_hview[0] &gt; viewheight)
 {
  //Shrink the view as needed
   stall = 0;
   alarm[6] = 180;
 }
 foundtarget = -1;
}
//Convert the distance to target to be used by the targetting meter
if(foundtarget != -1 &amp;&amp; instance_exists(foundtarget))
 targetdist = ceil(point_distance(view_object.x, view_object.y, foundtarget.x, foundtarget.y)/33.33);
else
 targetdist = 0;
if(targetdist &gt; 27)
 foundtarget = -1;

//Creeate a new cursor effect
if(foundtarget != -1 &amp;&amp; foundtarget != oldtarget)
{
    with(obj_lockoncursor)
        instance_destroy();
    newlockon = instance_create(0, 0, obj_lockoncursor);
    newlockon.target = foundtarget;
    newlockon.direction = global.rot2;
}

//Center your ship
screen_shake(view_object);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_postgrid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
close button
if(global.musictoggle = 0)
{
    sga_DestroyEmitter( global.gamemusic );
    global.gamemusic = sga_TrackPlay( -1, "Resources\Lobby1-Quasar.ogg", 1, 0 );
}
//Check if you are host
if(global.master = true)
{
 //Remove the game from the games list if you made the game on it
 if(global.gameslist = 1)
        sql_remove(global.myipaddress); 
 //Set time until exiting the game
 alarm[1]=2;
 exit;
}
//If you are a client, send the disconnection message 
//to the host and return to the connecting
//room
clearbuffer();
writebyte(CLIENT_DROP);
writebyte(global.mymid);
writestring(global.name);
if(obj_ship.ismine = 1)
 writestring(global.name+" has RAGEQUIT the game.")
else
 writestring(global.name+" has left the game.") 
sendmessage(global.host);
alarm[1]=2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_changeweapon, 1, 0);
switch(selectx)
{
 case 0:
      keyboard_key_press(ord('2'));
      keyboard_key_release(ord('2'));
 break;
 case 32:
      keyboard_key_press(ord('3'));
      keyboard_key_release(ord('3'));
 break;
 case 64:
      keyboard_key_press(ord('4'));
      keyboard_key_release(ord('4'));
 break;
 case 96:
      keyboard_key_press(ord('1'));
      keyboard_key_release(ord('1'));
 break;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_changeweapon, 1, 0);
switch(selectx)
{
 case 0:
      keyboard_key_press(ord('4'));
      keyboard_key_release(ord('4'));
 break;
 case 32:
      keyboard_key_press(ord('1'));
      keyboard_key_release(ord('1'));
 break;
 case 64:
      keyboard_key_press(ord('2'));
      keyboard_key_release(ord('2'));
 break;
 case 96:
      keyboard_key_press(ord('3'));
      keyboard_key_release(ord('3'));
 break;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exit if the player is alive
if(obj_ship.armor &gt; 0 || obj_ship.beserk = 1)
 exit;

//Loop to find the mid value of the currently viewed player
for(i = 0; i &lt; 8; i += 1)
{
 //Skip if not active
 if(global.activated[i] = 0 &amp;&amp; i &gt; 0) continue;
 if(global.playership[i] = global.object_view)
 {
  //Reset view trigger
  foundview = 0;
  //Loop through the mids following the viewed mid
  for(ii = i+1; ii &lt; 8; ii += 1)
  {
   //Skip inactive slots and dead players
   if(global.activated[ii] = 0 &amp;&amp; ii &gt; 0) continue;  
   if(global.playership[ii].x &gt; room_width || global.playership[ii] = obj_dud) continue;
   //Set the view to follow the found player
   global.object_view = global.playership[ii];
   foundview = 1;
   break;
  }
  //If no player has yet been found, loop through mids before the viewed mid
  if(foundview = 0)
   for(ii = 0; ii &lt; i; ii += 1)
   {
    //Skip inactive slots and dead players
    if(global.activated[ii] = 0 &amp;&amp; ii &gt; 0) continue;  
    if(global.playership[ii].x &gt; room_width || global.playership[ii] = obj_dud) continue;
    //Set the view to follow the found player
    global.object_view = global.playership[ii];
    break;
   }
  break;
 }
}
view_object = global.object_view;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exit if the player is alive
if(obj_ship.armor &gt; 0 || obj_ship.beserk = 1)
 exit;

//Loop to find the mid value of the currently viewed player
for(i = 0; i &lt; 8; i += 1)
{
 //Skip if not active
 if(global.activated[i] = 0 &amp;&amp; i &gt; 0) continue;
 if(global.playership[i] = view_object)
 {
  //Reset view trigger
  foundview = 0;
  //Loop through the mids following the viewed mid
  for(ii = i+1; ii &lt; 8; ii += 1)
  {
   //Skip inactive slots and dead players
   if(global.activated[ii] = 0 &amp;&amp; ii &gt; 0) continue;  
   if(global.playership[ii].x &gt; room_width || global.playership[ii] = obj_dud) continue;
   //Set the view to follow the found player
   view_object = global.playership[ii];
   foundview = 1;
   break;
  }
  //If no player has yet been found, loop through mids before the viewed mid
  if(foundview = 0)
   for(ii = 0; ii &lt; i; ii += 1)
   {
    //Skip inactive slots and dead players
    if(global.activated[ii] = 0 &amp;&amp; ii &gt; 0) continue;  
    if(global.playership[ii].x &gt; room_width || global.playership[ii] = obj_dud) continue;
    //Set the view to follow the found player
    view_object = global.playership[ii];
    break;
   }
  break;
 }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Delete temporary data from memory
sprite_delete(global.wallsprite);


audio_stop_all();
draw_texture_flush();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the scaling value
scaling = view_hview[0]/480;
//Draw cloud layer on victa tundra
if(room = rm_victatundra)
 draw_background_tiled(global.cloudback, background_x[6], background_y[6]);
//Draw announcement text, if there is any
if(announcealpha &gt; 0)
{
 draw_set_halign(fa_center);
 draw_set_valign(fa_middle);
 draw_set_font(fnt_bigtext);
 draw_set_alpha(announcealpha);
 draw_text_bordered(view_xview[0]+view_wview[0]/2, view_yview[0]+130*scaling, announcement, scaling, 1, announcement_color);
 draw_set_halign(fa_left);
 draw_set_valign(fa_top);
}
//Draw equipped weapons
check_weapons();
switch(global.shipselect)
{
 case 1:
      draw_sprite_ext(global.esecondimage[1], 0, view_xview[0], view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[1], 1);
      draw_sprite_ext(global.esecondimage[2], 0, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[2], 1);
      draw_sprite_ext(global.deployimage[1], 0, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[1], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[1]/obj_ship.maxdstock[1])*24, 28, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
      draw_sprite_ext(global.deployimage[2], 0, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[2], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[2]/obj_ship.maxdstock[2])*24, 28, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
 break;
 case 2:
      draw_sprite_ext(global.esecondimage[1], 0, view_xview[0], view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[1], 1);
      draw_sprite_ext(global.esecondimage[2], 0, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[2], 1);
      draw_sprite_ext(global.esecondimage[3], 0, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[3], 1);
      draw_sprite_ext(global.deployimage[1], 0, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[1], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[1]/obj_ship.maxdstock[1])*24, 28, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
 break;
 case 3:
      draw_sprite_ext(global.esecondimage[1], 0, view_xview[0], view_yview[0]+72*scaling, scaling, scaling, 0, esecondfade[1], 1);
      draw_sprite_ext(global.deployimage[1], 0, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[1], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[1]/obj_ship.maxdstock[1])*24, 28, view_xview[0]+32*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
      draw_sprite_ext(global.deployimage[2], 0, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[2], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[2]/obj_ship.maxdstock[2])*24, 28, view_xview[0]+64*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
      draw_sprite_ext(global.deployimage[3], 0, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, deployfade[3], 1);
      draw_sprite_part_ext(spr_deploybar, 0, 0, 0, (obj_ship.deploystock[3]/obj_ship.maxdstock[3])*24, 28, view_xview[0]+96*scaling, view_yview[0]+72*scaling, scaling, scaling, c_white, 1);
 break;
} 
with(obj_weaponflash)
    draw_sprite_ext(sprite_index, image_index, view_xview[0]+xstart*obj_mod.scaling, view_yview[0]+72*obj_mod.scaling, obj_mod.scaling, obj_mod.scaling, 0, c_white, 1);
    
//Draw the highlighter
draw_sprite_ext(spr_numbers_selected, 0, view_xview[0]+selectx*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, c_white, 1);

//Draw Armor, Shield, Energy, and Ammo bars
if(obj_ship.armor &gt; 0)
{
 armorratio = obj_ship.armor/obj_ship.maxarmor;
 if(armorratio &lt; armorpart)
  armorpart -= 0.02;
 else
  armorpart = armorratio;
 draw_sprite_part_ext(spr_armorbar, 0, 0, 0, 4+armorpart*233, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, 1);
}
else
    if(global.shipselect = 2 &amp;&amp; obj_ship.beserk = 1)
        draw_sprite_part_ext(spr_beserkbar, obj_ship.beserkeffect.image_index, 0, 0, 4+(obj_ship.alarm[11]/300)*233, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, 1);    
if(obj_ship.shield &gt; 0)
{
 shieldratio = obj_ship.shield/obj_ship.maxshield;
 if(shieldratio &lt; shieldpart)
  shieldpart -= 0.02;
 else
  shieldpart = shieldratio;
 draw_sprite_part_ext(spr_shieldbar, 0, 0, 0, 4+shieldpart*233, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, 0.4+(0.6*(obj_ship.shield/obj_ship.maxshield)));
}
else
 shieldpart = 0;
if(obj_ship.energy &gt; 0)
{
    draw_sprite_part_ext(spr_energybar, 0, 0, 0, 107+(obj_ship.energy/100)*130, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, obj_ship.heat/50);
    draw_sprite_part_ext(spr_energybar, 1, 0, 0, 107+(obj_ship.energy/100)*130, 86, view_xview[0], view_yview[0], scaling, scaling, c_white, 1-obj_ship.heat/50); 
}
if(obj_ship.cooldown = 0)
    draw_sprite_ext(spr_overheatbar, 0, view_xview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
if(instance_exists(obj_overheatshine))
    draw_sprite_ext(spr_overheatshine, obj_overheatshine.image_index, view_xview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
   

if(obj_ship.deploystock[dstock] &gt; 0)
 draw_sprite_part_ext(spr_ammobar, maxdstock, 0, 0, 81+(obj_ship.deploystock[dstock]/obj_ship.maxdstock[dstock])*157, 64, view_xview[0], view_yview[0], scaling, scaling, c_white, 1);

//Draw the gauge backgrounds
draw_sprite_ext(spr_gauges, 0, view_xview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
//Draw the space hotkey icon
if(global.spacehot != 0)
 draw_sprite_ext(spr_numbers_icon, 5, view_xview[0]+spacex*scaling, view_yview[0]+72*scaling, scaling, scaling, 0, c_white, 1);
//Draw the match status
switch(global.matchtype)
{
 case "stock":
      switch(global.team[global.mymid])
      {
       case 1:
            for(i = 0; i &lt; global.ships; i += 1)
             draw_sprite_ext(spr_lifecount, global.shipselect, view_xview[0]+i*shipspace*scaling, view_yview[0], scaling, scaling, 0, c_white, .7);
       break;
       case 2:
            for(i = 0; i &lt; global.ships; i += 1)
             draw_sprite_ext(spr_lifecount, global.shipselect+3, view_xview[0]+i*shipspace*scaling, view_yview[0], scaling, scaling, 0, c_white, .7);
       break;
      }
 break;
 case "death":
      draw_set_font(fnt_chat);
      draw_set_alpha(0.7);
      draw_set_color(global.matchcolor);
      minute = floor(date_minute_span(global.time, global.endtime));
      second = floor(date_second_span(global.time, global.endtime)-minute*60);
      draw_text_transformed(view_xview[0]+10*scaling, view_yview[0]+5*scaling, string(minute)+":"+string(second), scaling, scaling, 0);
 break;
}

//Draw the radar
draw_sprite_ext(spr_radar, 0, view_xview[0]+view_wview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
//Draw the map of the walls
draw_sprite_part_ext(global.wallsprite, 0, (obj_ship.x-1600)/16, (obj_ship.y-1600)/16, 200, 200, view_xview[0]+view_wview[0]-113*scaling,  view_yview[0]+11*scaling, 0.5*scaling, 0.5*scaling, c_white, 0.8);
//Check which loop to set to
for(i = 0; i &lt; 8; i += 1)
{
 //Check to make sure the current number is not your own if you are not master
 if(global.mymid != i &amp;&amp; (global.activated[i] = 1 || i = 0))
 {
  //Set radar point color
  if(global.playership[i].ally = true)
   radarpoint = global.redblue;
  else
   radarpoint = global.bluered;
  //Set radar point position
  //radardist = point_distance(obj_ship.x, obj_ship.y, global.playership[radarplayer].x, global.playership[radarplayer].y);
  radarx = ((global.playership[i].x-obj_ship.x)*50)/1500;
  radary = ((global.playership[i].y-obj_ship.y)*50)/1500;
  //Draw radar point if it is in range
  if(abs(radarx) &lt;51 &amp;&amp; abs(radary) &lt; 51)
   draw_sprite_ext(spr_radar_player, radarpoint, view_xview[0]+view_wview[0]-65*scaling+radarx*scaling, view_yview[0]+62*scaling+radary*scaling, scaling, scaling, global.playership[i].image_angle, c_white, 1);
 }
}
  
draw_set_font(fnt_chat);
//Draw the framerate
draw_set_color(c_white);
draw_text_transformed(view_xview[0]+10*scaling, view_yview[0]+view_hview[0]-20*scaling, string(fps*global.framerate), scaling, scaling, 0);

//Draw the chat bar if chatting
switch(global.chatting)
{
 case true:
      draw_set_color(c_white);
      draw_sprite_ext(spr_chatinput, 0, view_xview[0], view_yview[0]+view_hview[0], scaling, scaling, 0, c_white, 1);
      //Stop more input if max is reached
      if(string_length(keyboard_string) &gt; 60)
       keyboard_string = string_copy(keyboard_string, 0, 60);
      
      //Undo same-letter spams
      lastletter = string_copy(keyboard_string, string_length(keyboard_string), 1);
      keyboard_string = string_replace(keyboard_string, lastletter+lastletter+lastletter+lastletter, lastletter+lastletter+lastletter);
      
      //Undo '#'
      keyboard_string = string_replace(keyboard_string, '#', '');
      
      //Find the correct text to fit into the bar
      for(i = string_length(keyboard_string); i &gt;= 0; i -= 1)
       if(string_width(string_copy(keyboard_string, i, string_length(keyboard_string)-i)) &gt; 280 || i = 0)
       {
        startchat = i;
        stopchat = string_length(keyboard_string)+1-i;
        break;  
       }
      //Draw the text in the chat bar
      draw_text_transformed(view_xview[0]+14*scaling, view_yview[0]+454*scaling, string_copy(keyboard_string, startchat, stopchat)+flashing, scaling, scaling, 0);
      draw_sprite_ext(spr_extchat, 0, view_xview[0], view_yview[0], scaling, scaling, 0, c_white, 1);
      //draw chat
      draw_set_color(c_white);
      for(i = 0; i &lt;= 16; i += 1)
      {
       draw_text_ext_transformed(view_xview[0]+14*scaling, view_yview[0]+(406-(i*18))*scaling, extchatline[16-i], 9, 300, scaling, scaling, 0);
      }
 break;
 case false:
      //draw chat
      for(i = 0; i &lt;= 4; i += 1)
      {
       draw_set_color(chatcolor[4-i]);
       draw_set_alpha(chatalpha[4-i]);
       draw_text_ext_transformed(view_xview[0]+14*scaling, view_yview[0]+(406-(i*18))*scaling, chatline[4-i], 9, 300, scaling, scaling, 0);
       chatalpha[4-i] -= 0.005;
      } 
 break;
}

//Show score window when ` is pressed
draw_set_alpha(1);
if(keyboard_check_direct(vk_tab))
{
 global.playerfps[global.mymid] = fps;
 draw_sprite_ext(spr_pscores, 0, view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], scaling, scaling, 0, c_white, 1);
 draw_set_font(fnt_chat);
 for(i = 0; i &lt; 8; i += 1)
 {
  if(global.activated[i] = 0 &amp;&amp; i &gt; 0) continue;
  switch(global.team[i])
  {
   case 1:
        draw_set_color(c_red);
   break;
   case 2:
        draw_set_color(c_navy);
   break;
  }
  draw_set_halign(fa_left);
  draw_text_transformed(view_xview[0]+view_wview[0]-247*scaling, view_yview[0]+view_hview[0]-(246-(i*20))*scaling, global.othername[i], scaling, scaling, 0);
  draw_set_halign(fa_center);
  draw_text_transformed(view_xview[0]+view_wview[0]-110*scaling, view_yview[0]+view_hview[0]-(246-(i*20))*scaling, string(global.playerfps[i]), scaling, scaling, 0);
  draw_text_transformed(view_xview[0]+view_wview[0]-82*scaling, view_yview[0]+view_hview[0]-(246-(i*20))*scaling, string(global.ping[i]), scaling, scaling, 0);
  draw_text_transformed(view_xview[0]+view_wview[0]-56*scaling, view_yview[0]+view_hview[0]-(246-(i*20))*scaling, string(global.kills[i]), scaling, scaling, 0);
  draw_text_transformed(view_xview[0]+view_wview[0]-29*scaling, view_yview[0]+view_hview[0]-(246-(i*20))*scaling, string(global.deaths[i]), scaling, scaling, 0);
 }
 draw_set_color(c_black);
 draw_text_transformed(view_xview[0]+view_wview[0]-52*scaling, view_yview[0]+view_hview[0]-305*scaling, string(global.redscore), scaling, scaling, 0);
 draw_text_transformed(view_xview[0]+view_wview[0]-52*scaling, view_yview[0]+view_hview[0]-288*scaling, string(global.bluescore), scaling, scaling, 0); 
 draw_set_halign(fa_left);
}

//If you are targeting an enemy, draw the targetting cursor
if(foundtarget &gt; -1 &amp;&amp; !instance_exists(obj_lockoncursor))
 draw_sprite_ext(spr_targetcursor, targetdist, foundtarget.x, foundtarget.y, scaling, scaling, global.rot2, c_white, 0.7);
 
draw_set_alpha(blackalpha);
draw_set_color(c_black);
draw_rectangle(view_xview[0]-30, view_yview[0]-30, view_xview[0]+view_wview[0]+30, view_yview[0]+view_hview[0]+30, 0);

//Draw the cursor
draw_sprite_ext(spr_cursor, targethit, mouse_x, mouse_y, scaling*0.7, scaling*0.7, global.rot1, c_white, 0.7);
draw_sprite_ext(spr_cursor, targethit+1, mouse_x, mouse_y, scaling*0.7, scaling*0.7, global.rot2, c_white, 0.7);
draw_sprite_ext(spr_cursor, targethit+2, mouse_x, mouse_y, scaling*0.7, scaling*0.7, global.rot3, c_white, 0.7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;
audio_play_sound(snd_changeweapon, 1, 0);

//Switch to the correct new attack
switch(global.shipselect)
{
 case 1:
      dstock = 2;
      switch(global.deploy[2])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
 case 2:
      dstock = 1;
      switch(global.deploy[1])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
 case 3:
      dstock = 3;
      switch(global.deploy[3])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
}
selectx = 96;

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;
audio_play_sound(snd_changeweapon, 1, 0);

selectx = 64;
//Switch to the correct new attack
switch(global.shipselect)
{
 case 1:
      dstock = 1;
      switch(global.deploy[1])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
 case 2:
      dstock = 0;
      switch(global.esecond[3])
      {
       case 1:
            global.secondary = 1; //Fusion
       break;
       case 2:
            global.secondary = 2; //Stardust
       break;
       case 3:
            global.secondary = 5; //Barrier
       break;
       case 4:
            global.secondary = 10; //Beam
       break;
       case 5:
            global.secondary = 9; //Formation
       break;
       case 6:
            global.secondary = 11; //Sparkline
       break;
       case 7:
            global.secondary = 12; //Burst
       break;
       case 8:
            global.secondary = 14; //Slash
       break;
       case 9:
            global.secondary = 15; //Horizon
       break;
       case 10:
            global.secondary = 22; //Spiral
       break;
       case 11:
            global.secondary = 23; //Laser
       break;
       case 12:
            global.secondary = 24; //Trail  
       break;
       case 13:
            global.secondary = 25; //Reflection
       break;
       case 14:
            global.secondary = 26; //Storm
       break;
       case 15:
            global.secondary = 27; //Trigger
       break;
      }
 break;
 case 3:
      dstock = 2;
      switch(global.deploy[2])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
}

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;
audio_play_sound(snd_changeweapon, 1, 0);
selectx = 32;
//Switch to the correct new attack
switch(global.shipselect)
{
 case 1:
 case 2:
      dstock = 0;
      switch(global.esecond[2])
      {
       case 1:
            global.secondary = 1; //Fusion
       break;
       case 2:
            global.secondary = 2; //Stardust
       break;
       case 3:
            global.secondary = 5; //Barrier
       break;
       case 4:
             global.secondary = 10; //Beam
       break;
       case 5:
            global.secondary = 9; //Formation
       break;
       case 6:
            global.secondary = 11; //Sparkline
       break;
       case 7:
            global.secondary = 12; //Burst
       break;
       case 8:
            global.secondary = 14; //Slash
       break;
       case 9:
            global.secondary = 15; //Horizon
       break;
       case 10:
            global.secondary = 22; //Spiral
       break;
       case 11:
            global.secondary = 23; //Laser
       break;
       case 12:
            global.secondary = 24; //Trail  
       break;
       case 13:
            global.secondary = 25; //Reflection
       break;
       case 14:
            global.secondary = 26; //Storm
       break;
       case 15:
            global.secondary = 27; //Trigger
       break;
      }
 break;
 case 3:
      dstock = 1;
      switch(global.deploy[1])
      {
       case 1:
            global.secondary = 0; //Dual Missile
            maxdstock = 4;
       break;
       case 2:
            global.secondary = 4; //Layer Missile
            maxdstock = 3;
       break;
       case 3:
            global.secondary = 3; //Hunter Mine
            maxdstock = 3;
       break;
       case 4:
            global.secondary = 6; //Locust Missile
            maxdstock = 4;
       break;
       case 5:
            global.secondary = 7; //Phantom Mine
            maxdstock = 4;
       break;
       case 6:
            global.secondary = 8; //Solus
            maxdstock = 2;
       break;
       case 7:
            global.secondary = 13; //Trident Missile
            maxdstock = 4;
       break;
       case 8:
            global.secondary = 17; //Shock Missile
            maxdstock = 3;
       break;
       case 9:
            global.secondary = 16; //Hacker Mine
            maxdstock = 2;
       break;
       case 10:
            global.secondary = 18; //Hermit Missile
            maxdstock = 4;
       break;
       case 11:
            global.secondary = 19; //Strike Missile
            maxdstock = 10;
       break;
       case 12:
            global.secondary = 20; //Strike Mine
            maxdstock = 8;
       break;
       case 13:
            global.secondary = 21; //Turret
            maxdstock = 3;
       break;
       case 14:
            global.secondary = 28; //Split Missile
            maxdstock = 3;
       break;
       case 15:
            global.secondary = 29; //Cluster Mine
            maxdstock = 3;
       break;
      }
 break;
}

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true) exit;
audio_play_sound(snd_changeweapon, 1, 0);
dstock = 0;
selectx = 0;
//Switch to the correct new attack
switch(global.esecond[1])
{
 case 1:
      global.secondary = 1; //Fusion
 break;
 case 2:
      global.secondary = 2; //Stardust
 break;
 case 3:
      global.secondary = 5; //Barrier
 break;
 case 4:
      global.secondary = 10; //Beam
 break;
 case 5:
      global.secondary = 9; //Formation
 break;
 case 6:
      global.secondary = 11; //Sparkline
 break;
 case 7:
      global.secondary = 12; //Burst
 break;
 case 8:
      global.secondary = 14; //Slash
 break;
 case 9:
      global.secondary = 15; //Horizon
 break;
 case 10:
      global.secondary = 22; //Spiral
 break;
 case 11:
      global.secondary = 23; //Laser
 break;
 case 12:
      global.secondary = 24; //Trail  
 break;
 case 13:
      global.secondary = 25; //Reflection
 break;
 case 14:
      global.secondary = 26; //Storm
 break;
 case 15:
      global.secondary = 27; //Trigger
 break;
}

obj_ship.redirectfire = 1;
with(obj_ship)
    event_perform(ev_mouse, ev_global_right_press);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.musictoggle = 0)
{   
    audio_stop_music();
    audio_play_music(music_quasar, 1);
}
//Check if you are host
if(global.master = true)
{
 //Remove the game from the games list if you made the game on it
 if(global.gameslist = 1)
        sql_remove(global.myipaddress); 
 //Set time until exiting the game
 alarm[1]=2;
 exit;
}
//If you are a client, send the disconnection message 
//to the host and return to the connecting
//room
clearbuffer(0);
writebyte(CLIENT_DROP, 0);
writebyte(global.mymid, 0);
writestring(global.name, 0);
if(obj_ship.ismine = 1)
 writestring(global.name+" has RAGEQUIT the game.", 0)
else
 writestring(global.name+" has left the game.", 0) 
sendmessage(global.host, 0, 0, 0);
alarm[1]=4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(global.chatting)
{
 case false:
      global.chatting = true;
      keyboard_string = '';
      //Send a prediction to show the stopping
      with(obj_ship)
      {
       predictspeed = 2;
       predictturn = 0;
       thisturn = 0;
       //Send the prediction
       clearbuffer(0);
       packet_label_write(6, global.mymid);
       writebyte(prediction_compress(thisturn, predictturn, predictspeed, 0), 0);
       //Send to everyone if host
       if(global.master = true)
        client_sendall(1, 0);
       else
        //Send to host if client
        sendmessage(global.udpsock, global.playerip, global.playerport, 0);
      }
 break;
 case true:
      global.chatting = false;
      //Check if text was typed
      if(keyboard_string = '') break;
      
      //Send a prediction to show movement
      with(obj_ship)
      {
       predictspeed = 0;
       predictturn = 0;
       thisturn = 0;
       //Send the prediction
       clearbuffer(0);
       packet_label_write(6, global.mymid);
       writebyte(prediction_compress(thisturn, predictturn, predictspeed, 0), 0);
       //Send to everyone if host
       if(global.master = true)
        client_sendall(1, 0);
       else
        //Send to host if client
        sendmessage(global.udpsock, global.playerip, global.playerport, 0);
      }      
      //create the new chat line and take note of its middle
      sendline = global.name+": "+ keyboard_string;
      middle = string_length(sendline)/2;
      //Break up text if there is no space near the middle
      if(string_replace(string_copy(sendline, middle-4, 8), ' ', '-') = string_copy(sendline, middle-4, 8) &amp;&amp; string_length(sendline) &gt; 30)
       sendline = string_insert(' ', sendline, middle);
            
      //Send it to your chat
      chatline_add(sendline, c_white);
      //Send the defeat to everyone
      clearbuffer(0);
      packet_label_write(7, global.mymid);
      writestring(chatline[4], 0);
      //Send to everyone if host
      if(global.master = true)
       client_sendall(0, 0);
      else
       //Send to host if client
       sendmessage(global.host, 0, 0, 0);
 break;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
