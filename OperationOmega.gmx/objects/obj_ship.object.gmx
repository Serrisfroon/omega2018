<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alphastar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prnt_ally</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Start following this object
view_object = id;

nextturnblur = 0;
totalturnblur = 0;

snapdir = 0;

//Initialize redirect variable for instant firing
redirectfire = 0;


//Set invincibility time
invincible = 0.6;
alarm[10] = 120;

//Set all barriers to ignore you
with(obj_barrier_enemy)
 ignore = 1;

//Set ability to shoot
shoot = 0;
nowshoot = 0;
abilityactive = 0;
global.playership[global.mymid] = obj_ship;

warping = -1;

//Set initial target values
target = -1;
targetx = 0;
targety = 0;

controlling = true;

//Initialize flame trail particles
deployhits = 0;
system = part_system_create();

//Intialize weapon-specific variables
stardust= 0;
whips = 0;
extraslow = 0;
dusted = 0;
hacked = false;
shocked = false;
chained = 0;

//Initialize sparkline node tracking
node = -1;
node2 = -1;
node3 = -1;

//Initialize flame effect
for(i = 0; i &lt;= 11; i += 1)
{
    flamelife[i] = 0;
    flamex[i] = 0;
    flamey[i] = 0;
    flamedir[i] = 0;
    flameimage[i] = 0;
}
nextflame = 0;

//Set energy to max
energy = 100;
heat = 50;
cooldown = 1;
beserk = 0;

//Initialize energy regenration and set time until regen speeds up
switch(global.primary)
{
    case 1:
        basegain = 26/60;
    break;
    case 2:
        basegain = 18/60;
    break;
    case 3:
        basegain = 29/60;
    break;
    case 4:
        basegain = 22/60;
    break;
    case 5:
        basegain = 19/60;
    break;
    case 6:
        basegain = 24/60;
    break;
    case 7:
        basegain = 23/60;
    break;
    case 8:
        basegain = 28/60;
    break;
    case 9:
        basegain = 21/60;
    break;
    case 10:
        basegain = 20/60;
    break;
}    
    
energygain = basegain;
reduceregen = 2/3600;

//Initialize shield regen
alarm[4] = 1;


//Set ship-dependant values: shield, armor, max shield, max armor, and how 
//fast you turn automatically
switch(global.shipselect)
{
    case 1: //Alphastar
        shield = 30;
        armor = 100;
        maxshield = 30;
        maxarmor = 100;
        forceturn = 5;
        maxspeed = 7;
        lowspeed = 2;
        regentime = 300;
        regenrate = 0.05;
        controlturn = 0.75;
    break;
    case 2: //Swiftwing
        shield = 30;
        armor = 55;
        maxshield = 30;
        maxarmor = 55;
        forceturn = 8;
        maxspeed = 10;
        lowspeed = 4;
        regentime = 300;
        regenrate = 0.05;
        controlturn = 1.2;
    break;
    case 3: //Goliath
        shield = 50;
        armor = 130;
        maxshield = 50;
        maxarmor = 130;
        forceturn = 3;
        maxspeed = 5;
        lowspeed = 1;
        regentime = 300;
        regenrate = 0.05;
        controlturn = 0.5;      
    break;
}


//Set deploy values
deploystock[1] = 0;
deploystock[2] = 0;
deploystock[3] = 0;
for(i = 1; i &lt;= 3; i += 1)
{
    if(i &gt; 1 &amp;&amp; global.shipselect = 2) continue;
    if(i = 3 &amp;&amp; global.shipselect = 1) continue;
    switch(global.deploy[i])
    {
        case 1:
            deploystock[i] = 4; //Dual Missile
            maxdstock[i] = 4;
            if(global.spacesecond = 0)
            {
                deploystock[i] = 5;
                maxdstock[i] = 5;
            }
        break;
        case 2:
            deploystock[i] = 3; //Layer Missile
            maxdstock[i] = 3;
            if(global.spacesecond = 4)
            {
                deploystock[i] = 4;
                maxdstock[i] = 4;
            }
        break;
        case 3:
            deploystock[i] = 3; //Hunter Mine
            maxdstock[i] = 3;
            if(global.spacesecond = 3)
            {
                deploystock[i] = 4;
                maxdstock[i] = 4;
            }
        break;
        case 4:
            deploystock[i] = 4; //Locust Missile
            maxdstock[i] = 4;
            if(global.spacesecond = 6)
            {
                deploystock[i] = 5;
                maxdstock[i] = 5;
            }
        break;
        case 5:
            deploystock[i] = 4; //Phantom Mine
            maxdstock[i] = 4;
            if(global.spacesecond = 7)
            {
                deploystock[i] = 5;
                maxdstock[i] = 5;
            }
        break;
        case 6:
            deploystock[i] = 2; //Solus
            maxdstock[i] = 2;
            if(global.spacesecond = 8)
            {
                deploystock[i] = 3;
                maxdstock[i] = 3;
            }
        break;
        case 7:
            deploystock[i] = 4; //Trident Missile
            maxdstock[i] = 4;
            if(global.spacesecond = 13)
            {
                deploystock[i] = 5;
                maxdstock[i] = 5;
            }
        break;
        case 8:
            deploystock[i] = 3; //Shock Missile
            maxdstock[i] = 3;
            if(global.spacesecond = 17)
            {
                deploystock[i] = 4;
                maxdstock[i] = 4;
            }
        break;
        case 9:
            deploystock[i] = 2; //Hacker mine
            maxdstock[i] = 2;
            if(global.spacesecond = 16)
            {
                deploystock[i] = 3;
                maxdstock[i] = 3;
            }
        break;
        case 10:
            deploystock[i] = 3; //Counter Missile
            maxdstock[i] = 3;
            if(global.spacesecond = 18)
            {
                deploystock[i] = 4;
                maxdstock[i] = 4;
            }
        break;
        case 11:
            deploystock[i] = 10; //Strike Missile
            maxdstock[i] = 10;
        break;
        case 12:
            deploystock[i] = 8; //Strike Mine
            maxdstock[i] = 8;
            if(global.spacesecond = 20)
            {
                deploystock[i] = 9;
                maxdstock[i] = 9;
            }
        break;
        case 13:
            deploystock[i] = 2; //Turret
            maxdstock[i] = 2;
            if(global.spacesecond = 21)
            {
                deploystock[i] = 3;
                maxdstock[i] = 3;
            }
        break;
        case 14:
            deploystock[i] = 3; //Split Missile
            maxdstock[i] = 3;
            if(global.spacesecond = 28)
            {
                deploystock[i] = 4;
                maxdstock[i] = 4;
            }
        break;
        case 15:
            deploystock[i] = 3; //Cluster Mine
            maxdstock[i] = 3;
            if(global.spacesecond = 29)
            {
                deploystock[i] = 4;
                maxdstock[i] = 4;
            }
        break;
    }
}


//Initialize damage threshold
threshold = 1;

//Initialize chaining
chaining = 0;

hit = 0;
secondary = 0;

//Set damage smoke and initialize smoke alarm(lol)
smoke = 6;
alarm[2] = 1;

//Set the correct colors to be displayed on radar
global.redblue = 0;
global.bluered = 1;

//Change to correct ship image
switch(global.shipselect)
{
     case 1:
          sprite_index = spr_alphastar;
     break;
     case 2:
          sprite_index = spr_swiftwing;
     break;
     case 3:
          sprite_index = spr_goliath;
     break;
}
//Change color if on blue team
if(global.team[global.mymid] = 2)
{
     //Set the correct colors to be displayed on radar
     global.redblue = 1;
     global.bluered = 0;
     switch(global.shipselect)
     {
          case 1:
               sprite_index = spr_alphastar_enemy;
          break;
          case 2:
               sprite_index = spr_swiftwing_enemy;
          break;
          case 3:
               sprite_index = spr_goliath_enemy;
          break;
     }
}

//Set a new spawn point at random
nextspawn = irandom(7);
global.myspawnx = global.spawnx[nextspawn];
global.myspawny = global.spawny[nextspawn];

//Face the center
direction = point_direction(x, y, room_width/2, room_height/2);
//Initialize facedir. This is your target direction
facedir = direction;

//Initialize refresh packet rate
refreshing = 0;

//Ragequit variable
ismine = 0;

//Initialize prediction variables
predictturn = 0;
predictspeed = 0;
thisturn = 0;
lastturn = 0;

//Set the assist damage variables
for(i = 0; i &lt; 8; i += 1)
{
    if(i = global.mymid) continue;
    assistdamage = global.damagedealt[i];
}

//Set the ship's mid
mid = global.mymid;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stop looping sounds
audio_stop_sound(snd_stardust);
audio_stop_sound(snd_whip);

//Disable collisions
mask_index = spr_empty;
        
//Destroy your turrets
with(obj_turret)
    if(mid = global.mymid)
        instance_destroy();
                
with(obj_trigger)
    if(mid = global.mymid)
        instance_destroy();


//Destroy all flame trails
for(i = 0; i &lt; deployhits; i += 1)
 part_emitter_destroy(system, emit[i]);
 
//Update score
if(defeatmid != 20)
    global.kills[defeatmid] += 1;
global.deaths[global.mymid] += 1;
for(i = 0; i &lt; 8; i += 1)
{
    if(i = global.mymid || i = defeatmid) continue;
    if(global.damagedealt[i] &gt; assistdamage+50)
        global.assists[i] += 1;
}

switch(global.matchtype)
{
     case "stock":
          //Take a ship from your lives
          global.ships -= 1;
          //Reduce your team's score by 1
          switch(global.team[global.mymid])
          {
               case 1:
                    global.redscore -= 1;
               break;
               case 2:
                    global.bluescore -= 1;
               break;
          }
     break;
     case "death":
          //Increase other team's score by 1
          switch(global.team[global.mymid])
          {
               case 1:
                    global.bluescore += 1;
               break;
               case 2:
                    global.redscore += 1;
               break;
          }
     break;
}

//Reset targetting
with(obj_mod)
{ 
    foundtarget = -1;
    targetdist = point_distance(obj_ship.x, obj_ship.y, -10000, -10000);
}

//Create a defeated ship in your place and give it your movement
defeat = instance_create(x, y, obj_deadship);
defeat.direction = direction;
defeat.speed = speed+1;
defeat.sprite_index = sprite_index;

//Change the view's focus
view_object[0] = defeat;
defeat.alarm[1] = 1;

with(obj_mod)
{
     //Send it to your chat
     chatline_add(obj_ship.message, c_maroon);
     if(global.team[global.mymid] = 1)
     {
          chatcolor[4] = c_navy;
          lolcolor[4] = 2;
     }
     else
     {
          chatcolor[4] = c_maroon;
          lolcolor[4] = 1;
     }
}

//Create an announcement
if(obj_mod.announcing = 0 &amp;&amp; defeatmid != 20)
{
     obj_mod.announcing  = 1;
     obj_mod.announcement = global.othername[defeatmid]+" defeated "+global.name;
     obj_mod.announcement_color = obj_mod.chatcolor[4];
}

//Send the defeat to everyone
clearbuffer(0);
packet_label_write(3, global.mymid);
writebyte(defeatmid, 0);
writebyte(nextspawn, 0);
writebyte(obj_mod.lolcolor[4], 0);
writestring(obj_mod.chatline[4], 0);
//Send to everyone if host
if(global.master = true)
    client_sendall(0, 0);
else
    //Send to host if client
    sendmessage(global.host, 0, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(beserkeffect)
    instance_destroy();
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//End invincibility
invincible = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset stardust hit limiter
dusted = 0;
threshold = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Whip
//If there are parts of the attack left, reset the alarm
//to create them
if(global.sfxtoggle = 0)
    audio_emitter_position(emit_whip, (view_xview[0]+view_wview[0]/2)-x, y-(view_yview[0]+view_hview[0]/2), 0);
    
if(whips &gt; 0)
{
    alarm[8] = 1;
    whips -= 1;
}
else
    if(global.sfxtoggle = 0)
    {
        audio_stop_sound(sound_whip);
        audio_emitter_free(emit_whip);
    }
    
//Set target direction
aim = point_direction(x, y, hitx, hity);
//Get movement speed of the current bullet
switch(whips)
{
    case 19:
         whipspeed = 12;
    break;
    case 18:
         whipspeed = 10;
    break;
    case 17:
         whipspeed = 8;
    break;
    case 16:
         whipspeed = 6;
    break;
    case 15:
         whipspeed = 4;
    break;
    case 14:
         whipspeed = 2;
    break;
    case 13:
         whipspeed = 3;
    break;
    case 12:
         whipspeed = 4;
    break;
    case 11:
         whipspeed = 5.5;
    break;
    case 10:
         whipspeed = 7;
    break;
    case 9:
         whipspeed = 8.5;
    break;
    case 8:
         whipspeed = 10;
    break;
    case 7:
         whipspeed = 12;
    break;
    case 6:
         whipspeed = 14;
    break;
    case 5:
         whipspeed = 16;
    break;
    case 4:
         whipspeed = 19;
    break;
    case 3:
         whipspeed = 18;
    break;
    case 2:
         whipspeed = 16;
    break;
    case 1:
         whipspeed = 14.5;
    break;
    case 0:
         whipspeed = 13;
    break;
}
bullet = bullet_create(x, y, "Whip", aim, global.mymid, whipspeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destroy all burn trail effects ad reset effect counter
for(i = 0; i &lt; deployhits; i += 1)
    part_emitter_destroy(system, emit[i]);
depoyhits = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset shock variable
shocked = false;
basegain *= 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset hack variable
hacked = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(shocked = true || beserk = 1)
{
    alarm[4] = 120;
    exit;
}
if(shield &lt; maxshield)
{
    if(armor/maxarmor &gt; shield/maxshield)
        shield += regenrate;
    else
        shield += regenrate/2;
}
alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>abilityactive = 0;
maxspeed = 5;
forceturn = 3;
if(speed &gt; 5)
    speed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if smoking should be occuring
if(smoke &lt; 6)
{
    //Select a color
    if(smoke &gt; 3) 
        effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_gray);
    else
        switch(irandom(5))
        {
            case 1:
                effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_gray);
            break;
            case 2:
                effect_create_above(ef_smoke, x-6+random(12), y-6+random(12), 0, c_dkgray);
            break;
            default:
                //Make a random color somewhere between pure red and pure yellow
                create_burning(x-6+random(12), y-6+random(12));
            break;
        }
}
//Set the time until the next smoke effect, dependant on how bad smoking is
alarm[2]=(6*smoke+10);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stardust
//If there are parts of the attack left, reset the alarm
//to create them

if(stardust &gt; 0)
{
alarm[1] = 1;
stardust -= 1;
}

//Set target direction
aim = point_direction(x, y, hitx, hity);
//Create a stardust part
fuse = instance_create(x, y, obj_stardust);
fuse.mid = global.mymid;
fuse.amplified = staramp;
//Set movement dependant on which part it is
switch(stardust)
{
     case 24:
          fuse.speed = 11;
          fuse.direction = aim;
     break;
     case 23:
          fuse.speed = 13;
          fuse.direction = aim+11;
     break;
     case 22:
          fuse.speed = 7;
          fuse.direction = aim-17;
     break;
     case 21:
          fuse.speed = 9;
          fuse.direction = aim+7;
     break;
     case 20:
          fuse.speed = 15;
          fuse.direction = aim+21;
     break;
     case 19:
          fuse.speed = 10;
          fuse.direction = aim-9;
     break;
     case 18:
          fuse.speed = 12;
          fuse.direction = aim+1;
     break;
     case 17:
          fuse.speed = 8;
          fuse.direction = aim-13;
     break;
     case 16:
          fuse.speed = 14;
          fuse.direction = aim+19;
     break;
     case 15:
          fuse.speed = 13;
          fuse.direction = aim-25;
     break;
     case 14:
          fuse.speed = 10;
          fuse.direction = aim+5;
     break;
     case 13:
          fuse.speed = 14;
          fuse.direction = aim-15;
     break;
     case 12:
          fuse.speed = 12;
          fuse.direction = aim+17;
     break;
     case 11:
          fuse.speed = 15;
          fuse.direction = aim-5;
     break;
     case 10:
          fuse.speed = 10;
          fuse.direction = aim+13;
     break;
     case 9:
          fuse.speed = 8;
          fuse.direction = aim-23;
     break;
     case 8:
          fuse.speed = 13;
          fuse.direction = aim+9;
     break;
     case 7:
          fuse.speed = 9;
          fuse.direction = aim-1;
     break;
     case 6:
          fuse.speed = 12;
          fuse.direction = aim+15;
     break;
     case 5:
          fuse.speed = 15;
          fuse.direction = aim-11;
     break;
     case 4:
          fuse.speed = 10;
          fuse.direction = aim-19;
     break;
     case 3:
          fuse.speed = 11;
          fuse.direction = aim-7;
     break;
     case 2:
          fuse.speed = 9;
          fuse.direction = aim+3;
     break;
     case 1:
          fuse.speed = 14;
          fuse.direction = aim-21;
     break;
     case 0:
          fuse.speed = 8;
          fuse.direction = aim+25;
     break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Fusion
//If there are parts of the attack left, reset the alarm
//to create them
if(fusions &gt; 0)
{
    alarm[0] = 5;
}
fusions -= 1;
//Create a fusion part
fuse = instance_create(x, y, obj_fusion);
//Set its movement
fuse.speed = 10;
fuse.direction = 60*fusions;
//Set its target location
fuse.targetx = hitx;
fuse.targety = hity;
fuse.mid = global.mymid;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Primary weapon fire delay
shoot -= 1;

//Change the angle of the ship
image_angle = facedir;

//update the direction of this ship
prespeed = speed;
//update the direction of this ship
 if(abilityactive = 1 &amp;&amp; global.shipselect = 1)
 {
  controlturn = 0.1
 }
 else
 {
  controlturn = prespeed/7
 }
hspeed += lengthdir_x(controlturn, facedir);
vspeed += lengthdir_y(controlturn, facedir);
speed = prespeed;

//Handle swiftwing warping
if(warping &gt; -1)
{
    //Perform the warp at the 15th frame
    if(warping = 30)
    {
        x = warpx;
        y = warpy;
        view_object = id;
    }
    //Return to the normal sprite at the last frame
    if(warping = 0)
    {
        sprite_index = spr_swiftwing;
        if(global.team[global.mymid] = 2)
            sprite_index = spr_swiftwing_enemy;
    }
    //Count toward the next frame
    warping -= 1;
} 

//Update burn trail effect positions
for(i = 0; i &lt; deployhits; i += 1)
    part_emitter_region(system, emit[i], x+lengthdir_x(8, direction+effectdir[i]), x+lengthdir_x(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), y+lengthdir_y(8, direction+effectdir[i]), ps_shape_ellipse, ps_distr_linear);

//Set the minimum speed. If braking, change
//the minimum to 0.
//Brake if S is pressed, if you are chatting, or if you were hacked
speedmin = lowspeed;
if(keyboard_check(ord('S')) || global.chatting = true || hacked = true) 
{
    speedmin = 0;
    speed -= 0.2;
}

//Lower speed
if(speed &gt; speedmin) 
    speed -= 0.04;
else 
    speed = speedmin;

 
//Constantly recover energy the current energy regen rate
if(energy &lt; 100) energy += energygain;
if(nowshoot = 0 &amp;&amp; energygain &lt; basegain) energygain += reduceregen;
if(heat &lt; 50) 
    heat += 0.2;
else 
{
    if(cooldown = 0)
        instance_create(x, y, obj_overheatshine);
    cooldown = 1;
}
//Bounce back into the map if you move out of it
if(x &lt; 16 || x &gt; room_width-16 || y &lt; 16 || y &gt; room_height-16)
{
    if(x &lt; 16)
    {
        x += 10;
        hspeed = -hspeed;
        facedir = direction;
    }
    if(x &gt; room_width-16)
    {
        x -= 10;
        hspeed = -hspeed;
        facedir = direction;
    }
    if(y &lt; 16)
    {
        vspeed = -vspeed;
        y += 10;
        facedir = direction;
    }
    if(y &gt; room_height-16)
    {
        vspeed = -vspeed;
        y -= 10;
        facedir = direction;
    }
    obj_mod.refreshing = 0;
    exit;
}

wall_collision();

//Autoturn
//Check if autoturn is enabled or if you are chatting
if(speed &gt; 0.1 || global.chatting = true || hacked = true)
 exit;

//Set the direction to the cursor
point = point_direction(x, y, mouse_x, mouse_y);

//Check which direction you will turn in, and see if it is different from before
//Turn towards mouse cursor
thisturn = step_towards_direction(point, 3);
facedir = direction;

if(thisturn != lastturn)
//Send turning prediction packet if it is different
{
    //Take note of the last direction sent
    lastturn = thisturn;
    clearbuffer(0);
    packet_label_write(6, global.mymid);
    writebyte(prediction_compress(thisturn, predictturn, predictspeed, 0), 0);
    //Send to everyone if host
    if(global.master = true)
        client_sendall(0, 0);
    else
        //Send to host if client
        sendmessage(global.host, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_storm_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(4, 0, 0, 0, "Storm");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_trail_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(5, 0, 0, 0, "Trail");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_serpent_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(6, 0, 0, 0, "Serpent");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spiral_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(8, 0, 0, 0, "Spiral");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sparkline_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(10, 0, 0, 6, "Sparkline");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_formationa_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(7, 0, 0, 0, "Formation");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stardust_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(5, 0, 0.07, 0, "Stardust");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fusion_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(6, 0, 0, 2, "Fusion");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemystasis_field">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(speed &gt; 3)
    speed = 3;
extraslow = 20; 
chained = 1;
other.slowing = 1;
other.alarm[2] = 3;


if(other.damaged[global.mymid] = 1)
    exit;
other.damaged[global.mymid] = 1;
sfx_play(snd_hit, x, y);

//Take damage
if(shocked = false)
 shield -= 1;
else
{
 armor -= 1;
}

//If there is no more shield, transfer damage to armor
if(shield &lt; 0) 
{
 armor += shield;
 shield = 0;
}

//If there is shield left, create effect
if(shield &gt; 0)
{
 hurt = instance_create(0, 0, obj_hit);
 hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
 hurt.hurting = id;
}

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0)
{
 //Take note of the player that defeated you
 defeatmid = other.mid;
 //Make a defeat message
 if(global.ships &gt; 1)
  random_message(global.othername[other.mid], global.name, "Stasis");
 else
  message = global.othername[other.mid]+" ELIMINATED "+global.name+".(Stasis)"
 //Destroy this object
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crossfire_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(other.damage, 0, 0, 0, "Helix");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flank_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(6, 0, 0, 0, "Seeker");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_clustermine_small_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(11, 11, 0, 8, "Cluster Mine");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_splitmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.damage &gt; 4)
{
 other.split = instance_create(other.x, other.y, obj_splitmissile_enemy);
 other.split.mid = other.mid;
 other.split.direction = other.direction-30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
 other.split = instance_create(other.x, other.y, obj_splitmissile_enemy);
 other.split.mid = other.mid;
 other.split.direction = other.direction+30;
 other.split.damage = other.damage-2+other.amplified*2;
 other.split.oldmid = mid;
}
attack_collision(other.damage, other.damage, 0, 8, "Split Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var regdmg, penedmg;

regdmg = 12;
penedmg = 15;

if(other.amplified = 1)
{
    regdmg = 0;
    penedmg = 27;
}
attack_collision(regdmg, penedmg, 0, 8, "Strike Mine");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.mid != global.mymid || other.recollect = 0)
 exit;
//Take the mine away from your mine count
//Take from the correct deploy count
for(i = 1; i &lt;= 3; i += 1)
{
 if(global.deploy[i] = 12)
    if(deploystock[i] != maxdstock[i])
    {
        deploystock[i] += 1;
    }

}

with(other)
{
 collected = 1;
 sfx_play(snd_pickup, x, y);
 instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_strikemissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(12, 12, 0, 4, "Strike Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hermitmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(12+(other.absorb*3), 12+(other.absorb*3), 0, 8, "Counter Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hackermine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(attack_collision(6, 11, 0, 8, "Hacker Mine") = 1)
{
    hacked = true;
    alarm[5] = 90;
    //Send the information
    clearbuffer(0);
    packet_label_write(15, global.mymid);
    //Send to everyone if host
    if(global.master = true)
        client_sendall(0, 0);
    else
        //Send to host if client
        sendmessage(global.host, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shockmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(attack_collision(10, 10, 0, 8, "Shock Missile") = 1)
{
    if(shocked = false)
    {
        shocked = true;
        basegain /= 3;
        if(energygain &gt; basegain)
            energygain = basegain;
    }
    if(other.amplified = 0)
        alarm[6] = 600;
    else
        alarm[6] = 900;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tridentmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(4, other.dmg, 0, 4, "Trident Missile");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_phantommine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(22, 16, 0, 8, "Phantom Mine");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_locustmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(invincible = 0.7)
    exit;


if(beserk = 0)
{
    //Check if there's a nearby paladin turret
    var shielded;
    shielded = 1;
    if(instance_exists(obj_turret))
        if(distance_to_object(instance_nearest(x, y, obj_turret)) &lt; 400)
            shielded = 2;
    //Take damage
    if(invincible = 1)
    {
        //Check if under shock effect
       if(shocked = false)
            shield -= 3/shielded;
        else
        {
            shield -= 1;
            armor -= 2;
        }
    
        //If there is no more shield, transfer damage to armor
        if(shield &lt; 0) 
        {
            //Do double damage to armor
            armor += shield*1.167;
            shield = 0;
        }
    }
    
    //If there is shield left, create effect
    if(shield &gt; 0)
    {
     hurt = instance_create(0, 0, obj_hit);
     hurt.hitdir = point_direction(x, y, other.xprevious, other.yprevious);
     hurt.hurting = id;
    }
}

//Destroy the attack
with(other) instance_destroy();

//Update smoking
if(armor &lt;= (maxarmor*100)/60)
 smoke = floor(armor/(maxarmor/10));

//Reset shield regen time
alarm[4] = regentime;

//Check if your ship has been defeated
if(armor &lt;= 0 &amp;&amp; beserk = 0)
{
    //Take note of the player that defeated you
    defeatmid = other.mid;
    //Make a defeat message
    if(global.ships &gt; 1)
        random_message(global.othername[other.mid], global.name, "Locust Missile");
    else
        message = global.othername[other.mid]+" ELIMINATED "+global.name+".(Locust Missile)";
    if(global.shipselect != 2)
    {
        //Destroy this object
        instance_destroy();
    }
    else
    {
        armor = 0;
        shield = 0;
        beserk = 1;
        energygain = 0.8;
        energy = 100;
        heat = 50;
        cooldown = 1;
        beserkeffect = instance_create(x, y, obj_beserkeffect);
        obj_mod.sendping = 0;
        alarm[11] = 300;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_huntermine_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(18, 26, 0, 8, "Hunter Mine");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_layermissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var directdir, regdmg, penedmg;
//Find out ideal direction for a "direct hit"
directdir = point_direction(other.x, other.y, x, y);
//Base connection damage and explosion
penedmg = 15;
regdmg = 10+other.bonusdamage;
other.hits = 1;

//If the missile's direction is near the ideal direction, add more damage and explosion
if(directdir &gt;= other.direction-4 &amp;&amp; directdir &lt;= other.direction+4)
{
    penedmg += 20;
    regdmg += 10;
    other.hits = 2;
}
//If the missile's direction is VERY close to the ideal direction, add even more damage and explosion
if(directdir &gt;= other.direction-1 &amp;&amp; directdir &lt;= other.direction+1)
{
    penedmg += 25;
    regdmg += 10;
    other.hits = 3;
}

attack_collision(regdmg, penedmg, 0, 8, "Layer Missile");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dualmissile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_collision(10, 10, 0, 8, "Dual Missile");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;
//Accelerate- increse speed until a max speed is reached
bonusspeed = 0;
if(shield &gt; maxshield-0.2)
    bonusspeed = 3;
if(speed &lt; maxspeed+bonusspeed)
    speed += 0.2;

if(speed &gt; maxspeed+0.2 &amp;&amp; predictspeed = 1)
{
    predictspeed = 3;
    obj_mod.refreshing = 0;
}
//Disable acceleration if under stasis effect
if(extraslow &gt; 0)
{
    extraslow -= 1;
    if(speed &gt; 3)
        speed = 3;    
    exit;
}
chained = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;
//Turn clockwise at the right speed
facedir -= forceturn;
if(facedir &lt; 0) facedir += 360;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;

facedir += forceturn;
if(facedir &gt; 360) facedir -= 360;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do the same as ctrl
event_perform(ev_keyboard, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Exit if the ability isn't active
if(abilityactive = 0 || global.shipselect != 1)
    exit;
    
//Drain energy to use drift ability
energy -= 0.45;
if(energy &lt;= 0)
{
    energy = 0;
    //Switch controlturn to make Alpha Drift ability
    controlturn = 0.75;
    abilityactive = 0;
}      
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do the same as ctrl
event_perform(ev_keyboard, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nowshoot = 0;
shooting = 0;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;

if(global.firingmode = 1 &amp;&amp; redirectfire = 0)
{
    event_perform(ev_keypress, vk_space);
    exit;
}
//Trigger Alphastar passive
amplified = 0;
redirectfire = 0;

switch(global.secondary)
{
    
    //Dual Missile
    case 0:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_dualmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_dualmissile);
        missile.startdir = facedir;
        missile.direction = facedir-90;
        missile.speed = 4*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
      
        //Create the second missile
        missile = instance_create(x, y, obj_dualmissile);
        missile.startdir = facedir;
        missile.direction = facedir+90;
        missile.speed = 4*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        
        deploystock[obj_mod.dstock] -= 1;

        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(1, 0)//dual missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Fusion
    case 1:
        //Check to see if you have enough energy to use it
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Initialize the attack
        alarm[0] = 1;
        fusions = 5;
        if(amplified = 1)
            fusions = 7;
        //Set the targetted coordinates
        hitx = mouse_x;
        hity = mouse_y;
        //Reduce energy
        energy -= 25;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(2, 0)//Fusion secondary
        writeshort(hitx, 0);
        writeshort(hity, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Stardust
    case 2:
        //Check to see if you have enough energy to use it
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if still shooting out stardust
        if(stardust &gt; 0)
            exit;
        //Initialize the attack
                  
        if(global.sfxtoggle = 0)  
            sfx_play(snd_swifttele, x, y);
        
        alarm[1] = 1;
        stardust = 25;
        staramp = 0;
        if(amplified = 1)
            staramp = 1;
        //Set the targetted coordinates
        hitx = mouse_x;
        hity = mouse_y;
        //Reduce energy
        energy -= 25;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(3, 0)//Stardust secondary
        writeshort(hitx, 0);
        writeshort(hity, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
         
    //Hunter Mine
    case 3:
        //Check if an existing hunter mine belongs to you
        with(obj_huntermine)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        if(deploystock[obj_mod.dstock] &lt; 1)
         {
           audio_play_sound(snd_unable, 1, 0);
           exit;
         }

        hmine=instance_create(x, y, obj_huntermine)
        hmine.mid = global.mymid;
        hmine.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;           
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(4, 0)//Hunter Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Layer Missile
    case 4:
        //Check if an existing dual missile belongs to you
        with(obj_layermissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
           audio_play_sound(snd_unable, 1, 0);
           exit;
        }
        //Check if you have missiles left
        sfx_play(snd_missile, x, y);
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_layermissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 12*global.framerate;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(6, 0)//layer missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Barrier
    case 5:
        //Check if you have energy for the barrier
        if(energy &lt; 40)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }        
        //Reduce Energy
        energy -= 40;
        //Create a barrier where the cursor is, and give it the appropriate direction
        with(obj_barrier)
            if(mid = global.mymid)
                instance_destroy();
        barrier = instance_create(mouse_x, mouse_y, obj_barrier);
        barrier.direction = point_direction(x, y, barrier.x, barrier.y);
        barrier.amplified = amplified;
        barrier.mid = global.mymid;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(7, 0)//Barrier secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(point_direction(x, y, barrier.x, barrier.y)/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Locust Missile
    case 6:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_locustmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Check if you have missiles left
        if(amplified = 0)
            for(i = 0; i &lt; 6; i += 1)
            {
                //Create the missile and give it its properties
                missile = instance_create(x, y, obj_locustmissile);
                missile.direction = facedir-90+(i*60);
                missile.target = obj_mod.foundtarget;
                missile.mid = global.mymid;
            }
        else
            for(i = 0; i &lt; 8; i += 1)
            {
                //Create the missile and give it its properties
                missile = instance_create(x, y, obj_locustmissile);
                missile.direction = facedir-22.5+(i*45);
                missile.target = obj_mod.foundtarget;
                missile.mid = global.mymid;
            }
          
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;      
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(8, 0)//locust missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Phantom Mine
    case 7:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_phantommine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(9, 0)//Phantom Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Solus
    case 8:
        //Check if you have soluses left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing solus belongs to you
        with(obj_solus)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Reduce soluses
        deploystock[obj_mod.dstock] -= 1;
        //Create the solus where the cursor is
        solus = instance_create(x, y, obj_solus);
        solus.mid = global.mymid;
        solus.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(10, 0)//Solus secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Formation
    case 9:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if you have energy for the barrier
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
       //Reduce Energy
        energy -= 30;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_formationa);
        form.target = obj_mod.foundtarget;
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
           testtarget+=1;
           if(testtarget != global.mymid)
               if(global.playership[testtarget] = obj_mod.foundtarget)
                   break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(11, 0)//Formation secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writebyte(testtarget, 0);  
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Beam
    case 10:
        //Check if you have energy for the beam and that you are not moving
        if(energy &lt; 99 || speed &gt; 0)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 60;
        if(amplified = 0)
            energy -= 20;
        //Create a beam and give it the correct direction
        beam = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_beam);
        beam.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        beam.mid = global.mymid;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(12, 0)//Beam secondary
        writeshort(x+lengthdir_x(9, facedir), 0);
        writeshort(y+lengthdir_y(9, facedir), 0);
        writebyte(beam.direction/1.5, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Sparkline
    case 11:
        //Check if you have enough energy
        if(energy &lt; 15)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if three nodes already exist
        if(instance_exists(node3) &amp;&amp; node3 != -1)
            exit;
        //Check if existing nodes are attacking
        if(instance_exists(node2) &amp;&amp; node2 != -1)
            if(node2.stage = 1)
                exit;
        if(instance_exists(node) &amp;&amp; node != -1)
            if(node.stage = 1)
                exit;
        //Reduce Energy
        energy -= 15;
        if(amplified = 0)
            maxdist = 480;
        else
            maxdist = 680;
        //Create an infinite loop to section off this code
        while(true)
        {
            //Destroy existing nodes if this node is fired too far away
            if(instance_exists(node) &amp;&amp; node != -1)
                if(point_distance(mouse_x, mouse_y, node.x, node.y) &gt; maxdist)
                {
                    with(node) instance_destroy();
                    if(instance_exists(node2) &amp;&amp; node2 != -1)
                        with(node2) instance_destroy();
                }
            if(instance_exists(node2) &amp;&amp; node2 != -1)
                if(point_distance(mouse_x, mouse_y, node2.x, node2.y) &gt; maxdist || amplified = 0)
                {
                    with(node) instance_destroy();
                    with(node2) instance_destroy();
                }
            //Check if a node exists
            if(instance_exists(node) &amp;&amp; node != -1)
            {
                //Check if a second node exists
                if(instance_exists(node2) &amp;&amp; node2 != -1)
                {
                    //Create a third node
                    node3 = instance_create(x, y, obj_sparkline);
                    node3.direction = point_direction(x, y, mouse_x, mouse_y);
                    node3.targetx = mouse_x;
                    node3.targety = mouse_y;
                    node3.final = 1;
                    node3.mid = global.mymid;
                    //Make the second node connect to this node
                    node2.second = node3;
                    //Connect to the first node
                    node3.second = node;
                    //Note this is the third node
                    nodecount = 3;
                    //Break the loop
                    break;
                }
                //Create a second node
                node2 = instance_create(x, y, obj_sparkline);
                node2.direction = point_direction(x, y, mouse_x, mouse_y);
                node2.targetx = mouse_x;
                node2.targety = mouse_y;
                node2.final = 0;
                node2.mid = global.mymid;
                //Make the first node connect to this node
                node.second = node2;
                //Note this is the third node
                nodecount = 2;
                //Break the loop
                break;
            }
            //Create a node
            node = instance_create(x, y, obj_sparkline);
            node.direction = point_direction(x, y, mouse_x, mouse_y);
            node.targetx = mouse_x;
            node.targety = mouse_y;
            node.final = 0;
            node.mid = global.mymid;
            //Note this is the third node
            nodecount = 1;
            //Break the loop
            break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(13, 0)//Sparkline secondary
        writebyte(nodecount, 0);
        writeshort(x, 0);
        writeshort(y, 0);
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Burst
    case 12:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_burst);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(14, 0)//Burst secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Trident Missile
    case 13:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_tridentmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile1 = instance_create(x, y, obj_tridentmissile);
        missile1.startdir = facedir;
        missile1.direction = facedir;
        missile1.speed = 4*global.framerate;
        missile1.target = obj_mod.foundtarget;
        missile1.mid = global.mymid;
        missile1.trio = 1;
        missile1.amplified = amplified;
        
        //Create the second missile
        missile2 = instance_create(x, y, obj_tridentmissile);
        missile2.startdir = facedir;
        missile2.direction = facedir-90;
        missile2.speed = 4*global.framerate;
        missile2.target = obj_mod.foundtarget;
        missile2.mid = global.mymid;
        missile2.trio = 2;
        missile2.middle = missile1;
        missile2.amplified = amplified;
        
        //Create the last missile
        missile3 = instance_create(x, y, obj_tridentmissile);
        missile3.startdir = facedir;
        missile3.direction = facedir+90;
        missile3.speed = 4*global.framerate;
        missile3.target = obj_mod.foundtarget;
        missile3.mid = global.mymid;
        missile3.trio = 3;
        missile3.middle = missile1;
        missile3.amplified = amplified;
        
        //Take note of the last two missile in the first missile
        missile1.second = missile2;
        missile1.third = missile3;
        
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
         testtarget+=1;
         if(testtarget != global.mymid)
          if(global.playership[testtarget] = obj_mod.foundtarget)
           break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(15, 0)//Trident missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Slash
    case 14:
        //Check if you have energy for the barrier
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
    
        //Reduce Energy
        energy -= 25;
        //Create and send the initial shot at the cursor
        form = instance_create(x+lengthdir_x(32, point_direction(x, y,mouse_x, mouse_y)), y+lengthdir_y(32, point_direction(x, y,mouse_x, mouse_y)), obj_slash);
        form.mid = global.mymid;
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.direction = point_direction(x, y,mouse_x, mouse_y);
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(16, 0)//Slash secondary
        writeshort(form.x, 0);
        writeshort(form.y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Horizon
    case 15:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if you have energy for the barrier
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
                   
        //Reduce Energy
        energy -= 25;
        //Crete and send the initial shot at the cursor
        loldir = point_direction(x, y, obj_mod.foundtarget.x, obj_mod.foundtarget.y);
        form = instance_create(obj_mod.foundtarget.x+lengthdir_x(500, loldir), obj_mod.foundtarget.y+lengthdir_y(500, loldir), obj_horizon);
        form.target = obj_mod.foundtarget;
        form.direction = loldir-180;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(17, 0)//Horizon secondary
        writeshort(form.x, 0);
        writeshort(form.y, 0);    
        writebyte(form.direction/1.5, 0);  
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Hacker Mine
    case 16:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_hackermine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(18, 0)//Hacker Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
   
    break;
    
    //Shock Missile
    case 17:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_shockmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_shockmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 12*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(19, 0)//Shock missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Hermit Missile
    case 18:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing hermit missile belongs to you
        with(obj_hermitmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_hermitmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13*global.framerate;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        missile.target = obj_mod.foundtarget;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(22, 0)//hermit missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Strike Missile
    case 19:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[obj_mod.dstock] &lt; 1)
        {
          audio_play_sound(snd_unable, 1, 0);
          exit;
        }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_strikemissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(23, 0)//Shock missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Strike Mine
    case 20:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_strikemine);
        phan.mid = global.mymid;
        phan.amplified =amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(24, 0)//Strike Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Turret
    case 21:
        //Check if you have soluses left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        if(obj_bulletcontrol.wallposition[floor(mouse_x/32), floor(mouse_y/32)] = true)
            exit;
        //Reduce soluses
        deploystock[obj_mod.dstock] -= 1;
        //Create the solus where the cursor is
        solus = instance_create(mouse_x, mouse_y, obj_turret);
        solus.mid = global.mymid;
        solus.amplified = amplified
        
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(25, 0)//Turret secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Spiral
    case 22:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_spiral);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(26, 0)//Spiral secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Whip
    case 23:
        //Check to see if you have enough energy to use it
        if(energy &lt; 20 || whips &gt; 0)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
                   
        if(global.sfxtoggle = 0)
        {
            emit_whip = audio_emitter_create();
            sound_whip = audio_play_sound_on(emit_whip, snd_whip, 1, 1);
            audio_emitter_position(emit_whip, x, y, 0);
        }
        alarm[8] = 1;
        
        if(amplified = 0)
         whips = 15;
        else
         whips = 20;
        //Set the targetted coordinates
        hitx = mouse_x;
        hity = mouse_y;
        //Reduce energy
        energy -= 20;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(27, 0)//Whip secondary
        writeshort(hitx, 0);
        writeshort(hity, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Trail
    case 24:
        //Check if you have energy for the barrier
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 30;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_trail);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(28, 0)//Trail secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(form.direction, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Serpent
    case 25:
        //Check if you have energy
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 30;
        //Create and send the shot at the cursor
        form = instance_create(x, y, obj_serpent);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.mid = global.mymid;
        form.target = 1;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(29, 0)//Serpent secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(form.direction, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Storm
    case 26:
        //Check if you have energy
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        with(obj_storm)
        {
            if(mid = global.mymid)
                age += 1;
            if(age = 4)
                instance_destroy();
        }
        with(obj_storm_wall)
        {
            if(mid = global.mymid)
                age += 1;
            if(age = 4)
                instance_destroy();
        }
        sfx_play(snd_storm, x, y);
        //Create and send shots at the cursor
        if(amplified = 0)
        {
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y);
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-30;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+30;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+15;
            storm.mid = global.mymid;
            storm = instance_create(mouse_x, mouse_y, obj_storm_wall);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-180;
            storm.x += lengthdir_x(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);
            storm.y += lengthdir_y(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);       
            storm.image_angle = storm.direction;
            storm.mid = global.mymid;
        }
        else
        {
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+5;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-5;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-25;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+25;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-35;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+35;
            storm.mid = global.mymid;
            storm = instance_create(mouse_x, mouse_y, obj_storm_wall);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-180;
            storm.x += lengthdir_x(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);
            storm.y += lengthdir_y(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);       
            storm.image_angle = storm.direction;
            storm.mid = global.mymid;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(30, 0)//Storm secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Trigger
    case 27:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        with(obj_trigger)
            if(speed &gt; 0)
                exit;
                
        //Reduce Energy
        energy -= 20;
        
        var direct;
        direct = 0;
        if(instance_exists(obj_trigger))
            if(instance_exists(directthis))
                direct = 1;
        if(direct = 0)
        {
            //Crete and send the initial shot at the cursor
            form = instance_create(x, y, obj_trigger);
            form.direction = point_direction(x, y, mouse_x, mouse_y);
            form.targetx = mouse_x;
            form.targety = mouse_y;
            form.mid = global.mymid;
            form.amplified = amplified;
            directthis = form;
        }
        else
        {
            sfx_play(snd_wave, directthis.x, directthis.y);
            directthis.targetx = mouse_x;
            directthis.targety = mouse_y;
            directthis.speed = 13;
            directthis.direction = point_direction(directthis.x, directthis.y, mouse_x, mouse_y);
            directthis.alarm[0] = 5;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(31, 0)//Trigger secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Split Missile
    case 28:
        //Check if an existing hermit missile belongs to you
        with(obj_splitmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Check if you have missiles left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_splitmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13*global.framerate;
        missile.mid = global.mymid;
        missile.oldmid = -1;
        missile.damage = 11;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(33, 0)//Split missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
        
    break;
    
    //Cluster Mine
    case 29:
        //Check if you have mines left
        if(deploystock[obj_mod.dstock] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Destroy nearby mines
        for(i = instance_nearest(x, y, obj_clustermine); i != noone; i = instance_nearest(x, y, obj_clustermine))
        {
            if(point_distance(x, y, i.x, i.y) &lt; 400)
                instance_destroy();
            else
                break;
        }
        for(i = instance_nearest(x, y, obj_clustermine_small); i != noone; i = instance_nearest(x, y, obj_clustermine_small))
        {
            if(point_distance(x, y, i.x, i.y) &lt; 400)
                instance_destroy();
            else
                break;
        }
        phan = instance_create(x, y, obj_clustermine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[obj_mod.dstock] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(34, 0)//Cluster Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nowshoot = 1;
shooting = 1;
obj_mod.refreshing = 0;

clearbuffer(0);
packet_label_write(14, global.mymid);
writeushort(global.primaryRNG[global.mymid], 0);
//Send to everyone if host
if(global.master = true)
    client_sendall(0, 0);
else
    //Send to host if client
    sendmessage(global.host, 0, 0, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Disable chatting if currently in chat mode
if(global.chatting = true)
    global.chatting = false;
 

//Disbale shooting if hacked or overheated
if(hacked = true) 
    exit;
    
energygain -= reduceregen;
if(energygain &lt; 0)
energygain = 0;
    
if(shoot &lt;= 0)
{

    nowshoot = 1;
    
    switch(global.primary)
    {
        
        //Needle Primary
        case 1:
            //set a fire rate
            shoot = 7;            
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;        
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 10);
            snapdir = (newdir-direction)/5;
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Needle", newdir-3+primary_random(6, global.mymid), global.mymid, 0);
        break;
        
        //Sonic
        case 2:
            shoot = 4;            
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 10);
            snapdir = (newdir-direction)/5;
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Sonic", newdir-7+primary_random(14, global.mymid), global.mymid, 0);
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Sonic", newdir-7+primary_random(14, global.mymid), global.mymid, 0);
        break;
        
        //Wave
        case 3:
            shoot = 15;            
            //Create the shot and give it speed and facedir
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 15);
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;        
            snapdir = (newdir-direction)/5;
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Wave", newdir-1+primary_random(2, global.mymid), global.mymid, 0);
        break;
        
        //Seeker
        case 4:
            shoot = 10;
            sfx_play(snd_flank, x, y);
            //Create the shot and give it speed and facedir
            flank = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_flank);
            flank.speed = 10.5+speed/2;
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 10);
            snapdir = (newdir-direction)/5;
            flank.direction = newdir-7+primary_random(14, global.mymid);
            flank.mid = global.mymid;
        break;
        
        //Stasis
        case 5:
            shoot = 25;
            //Create the shot and give it speed and facedir
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;      
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 10);
            snapdir = (newdir-direction)/5;
            bullet = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_stasisnew);
            sfx_play(snd_stasis, x, y);
            bullet.direction = newdir;
            bullet.speed = 7+speed;
            bullet.mid = global.mymid;
        break;
        
        //Helix
        case 6:
            shoot = 9;
            //Create the shot and give it speed and facedir
            sfx_play(snd_helix, x, y);
            cross = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_crossfire);
            cross.speed = 11.5+speed/2;
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 10);
            snapdir = (newdir-direction)/5;
            crossdir = newdir-7+primary_random(14, global.mymid);
            cross.direction = crossdir;
            cross.mid = global.mymid;
            cross.side = 1;
            //Create the shot and give it speed and facedir
            cross = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_crossfire);
            cross.speed = 11.5+speed/2;
            cross.direction = crossdir;
            cross.mid = global.mymid;
            cross.side = 2;
        break;
        
        //Siphon
        case 7:
            nowshoot = 0;
            shoot = 12;
            newdir = 0;
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],facedir-50,facedir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_partsystem.primarypart[global.team[mid]-1], 5);
            //Check if the target is nearby
            if(obj_mod.foundtarget &lt; 0 || point_distance(x, y, obj_mod.foundtarget.x, obj_mod.foundtarget.y) &gt; 400) 
            {
                heat -= 2;
                break;
            }
            //Check if the target is withing firing angle
            point = point_direction(x, y, obj_mod.foundtarget.x, obj_mod.foundtarget.y);
            if(aim_limit(facedir, point, 30) != point)
            {
                heat -= 2;
                break;
            }
            //Create the shot and give it speed and facedir
            nowshoot = 1;
            siphon = instance_create(0, 0, obj_siphon);
            siphon.mid = global.mymid;
            siphon.targetmid = obj_mod.foundtarget.mid;
            sfx_play(snd_siphon, x, y);
            //Absorb shield
            if(obj_mod.foundtarget.shield &gt; 0) shield += 2;
            if(shield &gt; maxshield) shield = maxshield;
        break;
        
        //Double Primary
        case 8:
            shoot = 10;
            sfx_play(snd_double, x, y);
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5; 
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 10);
            snapdir = (newdir-direction)/5;
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Double", newdir-5+primary_random(10, global.mymid), global.mymid, 0);
            //Fire the second shot at the closest enemy
            enemynear = instance_nearest(x, y, prnt_enemy);
            if(instance_exists(enemynear))
                bullet = bullet_create(x+lengthdir_x(9, facedir-180), y+lengthdir_y(9, facedir-180), "Double", aim_limit(facedir-180, point_direction(x, y, enemynear.x, enemynear.y), 30), global.mymid, 0);
            else
                bullet = bullet_create(x+lengthdir_x(9, facedir-180), y+lengthdir_y(9, facedir-180), "Double", newdir-180, global.mymid, 0);
        break;
        
        //Pierce Primary
        case 9:
            shoot = 7;
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;        
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 10);
            snapdir = (newdir-direction)/5;
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Pierce", newdir-4+primary_random(8, global.mymid), global.mymid, 0);
        break;
        
        //Spread Primary
        case 10:
            shoot = 20;
            sfx_play(snd_spread, x, y);
            //Find the newdir and create the bullets
            newdir = round(aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 60)/5)*5;  
            //Create an effect
            part_type_speed(obj_partsystem.primarypart[global.team[mid]-1],speed+1.68,speed+2.80,-0.04,0);
            part_type_direction(obj_partsystem.primarypart[global.team[mid]-1],newdir-50,newdir+50,0,0);
            part_particles_create(obj_partsystem.system, x+lengthdir_x(9, newdir), y+lengthdir_y(9, newdir), obj_partsystem.primarypart[global.team[mid]-1], 20);
            snapdir = (newdir-direction)/5;
            spreaddir = newdir-5+primary_random(10, global.mymid);  
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", spreaddir, global.mymid, 0);
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", spreaddir-15, global.mymid, 0);
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", spreaddir-30, global.mymid, 0);
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", spreaddir-45, global.mymid, 0);
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", spreaddir+15, global.mymid, 0);
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", spreaddir+30, global.mymid, 0);
            bullet = bullet_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), "Spread", spreaddir+45, global.mymid, 0);
        break;
    
    }
    
} 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_flame(direction);
draw_turnblur();
//Draw the ship
draw_sprite_ext(sprite_index, -1, x, y, 1, 1, image_angle, c_white, invincible);

if(abilityactive = 1 &amp;&amp; global.shipselect = 3)
    draw_sprite_ext(spr_goliath_hyperrush, nextflame, x, y, 1, 1, image_angle, c_white, invincible);

if(shocked = true)
    draw_sprite_ext(spr_shocksparks, nextflame, x, y, 1, 1, 0, c_white, 0.8);
if(beserk = true &amp;&amp; warping = -1)
    draw_sprite_ext(spr_swiftwing_beserkglow, beserkeffect.image_index, x, y, 1, 1, image_angle, c_white, 1);
//Draw the flame trail particles
part_system_drawit(system);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true || extraslow &gt; 0) exit;

predictspeed = 1;

boosteffect = instance_create(x+lengthdir_x(8, image_angle-180), y+lengthdir_y(8, image_angle-180), obj_boosteffect)
boosteffect.image_angle = image_angle;
boosteffect.source = obj_ship;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;

predictspeed = 2;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;

predictturn = 1;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;

predictturn = 2;
obj_mod.refreshing = 0;

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true) exit;

//Trigger Alphastar passive
amplified = 0;
if(global.lolship[global.mymid] = 1)
    amplified = 1;

switch(global.spacesecond)
{
    
    //Dual Missile
    case 0:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_dualmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_dualmissile);
        missile.startdir = facedir;
        missile.direction = facedir-90;
        missile.speed = 4*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
      
        //Create the second missile
        missile = instance_create(x, y, obj_dualmissile);
        missile.startdir = facedir;
        missile.direction = facedir+90;
        missile.speed = 4*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        
        deploystock[global.spacehot-3] -= 1;

        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(1, 0)//dual missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Fusion
    case 1:
        //Check to see if you have enough energy to use it
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Initialize the attack
        alarm[0] = 1;
        fusions = 5;
        if(amplified = 1)
            fusions = 7;
        //Set the targetted coordinates
        hitx = mouse_x;
        hity = mouse_y;
        //Reduce energy
        energy -= 25;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(2, 0)//Fusion secondary
        writeshort(hitx, 0);
        writeshort(hity, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Stardust
    case 2:
        //Check to see if you have enough energy to use it
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if still shooting out stardust
        if(stardust &gt; 0)
            exit;
        //Initialize the attack
                        
        if(global.sfxtoggle = 0)
            sfx_play(snd_swifttele, x, y);

        alarm[1] = 1;
        stardust = 25;
        staramp = 0;
        if(amplified = 1)
            staramp = 1;
        //Set the targetted coordinates
        hitx = mouse_x;
        hity = mouse_y;
        //Reduce energy
        energy -= 25;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(3, 0)//Stardust secondary
        writeshort(hitx, 0);
        writeshort(hity, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
         
    //Hunter Mine
    case 3:
        //Check if an existing hunter mine belongs to you
        with(obj_huntermine)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        if(deploystock[global.spacehot-3] &lt; 1)
         {
           audio_play_sound(snd_unable, 1, 0);
           exit;
         }

        hmine=instance_create(x, y, obj_huntermine)
        hmine.mid = global.mymid;
        hmine.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[global.spacehot-3] -= 1;           
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(4, 0)//Hunter Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Layer Missile
    case 4:
        //Check if an existing dual missile belongs to you
        with(obj_layermissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        if(deploystock[global.spacehot-3] &lt; 1)
        {
           audio_play_sound(snd_unable, 1, 0);
           exit;
        }
        //Check if you have missiles left
        sfx_play(snd_missile, x, y);
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_layermissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 12*global.framerate;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[global.spacehot-3] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(6, 0)//layer missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Barrier
    case 5:
        //Check if you have energy for the barrier
        if(energy &lt; 40)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }        
        //Reduce Energy
        energy -= 40;
        //Create a barrier where the cursor is, and give it the appropriate direction
        with(obj_barrier)
            if(mid = global.mymid)
                instance_destroy();
        barrier = instance_create(mouse_x, mouse_y, obj_barrier);
        barrier.direction = point_direction(x, y, barrier.x, barrier.y);
        barrier.amplified = amplified;
        barrier.mid = global.mymid;        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(7, 0)//Barrier secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(point_direction(x, y, barrier.x, barrier.y)/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Locust Missile
    case 6:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_locustmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Check if you have missiles left
        if(amplified = 0)
            for(i = 0; i &lt; 6; i += 1)
            {
                //Create the missile and give it its properties
                missile = instance_create(x, y, obj_locustmissile);
                missile.direction = facedir-90+(nextm*60);
                missile.target = obj_mod.foundtarget;
                missile.mid = global.mymid;
            }
        else
            for(i = 0; i &lt; 8; i += 1)
            {
                //Create the missile and give it its properties
                missile = instance_create(x, y, obj_locustmissile);
                missile.direction = facedir-22.5+(nextm*45);
                missile.target = obj_mod.foundtarget;
                missile.mid = global.mymid;
            }
          
        //Take the missiles away from your missile count
        deploystock[global.spacehot-3] -= 1;      
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(8, 0)//locust missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Phantom Mine
    case 7:
        //Check if you have mines left
        if(deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_phantommine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[global.spacehot-3] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(9, 0)//Phantom Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
         client_sendall(0, 0);
        else
        //Send to host if client
         sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Solus
    case 8:
        //Check if you have soluses left
        if(deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing solus belongs to you
        with(obj_solus)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Reduce soluses
        deploystock[global.spacehot-3] -= 1;
        //Create the solus where the cursor is
        solus = instance_create(x, y, obj_solus);
        solus.mid = global.mymid;
        solus.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(10, 0)//Solus secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Formation
    case 9:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if you have energy for the barrier
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 30;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_formationa);
        form.target = obj_mod.foundtarget;
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
           testtarget+=1;
           if(testtarget != global.mymid)
               if(global.playership[testtarget] = obj_mod.foundtarget)
                   break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(11, 0)//Formation secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writebyte(testtarget, 0);  
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Beam
    case 10:
        //Check if you have energy for the beam and that you are not moving
        if((energy &lt; 60 &amp;&amp; amplified = 1) || (energy &lt; 80 &amp;&amp; amplified = 0) || speed &gt; 0)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 60;
        if(amplified = 0)
            energy -= 20;
        //Create a beam and give it the correct direction
        beam = instance_create(x+lengthdir_x(9, facedir), y+lengthdir_y(9, facedir), obj_beam);
        beam.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        beam.mid = global.mymid;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(12, 0)//Beam secondary
        writeshort(x+lengthdir_x(9, facedir), 0);
        writeshort(y+lengthdir_y(9, facedir), 0);
        writebyte(beam.direction/1.5, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Sparkline
    case 11:
        //Check if you have enough energy
        if(energy &lt; 15)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if three nodes already exist
        if(instance_exists(node3) &amp;&amp; node3 != -1)
            exit;
        //Check if existing nodes are attacking
        if(instance_exists(node2) &amp;&amp; node2 != -1)
            if(node2.stage = 1)
                exit;
        if(instance_exists(node) &amp;&amp; node != -1)
            if(node.stage = 1)
                exit;
        //Reduce Energy
        energy -= 15;
        if(amplified = 0)
            maxdist = 480;
        else
            maxdist = 680;
        //Create an infinite loop to section off this code
        while(true)
        {
            //Destroy existing nodes if this node is fired too far away
            if(instance_exists(node) &amp;&amp; node != -1)
                if(point_distance(mouse_x, mouse_y, node.x, node.y) &gt; maxdist)
                {
                    with(node) instance_destroy();
                    if(instance_exists(node2) &amp;&amp; node2 != -1)
                        with(node2) instance_destroy();
                }
            if(instance_exists(node2) &amp;&amp; node2 != -1)
                if(point_distance(mouse_x, mouse_y, node2.x, node2.y) &gt; maxdist || amplified = 0)
                {
                    with(node) instance_destroy();
                    with(node2) instance_destroy();
                }
            //Check if a node exists
            if(instance_exists(node) &amp;&amp; node != -1)
            {
                //Check if a second node exists
                if(instance_exists(node2) &amp;&amp; node2 != -1)
                {
                    //Create a third node
                    node3 = instance_create(x, y, obj_sparkline);
                    node3.direction = point_direction(x, y, mouse_x, mouse_y);
                    node3.targetx = mouse_x;
                    node3.targety = mouse_y;
                    node3.final = 1;
                    node3.mid = global.mymid;
                    //Make the second node connect to this node
                    node2.second = node3;
                    //Connect to the first node
                    node3.second = node;
                    //Note this is the third node
                    nodecount = 3;
                    //Break the loop
                    break;
                }
                //Create a second node
                node2 = instance_create(x, y, obj_sparkline);
                node2.direction = point_direction(x, y, mouse_x, mouse_y);
                node2.targetx = mouse_x;
                node2.targety = mouse_y;
                node2.final = 0;
                node2.mid = global.mymid;
                //Make the first node connect to this node
                node.second = node2;
                //Note this is the third node
                nodecount = 2;
                //Break the loop
                break;
            }
            //Create a node
            node = instance_create(x, y, obj_sparkline);
            node.direction = point_direction(x, y, mouse_x, mouse_y);
            node.targetx = mouse_x;
            node.targety = mouse_y;
            node.final = 0;
            node.mid = global.mymid;
            //Note this is the third node
            nodecount = 1;
            //Break the loop
            break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(13, 0)//Sparkline secondary
        writebyte(nodecount, 0);
        writeshort(x, 0);
        writeshort(y, 0);
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Burst
    case 12:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_burst);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(14, 0)//Burst secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Trident Missile
    case 13:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_tridentmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile1 = instance_create(x, y, obj_tridentmissile);
        missile1.startdir = facedir;
        missile1.direction = facedir;
        missile1.speed = 4*global.framerate;
        missile1.target = obj_mod.foundtarget;
        missile1.mid = global.mymid;
        missile1.trio = 1;
        missile1.amplified = amplified;
        
        //Create the second missile
        missile2 = instance_create(x, y, obj_tridentmissile);
        missile2.startdir = facedir;
        missile2.direction = facedir-90;
        missile2.speed = 4*global.framerate;
        missile2.target = obj_mod.foundtarget;
        missile2.mid = global.mymid;
        missile2.trio = 2;
        missile2.middle = missile1;
        missile2.amplified = amplified;
        
        //Create the last missile
        missile3 = instance_create(x, y, obj_tridentmissile);
        missile3.startdir = facedir;
        missile3.direction = facedir+90;
        missile3.speed = 4*global.framerate;
        missile3.target = obj_mod.foundtarget;
        missile3.mid = global.mymid;
        missile3.trio = 3;
        missile3.middle = missile1;
        missile3.amplified = amplified;
        
        //Take note of the last two missile in the first missile
        missile1.second = missile2;
        missile1.third = missile3;
        
        //Take the missiles away from your missile count
        deploystock[global.spacehot-3] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
         testtarget+=1;
         if(testtarget != global.mymid)
          if(global.playership[testtarget] = obj_mod.foundtarget)
           break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(15, 0)//Trident missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(facedir/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Slash
    case 14:
        //Check if you have energy for the barrier
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
    
        //Reduce Energy
        energy -= 25;
        //Create and send the initial shot at the cursor
        form = instance_create(x+lengthdir_x(32, point_direction(x, y,mouse_x, mouse_y)), y+lengthdir_y(32, point_direction(x, y,mouse_x, mouse_y)), obj_slash);
        form.mid = global.mymid;
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.direction = point_direction(x, y,mouse_x, mouse_y);
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(16, 0)//Slash secondary
        writeshort(form.x, 0);
        writeshort(form.y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Horizon
    case 15:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if you have energy for the barrier
        if(energy &lt; 25)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }                   
        //Reduce Energy
        energy -= 25;
        //Crete and send the initial shot at the cursor
        loldir = point_direction(x, y, obj_mod.foundtarget.x, obj_mod.foundtarget.y);
        form = instance_create(obj_mod.foundtarget.x+lengthdir_x(500, loldir), obj_mod.foundtarget.y+lengthdir_y(500, loldir), obj_horizon);
        form.target = obj_mod.foundtarget;
        form.direction = loldir-180;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(17, 0)//Horizon secondary
        writeshort(form.x, 0);
        writeshort(form.y, 0);    
        writebyte(form.direction/1.5, 0);  
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Hacker Mine
    case 16:
        //Check if you have mines left
        if(deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_hackermine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[global.spacehot-3] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(18, 0)//Hacker Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
   
    break;
    
    //Shock Missile
    case 17:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing dual missile belongs to you
        with(obj_shockmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_shockmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 12*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[global.spacehot-3] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(19, 0)//Shock missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Hermit Missile
    case 18:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Check if an existing hermit missile belongs to you
        with(obj_hermitmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_hermitmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13*global.framerate;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        missile.target = obj_mod.foundtarget;
        //Take the missiles away from your missile count
        deploystock[global.spacehot-3] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(22, 0)//hermit missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Strike Missile
    case 19:
        //Make sure you are targetting someone
        if(obj_mod.foundtarget &lt;= -1 || deploystock[global.spacehot-3] &lt; 1)
        {
          audio_play_sound(snd_unable, 1, 0);
          exit;
        }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_strikemissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13*global.framerate;
        missile.target = obj_mod.foundtarget;
        missile.mid = global.mymid;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[global.spacehot-3] -= 1;
        //Find out which ship you are targetting
        testtarget = -1;
        while(true)
        {
            testtarget+=1;
            if(testtarget != global.mymid)
                if(global.playership[testtarget] = obj_mod.foundtarget)
                    break;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(23, 0)//Shock missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(testtarget, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Strike Mine
    case 20:
        //Check if you have mines left
        if(deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        phan = instance_create(x, y, obj_strikemine);
        phan.mid = global.mymid;
        phan.amplified =amplified;
        //Take the mine away from your mine count
        deploystock[global.spacehot-3] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(24, 0)//Strike Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
    
    //Turret
    case 21:
        //Check if you have soluses left
        if(deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        if(obj_bulletcontrol.wallposition[floor(mouse_x/32), floor(mouse_y/32)] = true)
            exit;
        //Reduce soluses
        deploystock[global.spacehot-3] -= 1;
        //Create the solus where the cursor is
        solus = instance_create(mouse_x, mouse_y, obj_turret);
        solus.mid = global.mymid;
        solus.amplified = amplified
        
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(25, 0)//Turret secondary
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Spiral
    case 22:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_spiral);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.targetx = mouse_x;
        form.targety = mouse_y;
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(26, 0)//Spiral secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Whip
    case 23:
        //Check to see if you have enough energy to use it
        if(energy &lt; 20 || whips &gt; 0)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Initialize the attack
                   
        if(global.sfxtoggle = 0)
        {
            emit_whip = audio_emitter_create();
            sound_whip = audio_play_sound_on(emit_whip, snd_whip, 1, 1);
            audio_emitter_position(emit_whip, x, y, 0);
        }
        alarm[8] = 1;
        
        if(amplified = 0)
         whips = 15;
        else
         whips = 20;
        //Set the targetted coordinates
        hitx = mouse_x;
        hity = mouse_y;
        //Reduce energy
        energy -= 20;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(27, 0)//Whip secondary
        writeshort(hitx, 0);
        writeshort(hity, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Trail
    case 24:
        //Check if you have energy for the barrier
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 30;
        //Crete and send the initial shot at the cursor
        form = instance_create(x, y, obj_trail);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.mid = global.mymid;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(28, 0)//Trail secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(form.direction, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Serpent
    case 25:
        //Check if you have energy
        if(energy &lt; 30)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 30;
        //Create and send the shot at the cursor
        form = instance_create(x, y, obj_serpent);
        form.direction = point_direction(x, y, mouse_x, mouse_y);
        form.mid = global.mymid;
        form.target = 1;
        form.amplified = amplified;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(29, 0)//Serpent secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(form.direction, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Storm
    case 26:
        //Check if you have energy
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Reduce Energy
        energy -= 20;
        with(obj_storm)
        {
            if(mid = global.mymid)
                age += 1;
            if(age = 4)
                instance_destroy();
        }
        with(obj_storm_wall)
        {
            if(mid = global.mymid)
                age += 1;
            if(age = 4)
                instance_destroy();
        }
        sfx_play(snd_storm, x, y);
        //Create and send shots at the cursor
        if(amplified = 0)
        {
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y);
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-30;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+30;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+15;
            storm.mid = global.mymid;
            storm = instance_create(mouse_x, mouse_y, obj_storm_wall);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-180;
            storm.x += lengthdir_x(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);
            storm.y += lengthdir_y(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);       
            storm.image_angle = storm.direction;
            storm.mid = global.mymid;
        }
        else
        {
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+5;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-5;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+15;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-25;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+25;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-35;
            storm.mid = global.mymid;
            storm = instance_create(x, y, obj_storm);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)+35;
            storm.mid = global.mymid;
            storm = instance_create(mouse_x, mouse_y, obj_storm_wall);
            storm.direction = point_direction(x, y, mouse_x, mouse_y)-180;
            storm.x += lengthdir_x(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);
            storm.y += lengthdir_y(point_distance(x, y, mouse_x, mouse_y), storm.direction-180);       
            storm.image_angle = storm.direction;
            storm.mid = global.mymid;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(30, 0)//Storm secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    
    break;
    
    //Trigger
    case 27:
        //Check if you have energy for the barrier
        if(energy &lt; 20)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        with(obj_trigger)
            if(speed &gt; 0)
                exit;
                
        //Reduce Energy
        energy -= 20;
        
        var direct;
        direct = 0;
        if(instance_exists(obj_trigger))
            if(instance_exists(directthis))
                direct = 1;
        if(direct = 0)
        {
            //Crete and send the initial shot at the cursor
            form = instance_create(x, y, obj_trigger);
            form.direction = point_direction(x, y, mouse_x, mouse_y);
            form.targetx = mouse_x;
            form.targety = mouse_y;
            form.mid = global.mymid;
            form.amplified = amplified;
            directthis = form;
        }
        else
        {
            sfx_play(snd_wave, directthis.x, directthis.y);
            directthis.targetx = mouse_x;
            directthis.targety = mouse_y;
            directthis.speed = 13;
            directthis.direction = point_direction(directthis.x, directthis.y, mouse_x, mouse_y);
            directthis.alarm[0] = 5;
        }
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(31, 0)//Trigger secondary
        writeshort(x, 0);
        writeshort(y, 0);    
        writeshort(mouse_x, 0);
        writeshort(mouse_y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    
    //Split Missile
    case 28:
        //Check if an existing hermit missile belongs to you
        with(obj_splitmissile)
            if(mid = global.mymid)
            {
                audio_play_sound(snd_unable, 1, 0);
                exit;
            }
        //Check if you have missiles left
        if(deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Create the first missile and give it its properties
        missile = instance_create(x, y, obj_splitmissile);
        missile.direction = aim_limit(facedir, point_direction(x, y, mouse_x, mouse_y), 30);
        missile.speed = 13*global.framerate;
        missile.mid = global.mymid;
        missile.oldmid = -1;
        missile.damage = 11;
        missile.amplified = amplified;
        //Take the missiles away from your missile count
        deploystock[global.spacehot-3] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(33, 0)//Split missile secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(missile.direction/1.5, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
        
    break;
    
    //Cluster Mine
    case 29:
        //Check if you have mines left
        if(deploystock[global.spacehot-3] &lt; 1)
        {
            audio_play_sound(snd_unable, 1, 0);
            exit;
        }
        //Destroy nearby mines
        for(i = instance_nearest(x, y, obj_clustermine); i != noone; i = instance_nearest(x, y, obj_clustermine))
        {
            if(point_distance(x, y, i.x, i.y) &lt; 400)
                with(i)
                    instance_destroy();
            else
                break;
        }
        for(i = instance_nearest(x, y, obj_clustermine_small); i != noone; i = instance_nearest(x, y, obj_clustermine_small))
        {
            if(point_distance(x, y, i.x, i.y) &lt; 400)
                with(i)
                    instance_destroy();
            else
                break;
        }
        phan = instance_create(x, y, obj_clustermine);
        phan.mid = global.mymid;
        phan.amplified = amplified;
        //Take the mine away from your mine count
        deploystock[global.spacehot-3] -= 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(34, 0)//Cluster Mine secondary
        writeshort(x, 0);
        writeshort(y, 0);
        writebyte(amplified, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);     
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keypress, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(energy &lt;= 1)
    exit;
 
switch(global.shipselect)
{
    case 1:
        //Switch controlturn to make Alpha Drift ability
        controlturn = 0.1;
        abilityactive = 1;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(21, 0);//Treat pulse as a secondary
        writebyte(1, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    case 2:
        //Exit if already warping, not enough energy, or overheated
        if(warping != -1 || cooldown = 0)
            exit;
            
        //Find the distance to the cursor
        dist = min(400, point_distance(x, y, mouse_x, mouse_y));
        //Warp towards the cursor
        warpdir = point_direction(x, y, mouse_x, mouse_y);
        warpx = x+lengthdir_x(dist, warpdir);
        warpy = y+lengthdir_y(dist, warpdir);
        //Don't warp if you would warp into a wall
        if(collision_point(warpx, warpy, obj_wall, 1, 1))
            exit;
            
        //Play a sound effect
        sfx_play(snd_swifttele, x, y);

        //Begin warp, use energy and heat
        warping = 40;
        heat -= 30;
        cooldown = 0;
        //swiftteled = instance_create(x, y, obj_swifttele);
        view_object[0] = swiftteled;
        swiftteled.hspeed = (warpx-x)/10;
        swiftteled.vspeed = (warpy-y)/10;
        
        //Change sprite to show warp
        sprite_index = spr_swiftwing_warp;
        if(global.team[global.mymid] = 2)
            sprite_index = spr_swiftwing_warp_enemy;
        
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(35, 0);//Treat warp as a secondary
        writeshort(warpx, 0);
        writeshort(warpy, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
    case 3:
        //Create pulse if not overheated
        if(cooldown = 0)
            exit;
        //Use heat
        heat -= 25;
        cooldown = 0;
        //Create pulse
        forceturn = 8;
        maxspeed = 10;
        speed = 10;
        abilityactive = 1;
        alarm[3] = 60;
        //Send the information
        clearbuffer(0);
        packet_label_write(2, global.mymid);
        writebyte(21, 0)//Treat pulse as a secondary
        writebyte(1, 0);
        //Send to everyone if host
        if(global.master = true)
            client_sendall(0, 0);
        else
            //Send to host if client
            sendmessage(global.host, 0, 0, 0);
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keypress, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if you are chatting
if(global.chatting = true || hacked = true || extraslow &gt; 0) exit;

predictspeed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>predictspeed = 0;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>predictturn = 0;
thisturn = 0;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>predictturn = 0;
thisturn = 0;
obj_mod.refreshing = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keyrelease, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.shipselect != 1)
    exit;
    
//Switch controlturn to make Alpha Drift ability
controlturn = 0.75;
abilityactive = 0;
//Send the information
clearbuffer(0);
packet_label_write(2, global.mymid);
writebyte(21, 0);//Treat pulse as a secondary
writebyte(0, 0);
//Send to everyone if host
if(global.master = true)
    client_sendall(0, 0);
else
    //Send to host if client
    sendmessage(global.host, 0, 0, 0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_keyrelease, vk_control);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,11</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
